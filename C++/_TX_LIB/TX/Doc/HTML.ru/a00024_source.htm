<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TX Library: Исходный файл TXLib.h</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen_.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Создано системой Doxygen 1.7.3 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="TXLib.png"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">TX Library&#160;<span id="projectnumber">Help &ndash; Version: 0172a, Revision: 161</span></div>
   <div id="projectbrief"><s>&nbsp;ALL&nbsp;</s> Windows graphics in a sandbox</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('a00024.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>TXLib.h</h1>  </div>
</div>
<div class="contents">
<a href="a00024.htm">См. документацию.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//============================================================================================</span>
<a name="l00002"></a>00002 <span class="comment">//           [These sections are for folding control  in Code::Blocks]</span>
<a name="l00003"></a>00003 <span class="comment">//{          [Best viewed with &quot;Fold all on file open&quot; option enabled]</span>
<a name="l00004"></a>00004 <span class="comment">//============================================================================================</span>
<a name="l00039"></a>00039 <span class="comment"></span><span class="comment">//           $Author: Ded (Ilya Dedinsky, http://ded32.net.ru) $</span>
<a name="l00040"></a>00040 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00048"></a>00048 <span class="comment"></span><span class="comment">//}</span>
<a name="l00049"></a>00049 <span class="comment">//============================================================================================</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="preprocessor">#if !defined (__TXLIB_H) || defined (_TX)        // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; The code is here, unfold it</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="preprocessor">#define       __TXLIB_H</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a>00054 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00055"></a>00055 <span class="comment">//{          Version information</span>
<a name="l00056"></a>00056 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00057"></a>00057 
<a name="l00059"></a>00059 <span class="preprocessor">#define _TX_V_FROM_CVS(_1,file,ver,rev,date,auth,_2)  &quot;TXLib [Version &quot; #ver &quot;, Revision &quot; #rev &quot;]&quot;</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span><span class="preprocessor">#define _TX_A_FROM_CVS(_1,file,ver,rev,date,auth,_2)  &quot;Copyright (C) &quot; auth</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span><span class="preprocessor">#define _TX_v_FROM_CVS(_1,file,ver,rev,date,auth,_2)  ((0x##ver &lt;&lt; 16) | 0x##rev)</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span>
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00076"></a>00076 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00078"></a>00078 <span class="comment"></span>
<a name="l00079"></a><a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19">00079</a> <span class="preprocessor">#define _TX_VERSION           _TX_V_FROM_CVS ($versioninfo: , TXLib.h, 0172a, 161, 2011-06-08 23:23:24 +0400, &quot;Ded (Ilya Dedinsky, http://ded32.net.ru)&quot;, $)</span>
<a name="l00080"></a>00080 <span class="preprocessor"></span><span class="preprocessor">#define _TX_AUTHOR            _TX_A_FROM_CVS ($versioninfo: , TXLib.h, 0172a, 161, 2011-06-08 23:23:24 +0400, &quot;Ded (Ilya Dedinsky, http://ded32.net.ru)&quot;, $)</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span>
<a name="l00083"></a>00083 <span class="comment">//{----------------------------------------------------------------------------</span>
<a name="l00101"></a>00101 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------</span>
<a name="l00102"></a>00102 
<a name="l00103"></a><a class="code" href="a00034.htm#ga6b76c63cd895c2be63ac8e690028623b">00103</a> <span class="preprocessor">#define _TX_VER               _TX_v_FROM_CVS ($versioninfo: , TXLib.h, 0172a, 161, 2011-06-08 23:23:24 +0400, &quot;Ded (Ilya Dedinsky, http://ded32.net.ru)&quot;, $)</span>
<a name="l00104"></a>00104 <span class="preprocessor"></span>
<a name="l00105"></a>00105 <span class="comment">//}</span>
<a name="l00106"></a>00106 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00109"></a>00109 <span class="comment">//{          Compiler- and platform-specific</span>
<a name="l00111"></a>00111 <span class="comment"></span><span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00113"></a>00113 <span class="comment"></span>
<a name="l00114"></a>00114 <span class="preprocessor">#if !defined (__cplusplus)</span>
<a name="l00115"></a>00115 <span class="preprocessor"></span>
<a name="l00116"></a>00116 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00117"></a>00117 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00118"></a>00118 <span class="preprocessor"></span><span class="preprocessor">    #error -----------------------------------------------------------------------------------</span>
<a name="l00119"></a>00119 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00120"></a>00120 <span class="preprocessor"></span><span class="preprocessor">    #error TXLib.h: Must use C++ to compile TXLib.h.</span>
<a name="l00121"></a>00121 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00122"></a>00122 <span class="preprocessor"></span><span class="preprocessor">    #error Check your source file extension. Maybe it is &quot;.C&quot;. It should be &quot;.CPP&quot;.</span>
<a name="l00123"></a>00123 <span class="preprocessor"></span><span class="preprocessor">    #error If your file is named, for example, &quot;PROGRAM.C&quot;, go to menu [File], then</span>
<a name="l00124"></a>00124 <span class="preprocessor"></span><span class="preprocessor">    #error [Save As] and rename it to &quot;PROGRAM.CPP&quot;. Please do not use russian</span>
<a name="l00125"></a>00125 <span class="preprocessor"></span><span class="preprocessor">    #error letters or spaces.</span>
<a name="l00126"></a>00126 <span class="preprocessor"></span><span class="preprocessor">    #error -----------------------------------------------------------------------------------</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span>
<a name="l00129"></a>00129 <span class="preprocessor">#endif</span>
<a name="l00130"></a>00130 <span class="preprocessor"></span>
<a name="l00131"></a>00131 <span class="preprocessor">#if !defined (WIN32) &amp;&amp; !defined (__WIN32__) &amp;&amp; !defined(_WIN32) &amp;&amp; !defined(_WIN32_WINNT)</span>
<a name="l00132"></a>00132 <span class="preprocessor"></span>
<a name="l00133"></a>00133 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00134"></a>00134 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00135"></a>00135 <span class="preprocessor"></span><span class="preprocessor">    #error -----------------------------------------------------------------------------------</span>
<a name="l00136"></a>00136 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00137"></a>00137 <span class="preprocessor"></span><span class="preprocessor">    #error TXLib.h: Windows (MSVC/Win32 or GCC/MinGW) is the only supported system, sorry.</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00139"></a>00139 <span class="preprocessor"></span><span class="preprocessor">    #error In Linux or iOS, you should write your own TXLib and share it with your</span>
<a name="l00140"></a>00140 <span class="preprocessor"></span><span class="preprocessor">    #error friends.</span>
<a name="l00141"></a>00141 <span class="preprocessor"></span><span class="preprocessor">    #error -----------------------------------------------------------------------------------</span>
<a name="l00142"></a>00142 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00143"></a>00143 <span class="preprocessor"></span>
<a name="l00144"></a>00144 <span class="preprocessor">#endif</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span>
<a name="l00146"></a>00146 <span class="preprocessor">#if defined (_WINDOWS_H) || defined (_INC_WINDOWS) || defined (_WINDOWS_) || defined (__WINDOWS__)</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span>
<a name="l00148"></a>00148 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00149"></a>00149 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00150"></a>00150 <span class="preprocessor"></span><span class="preprocessor">    #error -----------------------------------------------------------------------------------</span>
<a name="l00151"></a>00151 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00152"></a>00152 <span class="preprocessor"></span><span class="preprocessor">    #error TXLib.h: Should include &quot;TXLib.h&quot; *before* or *instead* of &lt;Windows.h&gt;.</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00154"></a>00154 <span class="preprocessor"></span><span class="preprocessor">    #error Rearrange your #include directives.</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span><span class="preprocessor">    #error -----------------------------------------------------------------------------------</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span>
<a name="l00158"></a>00158 <span class="preprocessor">#endif</span>
<a name="l00159"></a>00159 <span class="preprocessor"></span>
<a name="l00160"></a>00160 <span class="preprocessor">#if defined (__STRICT_ANSI__)     // Try to extend strict ANSI rules</span>
<a name="l00161"></a>00161 <span class="preprocessor"></span>
<a name="l00162"></a>00162 <span class="preprocessor">    #warning TXLib.h: Trying to extend strict ANSI compatibility</span>
<a name="l00163"></a>00163 <span class="preprocessor"></span><span class="preprocessor">    #define __STRICT_ANSI__UNDEFINED</span>
<a name="l00164"></a>00164 <span class="preprocessor"></span><span class="preprocessor">    #undef  __STRICT_ANSI__</span>
<a name="l00165"></a>00165 <span class="preprocessor"></span>
<a name="l00166"></a>00166 <span class="preprocessor">    #if defined (_STRING_H_) || defined (_INC_STRING) || defined (_STDIO_H_) || defined (_INC_STDIO)</span>
<a name="l00167"></a>00167 <span class="preprocessor"></span>
<a name="l00168"></a>00168 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00169"></a>00169 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00170"></a>00170 <span class="preprocessor"></span><span class="preprocessor">    #error -----------------------------------------------------------------------------------</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00172"></a>00172 <span class="preprocessor"></span><span class="preprocessor">    #error TXLib.h: Should include &quot;TXLib.h&quot; *before* &lt;string.h&gt; or &lt;stdio.h&gt; in Strict ANSI mode.</span>
<a name="l00173"></a>00173 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00174"></a>00174 <span class="preprocessor"></span><span class="preprocessor">    #error Rearrange your #include directives.</span>
<a name="l00175"></a>00175 <span class="preprocessor"></span><span class="preprocessor">    #error -----------------------------------------------------------------------------------</span>
<a name="l00176"></a>00176 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00177"></a>00177 <span class="preprocessor"></span>
<a name="l00178"></a>00178 <span class="preprocessor">    #endif</span>
<a name="l00179"></a>00179 <span class="preprocessor"></span>
<a name="l00180"></a>00180 <span class="preprocessor">#endif</span>
<a name="l00181"></a>00181 <span class="preprocessor"></span>
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 <span class="preprocessor">#if defined (__GNUC__)</span>
<a name="l00186"></a>00186 <span class="preprocessor"></span>
<a name="l00187"></a>00187 <span class="preprocessor">    #if (__GNUC__ &gt;= 4) &amp;&amp; (__GNUC_MINOR__ &gt;= 3)</span>
<a name="l00188"></a>00188 <span class="preprocessor"></span>
<a name="l00189"></a>00189 <span class="preprocessor">        #pragma GCC optimize         (&quot;no-strict-aliasing&quot;)</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span><span class="preprocessor">        #pragma GCC diagnostic ignored &quot;-Wstrict-aliasing&quot;</span>
<a name="l00191"></a>00191 <span class="preprocessor"></span>
<a name="l00192"></a>00192 <span class="preprocessor">        #pragma GCC diagnostic ignored &quot;-Wshadow&quot;</span>
<a name="l00193"></a>00193 <span class="preprocessor"></span>
<a name="l00194"></a>00194 <span class="preprocessor">        #pragma GCC diagnostic ignored &quot;-Wmissing-field-initializers&quot;</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span><span class="preprocessor">        #pragma GCC diagnostic ignored &quot;-Wunreachable-code&quot;</span>
<a name="l00196"></a>00196 <span class="preprocessor"></span><span class="preprocessor">        #pragma GCC diagnostic ignored &quot;-Wunused-label&quot;    // Just for fun in _txCanvas_OnCmdAbout()</span>
<a name="l00197"></a>00197 <span class="preprocessor"></span><span class="preprocessor">        #pragma GCC diagnostic ignored &quot;-Winline&quot;</span>
<a name="l00198"></a>00198 <span class="preprocessor"></span>
<a name="l00199"></a>00199 <span class="preprocessor">    #endif</span>
<a name="l00200"></a>00200 <span class="preprocessor"></span>
<a name="l00201"></a>00201 <span class="preprocessor">    #define _TX_CHECK_FORMAT( fmtIdx )  __attribute__ (( format (printf, (fmtIdx), (fmtIdx)+1) ))</span>
<a name="l00202"></a>00202 <span class="preprocessor"></span>
<a name="l00203"></a>00203     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00204"></a>00204     <span class="keyword">inline</span> T _txNOP (T value)           { <span class="keywordflow">return</span> value; }  <span class="comment">// To suppress performance warnings in assert etc</span>
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 <span class="preprocessor">#else</span>
<a name="l00207"></a>00207 <span class="preprocessor"></span>
<a name="l00208"></a>00208 <span class="preprocessor">    #define _TX_CHECK_FORMAT( fmtIdx )</span>
<a name="l00209"></a>00209 <span class="preprocessor"></span>
<a name="l00210"></a>00210 <span class="preprocessor">    #define _txNOP( value )             ( value )</span>
<a name="l00211"></a>00211 <span class="preprocessor"></span>
<a name="l00212"></a>00212 <span class="preprocessor">#endif</span>
<a name="l00213"></a>00213 <span class="preprocessor"></span>
<a name="l00214"></a>00214 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l00217"></a>00217 <span class="preprocessor"></span>
<a name="l00218"></a>00218 <span class="preprocessor">    #pragma warning (push, 4)                   // Set maximum warning level</span>
<a name="l00219"></a>00219 <span class="preprocessor"></span>
<a name="l00220"></a>00220 <span class="preprocessor">    #pragma warning (disable: 4127)             // conditional expression is constant</span>
<a name="l00221"></a>00221 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4351)             // new behavior: elements of array ... will be default initialized</span>
<a name="l00222"></a>00222 <span class="preprocessor"></span>
<a name="l00223"></a>00223 <span class="preprocessor">#endif</span>
<a name="l00224"></a>00224 <span class="preprocessor"></span>
<a name="l00225"></a>00225 <span class="preprocessor">#if defined (_MSC_VER) &amp;&amp; (_MSC_VER == 1200)    // MSVC 6 (1998)</span>
<a name="l00226"></a>00226 <span class="preprocessor"></span>
<a name="l00227"></a>00227 <span class="preprocessor">    #define _MSC_VER_6                          // Flag the bad compiler</span>
<a name="l00228"></a>00228 <span class="preprocessor"></span>
<a name="l00229"></a>00229 <span class="preprocessor">    #pragma warning (disable: 4511)             // copy constructor could not be generated</span>
<a name="l00230"></a>00230 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4512)             // assignment operator could not be generated</span>
<a name="l00231"></a>00231 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4514)             // unreferenced inline function has been removed</span>
<a name="l00232"></a>00232 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4663)             // C++ language change: to explicitly specialize class template &#39;...&#39;</span>
<a name="l00233"></a>00233 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4710)             // function &#39;...&#39; not inlined</span>
<a name="l00234"></a>00234 <span class="preprocessor"></span>
<a name="l00235"></a>00235 <span class="preprocessor">    #if !defined (WINVER)</span>
<a name="l00236"></a>00236 <span class="preprocessor"></span><span class="preprocessor">        #define WINVER              0x0400      // MSVC 6: Defaults to Windows 95</span>
<a name="l00237"></a>00237 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00238"></a>00238 <span class="preprocessor"></span>
<a name="l00239"></a>00239 <span class="preprocessor">#endif</span>
<a name="l00240"></a>00240 <span class="preprocessor"></span>
<a name="l00241"></a>00241 <span class="preprocessor">#if defined (_MSC_VER) &amp;&amp; (_MSC_VER &gt;= 1400)    // MSVC 8 (2005) or greater</span>
<a name="l00242"></a>00242 <span class="preprocessor"></span>
<a name="l00243"></a>00243 <span class="preprocessor">    #define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES 1</span>
<a name="l00244"></a>00244 <span class="preprocessor"></span><span class="preprocessor">    #define _TX_TRUNCATE            , _TRUNCATE</span>
<a name="l00245"></a>00245 <span class="preprocessor"></span>
<a name="l00246"></a>00246 <span class="preprocessor">#else</span>
<a name="l00247"></a>00247 <span class="preprocessor"></span>
<a name="l00248"></a>00248 <span class="preprocessor">    #define  strncpy_s              strncpy     // MSVC prior to 8 (2005) versions and GCC</span>
<a name="l00249"></a>00249 <span class="preprocessor"></span><span class="preprocessor">    #define  strncat_s              strncat     //   do NOT have secure variants of these</span>
<a name="l00250"></a>00250 <span class="preprocessor"></span><span class="preprocessor">    #define  wcsncpy_s              wcsncpy     //   functions, so use insecure ones.</span>
<a name="l00251"></a>00251 <span class="preprocessor"></span><span class="preprocessor">    #define _snprintf_s            _snprintf    //   ...</span>
<a name="l00252"></a>00252 <span class="preprocessor"></span><span class="preprocessor">    #define _vsnprintf_s           _vsnprintf</span>
<a name="l00253"></a>00253 <span class="preprocessor"></span><span class="preprocessor">    #define  strerror_s(buf,code)               (              strncpy  ((buf), strerror (code),  sizeof(buf)-1) )</span>
<a name="l00254"></a>00254 <span class="preprocessor"></span><span class="preprocessor">    #define  getenv_s(sz,buf,sizeof_buf,name)   ( (void)(sz),  strncpy  ((buf), getenv (name),   (sizeof_buf)-1) )</span>
<a name="l00255"></a>00255 <span class="preprocessor"></span><span class="preprocessor">    #define  strtok_s(str,delim,ctx)            ( (void)(ctx), strtok   ((str), (delim)) )</span>
<a name="l00256"></a>00256 <span class="preprocessor"></span><span class="preprocessor">    #define  ctime_s(str,sizeof_str,time)       (              strncpy  ((str), ctime (time),    (sizeof_str)-1) )</span>
<a name="l00257"></a>00257 <span class="preprocessor"></span>
<a name="l00258"></a>00258 <span class="preprocessor">    #define _TX_TRUNCATE</span>
<a name="l00259"></a>00259 <span class="preprocessor"></span>
<a name="l00260"></a>00260 <span class="preprocessor">#endif</span>
<a name="l00261"></a>00261 <span class="preprocessor"></span>
<a name="l00262"></a>00262 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00263"></a>00263 
<a name="l00264"></a>00264 <span class="preprocessor">#if defined (__INTEL_COMPILER)</span>
<a name="l00265"></a>00265 <span class="preprocessor"></span>
<a name="l00266"></a>00266 <span class="preprocessor">    #pragma warning (disable:  174)             // remark: expression has no effect</span>
<a name="l00267"></a>00267 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:  304)             // remark: access control not specified (&quot;public&quot; by default)</span>
<a name="l00268"></a>00268 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:  522)             // remark: function &quot;...&quot; redeclared &quot;inline&quot; after being called</span>
<a name="l00269"></a>00269 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:  981)             // remark: operands are evaluated in unspecified order</span>
<a name="l00270"></a>00270 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 1684)             // conversion from pointer to same-sized integral type (potential portability problem)</span>
<a name="l00271"></a>00271 <span class="preprocessor"></span>
<a name="l00272"></a>00272 <span class="preprocessor">#endif</span>
<a name="l00273"></a>00273 <span class="preprocessor"></span>
<a name="l00274"></a>00274 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00275"></a>00275 
<a name="l00276"></a>00276 <span class="preprocessor">#if !defined (WINVER)</span>
<a name="l00277"></a>00277 <span class="preprocessor"></span><span class="preprocessor">    #define   WINVER         0x0500             // Defaults to Windows 2000</span>
<a name="l00278"></a>00278 <span class="preprocessor"></span><span class="preprocessor">    #define   WINDOWS_ENABLE_CPLUSPLUS          // Allow use of type-limit macros in &lt;basetsd.h&gt;,</span>
<a name="l00279"></a>00279 <span class="preprocessor"></span><span class="preprocessor">#endif                                          //   they allowed by default if WINVER &gt;= 0x0600.</span>
<a name="l00280"></a>00280 <span class="preprocessor"></span>
<a name="l00281"></a>00281 <span class="preprocessor">#if !defined (_WIN32_WINNT)</span>
<a name="l00282"></a>00282 <span class="preprocessor"></span><span class="preprocessor">    #define   _WIN32_WINNT   WINVER             // Defaults to the same as WINVER</span>
<a name="l00283"></a>00283 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00284"></a>00284 <span class="preprocessor"></span>
<a name="l00285"></a>00285 <span class="preprocessor">#if !defined (_WIN32_IE)</span>
<a name="l00286"></a>00286 <span class="preprocessor"></span><span class="preprocessor">    #define   _WIN32_IE      WINVER             // Defaults to the same as WINVER</span>
<a name="l00287"></a>00287 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00288"></a>00288 <span class="preprocessor"></span>
<a name="l00289"></a>00289 <span class="preprocessor">#undef   UNICODE                                // Burn Unicode, burn</span>
<a name="l00290"></a>00290 <span class="preprocessor"></span><span class="preprocessor">#undef  _UNICODE</span>
<a name="l00291"></a>00291 <span class="preprocessor"></span>
<a name="l00292"></a>00292 <span class="preprocessor">#define _USE_MATH_DEFINES                       // math.h&#39;s M_PI etc.</span>
<a name="l00293"></a>00293 <span class="preprocessor"></span>
<a name="l00294"></a>00294 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00295"></a>00295 
<a name="l00296"></a>00296 <span class="preprocessor">#undef         _TX_NAME</span>
<a name="l00297"></a>00297 <span class="preprocessor"></span><span class="preprocessor">#undef         _TX_NAMED</span>
<a name="l00298"></a>00298 <span class="preprocessor"></span>
<a name="l00299"></a>00299 <span class="preprocessor">#if defined   (_TX)</span>
<a name="l00300"></a>00300 <span class="preprocessor"></span><span class="preprocessor">    #define    _TX_NAME      &quot; &quot; TX_QUOTE (_TX) &quot;::TX &quot;</span>
<a name="l00301"></a>00301 <span class="preprocessor"></span><span class="preprocessor">    #define    _TX_NAMED</span>
<a name="l00302"></a>00302 <span class="preprocessor"></span>
<a name="l00303"></a>00303 <span class="preprocessor">#else</span>
<a name="l00304"></a>00304 <span class="preprocessor"></span><span class="preprocessor">    #define    _TX_NAME      &quot; &quot;</span>
<a name="l00305"></a>00305 <span class="preprocessor"></span><span class="preprocessor">    #define    _TX</span>
<a name="l00306"></a>00306 <span class="preprocessor"></span>
<a name="l00307"></a>00307 <span class="preprocessor">#endif</span>
<a name="l00308"></a>00308 <span class="preprocessor"></span>
<a name="l00309"></a>00309 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00310"></a>00310 
<a name="l00312"></a>00312 <span class="comment">//}</span>
<a name="l00313"></a>00313 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00314"></a>00314 
<a name="l00315"></a>00315 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00316"></a>00316 <span class="comment">//{          Includes</span>
<a name="l00317"></a>00317 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 <span class="preprocessor">#ifdef _MSC_VER_6</span>
<a name="l00320"></a>00320 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (push, 3)                   // MSVC 6: At level 4, some std headers emit warnings O_o</span>
<a name="l00321"></a>00321 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00322"></a>00322 <span class="preprocessor"></span>
<a name="l00323"></a>00323 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00326"></a>00326 <span class="preprocessor">#include &lt;stdarg.h&gt;</span>
<a name="l00327"></a>00327 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00328"></a>00328 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00329"></a>00329 <span class="preprocessor">#include &lt;io.h&gt;</span>
<a name="l00330"></a>00330 <span class="preprocessor">#include &lt;fcntl.h&gt;</span>
<a name="l00331"></a>00331 <span class="preprocessor">#include &lt;direct.h&gt;</span>
<a name="l00332"></a>00332 <span class="preprocessor">#include &lt;process.h&gt;</span>
<a name="l00333"></a>00333 <span class="preprocessor">#include &lt;signal.h&gt;</span>
<a name="l00334"></a>00334 <span class="preprocessor">#include &lt;locale.h&gt;</span>
<a name="l00335"></a>00335 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00336"></a>00336 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00337"></a>00337 <span class="preprocessor">#include &lt;float.h&gt;</span>
<a name="l00338"></a>00338 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00339"></a>00339 
<a name="l00340"></a>00340 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00341"></a>00341 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00342"></a>00342 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00343"></a>00343 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00344"></a>00344 <span class="preprocessor">#include &lt;exception&gt;</span>
<a name="l00345"></a>00345 <span class="preprocessor">#include &lt;stdexcept&gt;</span>
<a name="l00346"></a>00346 
<a name="l00347"></a>00347 <span class="preprocessor">#include &lt;conio.h&gt;</span>
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 <span class="preprocessor">#include &lt;windows.h&gt;</span>
<a name="l00350"></a>00350 <span class="preprocessor">#include &lt;tlhelp32.h&gt;</span>
<a name="l00351"></a>00351 <span class="preprocessor">#include &lt;shlobj.h&gt;</span>
<a name="l00352"></a>00352 <span class="preprocessor">#include &lt;shellapi.h&gt;</span>
<a name="l00353"></a>00353 
<a name="l00354"></a>00354 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00355"></a>00355 
<a name="l00356"></a>00356 <span class="preprocessor">#ifdef _MSC_VER_6</span>
<a name="l00357"></a>00357 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (pop)                       // MSVC 6: Restore maximum level</span>
<a name="l00358"></a>00358 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00359"></a>00359 <span class="preprocessor"></span>
<a name="l00360"></a>00360 <span class="preprocessor">#ifdef __STRICT_ANSI__UNDEFINED</span>
<a name="l00361"></a>00361 <span class="preprocessor"></span><span class="preprocessor">    #define  __STRICT_ANSI__                    // Redefine back this macro</span>
<a name="l00362"></a>00362 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00363"></a>00363 <span class="preprocessor"></span>
<a name="l00364"></a>00364 <span class="comment">//}</span>
<a name="l00365"></a>00365 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00366"></a>00366 
<a name="l00367"></a>00367 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00368"></a>00368 <span class="comment">//{          The namespaces</span>
<a name="l00369"></a>00369 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00370"></a>00370 
<a name="l00371"></a>00371 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00379"></a>00379 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00380"></a>00380 
<a name="l00381"></a>00381 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l00382"></a>00382 <span class="preprocessor"></span><span class="keyword">namespace </span>_TX { <span class="keyword">namespace </span>TX { }}
<a name="l00383"></a>00383 <span class="preprocessor">#endif</span>
<a name="l00384"></a>00384 <span class="preprocessor"></span>
<a name="l00385"></a>00385 <span class="comment">//}</span>
<a name="l00386"></a>00386 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l00387"></a>00387 
<a name="l00390"></a>00390 <span class="keyword">namespace </span>_TX { <span class="keyword">namespace </span>TX {                   <span class="comment">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; The main code is here, unfold it</span>
<a name="l00391"></a>00391 
<a name="l00394"></a>00394 <span class="comment">//============================================================================================</span>
<a name="l00395"></a>00395 <span class="comment">//{          TXLIB INTERFACE</span>
<a name="l00396"></a>00396 <span class="comment">//           Интерфейс библиотеки</span>
<a name="l00397"></a>00397 <span class="comment">//============================================================================================</span>
<a name="l00398"></a>00398 
<a name="l00399"></a>00399 <span class="comment">//============================================================================================</span>
<a name="l00400"></a>00400 <span class="comment">//{          Initialization</span>
<a name="l00402"></a>00402 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l00404"></a>00404 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00434"></a>00434 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00435"></a>00435 
<a name="l00436"></a>00436 <span class="preprocessor">#ifdef _TX_NAMED</span>
<a name="l00437"></a>00437 <span class="preprocessor"></span>
<a name="l00438"></a>00438 HWND <a class="code" href="a00029.htm#gaca799138bbc60568976aef93fcb3bb2b" title="Создание окна рисования">txCreateWindow</a> (<span class="keywordtype">int</span> sizeX = 800, <span class="keywordtype">int</span> sizeY = 600, <span class="keywordtype">unsigned</span> style =              1);
<a name="l00439"></a>00439 
<a name="l00440"></a>00440 <span class="preprocessor">#else</span>
<a name="l00441"></a>00441 <span class="preprocessor"></span>
<a name="l00442"></a>00442 HWND <a class="code" href="a00029.htm#gaca799138bbc60568976aef93fcb3bb2b" title="Создание окна рисования">txCreateWindow</a> (<span class="keywordtype">int</span> sizeX = 800, <span class="keywordtype">int</span> sizeY = 600, <span class="keywordtype">unsigned</span> style = WS_SYSMENU | 1);
<a name="l00443"></a>00443 
<a name="l00444"></a>00444 <span class="preprocessor">#endif</span>
<a name="l00445"></a>00445 <span class="preprocessor"></span>
<a name="l00446"></a>00446 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00464"></a>00464 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00465"></a>00465 
<a name="l00466"></a>00466 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gae05b7bb52b782b86796201f9f96d0f58" title="Установка параметров рисования по умолчанию.">txSetDefaults</a>();
<a name="l00467"></a>00467 
<a name="l00468"></a>00468 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00488"></a>00488 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00489"></a>00489 
<a name="l00490"></a>00490 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga6971b22d5486b242e20a8dea1f21422a" title="Проверка правильности работы библиотеки">txOK</a>();
<a name="l00491"></a>00491 
<a name="l00492"></a>00492 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00506"></a>00506 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00507"></a>00507 
<a name="l00508"></a>00508 POINT <a class="code" href="a00029.htm#ga69be92455ac555cb03470cb4ef4ac67c" title="Возвращает размер окна рисования в виде структуры POINT.">txGetExtent</a>();
<a name="l00509"></a>00509 
<a name="l00510"></a>00510 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00522"></a>00522 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00523"></a>00523 
<a name="l00524"></a>00524 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gaed186909e8de1f9a6e5f78c362d9b607" title="Возвращает ширину окна рисования.">txGetExtentX</a>();
<a name="l00525"></a>00525 
<a name="l00526"></a>00526 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00539"></a>00539 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00540"></a>00540 
<a name="l00541"></a>00541 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#ga1838cd6a438d4bea5f26bfa47a103a0d" title="Возвращает высоту окна рисования.">txGetExtentY</a>();
<a name="l00542"></a>00542 
<a name="l00543"></a>00543 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00563"></a>00563 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00564"></a>00564 
<a name="l00565"></a>00565 <span class="keyword">inline</span> HDC&amp; <a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>();
<a name="l00566"></a>00566 
<a name="l00567"></a>00567 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00579"></a>00579 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00580"></a>00580 
<a name="l00581"></a>00581 <span class="keyword">inline</span> HWND <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>();
<a name="l00582"></a>00582 
<a name="l00583"></a>00583 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00593"></a>00593 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00594"></a>00594 
<a name="l00595"></a>00595 <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00029.htm#ga732d4db1467f11a4b569b9d6f2383749" title="Возвращает строку с информацией о текущей версии библиотеки.">txVersion</a>();
<a name="l00596"></a>00596 
<a name="l00597"></a>00597 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00607"></a>00607 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00608"></a>00608 
<a name="l00609"></a>00609 <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="a00029.htm#gacd2416cd6b89106ab6700d0c75922bee" title="Возвращает номер версии библиотеки.">txVersionNumber</a>();
<a name="l00610"></a>00610 
<a name="l00611"></a>00611 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00636"></a>00636 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00637"></a>00637 
<a name="l00638"></a>00638 <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keywordtype">bool</span> fileNameOnly = <span class="keyword">true</span>);
<a name="l00639"></a>00639 
<a name="l00641"></a>00641 <span class="comment">//}</span>
<a name="l00642"></a>00642 <span class="comment">//============================================================================================</span>
<a name="l00643"></a>00643 
<a name="l00644"></a>00644 <span class="comment">//============================================================================================</span>
<a name="l00645"></a>00645 <span class="comment">//{          Setting the parameters</span>
<a name="l00647"></a>00647 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l00649"></a>00649 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00662"></a>00662 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00663"></a>00663 
<a name="l00664"></a>00664 <span class="keyword">const</span> COLORREF
<a name="l00665"></a>00665 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l00666"></a><a class="code" href="a00029.htm#ga3e94cfad3d9080241f84129d6e5c09b5">00666</a> <span class="preprocessor"></span>    <span class="keyword">enum</span> <a class="code" href="a00029.htm#ga3e94cfad3d9080241f84129d6e5c09b5" title="Названия предопределенных цветов.">txColors</a> {
<a name="l00667"></a>00667 <span class="preprocessor">#endif</span>
<a name="l00668"></a>00668 <span class="preprocessor"></span>
<a name="l00669"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a9f0adfcb24eeb418fc39fe950db65ec8">00669</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a9f0adfcb24eeb418fc39fe950db65ec8" title="Черный цвет.">TX_BLACK</a>         = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0,   0,   0),   
<a name="l00670"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aac23422a0b96bfc917484ba1fb0990de">00670</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aac23422a0b96bfc917484ba1fb0990de" title="Темно-синий цвет.">TX_BLUE</a>          = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0,   0, 128),   
<a name="l00671"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aa13a0e0eb4587540bd06cb5d55083032">00671</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aa13a0e0eb4587540bd06cb5d55083032" title="Зеленый цвет.">TX_GREEN</a>         = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0, 128,   0),   
<a name="l00672"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a3f59cd6ad2f1c2cea3f1b4f93baae64d">00672</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a3f59cd6ad2f1c2cea3f1b4f93baae64d" title="Бирюзовый цвет.">TX_CYAN</a>          = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0, 128, 128),   
<a name="l00673"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927">00673</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927" title="Темно-красный цвет.">TX_RED</a>           = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (128,   0,   0),   
<a name="l00674"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aec305e1fce8a99fca3c442364389e22b">00674</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aec305e1fce8a99fca3c442364389e22b" title="Темно-малиновый цвет.">TX_MAGENTA</a>       = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (128,   0, 128),   
<a name="l00675"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ad71bcc76691c708c653567bc70129e4b">00675</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ad71bcc76691c708c653567bc70129e4b" title="Коричневый цвет. Некрасивый. Do it yourself using RGB().">TX_BROWN</a>         = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (128, 128,   0),   
<a name="l00676"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ab192f19b013a2563740be0da4e7252d9">00676</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ab192f19b013a2563740be0da4e7252d9" title="Оранжевый цвет.">TX_ORANGE</a>        = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255, 128,   0),   
<a name="l00677"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aaefd282232c1503377c5a5e3545c579a">00677</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aaefd282232c1503377c5a5e3545c579a" title="Серый цвет.">TX_GRAY</a>          = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (160, 160, 160),   
<a name="l00678"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a5308a5fc6c34169a8af67630a5a750d5">00678</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a5308a5fc6c34169a8af67630a5a750d5" title="Темно-серый цвет.">TX_DARKGRAY</a>      = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (128, 128, 128),   
<a name="l00679"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5abec0ab16c8a1ed55e137c20f80cdd25e">00679</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5abec0ab16c8a1ed55e137c20f80cdd25e" title="Светло-серый цвет.">TX_LIGHTGRAY</a>     = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (192, 192, 192),   
<a name="l00680"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a00514ed69e9dd0fafeb324c0258f9030">00680</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a00514ed69e9dd0fafeb324c0258f9030" title="Светло-синий цвет.">TX_LIGHTBLUE</a>     = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0,   0, 255),   
<a name="l00681"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ae45f1e493cce7ef326f8bd9e8c684c6b">00681</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ae45f1e493cce7ef326f8bd9e8c684c6b" title="Светло-зеленый цвет.">TX_LIGHTGREEN</a>    = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0, 255, 128),   
<a name="l00682"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a05b6100527e0b7a96dcda198a1439382">00682</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a05b6100527e0b7a96dcda198a1439382" title="Светло-бирюзовый цвет.">TX_LIGHTCYAN</a>     = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0, 255, 255),   
<a name="l00683"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a1c1e8dec8618fe54eee9e569a828a504">00683</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a1c1e8dec8618fe54eee9e569a828a504" title="Светло-красный цвет.">TX_LIGHTRED</a>      = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255,   0, 128),   
<a name="l00684"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5af3ef6cac77e7ca01e271a3562ceeb52f">00684</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5af3ef6cac77e7ca01e271a3562ceeb52f" title="Светло-малиновый цвет.">TX_LIGHTMAGENTA</a>  = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255,   0, 255),   
<a name="l00685"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ae197423002e969d08646554e8b647454">00685</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ae197423002e969d08646554e8b647454" title="Розовый гламурный:)">TX_PINK</a>          = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255, 128, 255),   
<a name="l00686"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a2331cdb79541487869e7c2445a2eb5f0">00686</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a2331cdb79541487869e7c2445a2eb5f0" title="Желтый цвет.">TX_YELLOW</a>        = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255, 255, 128),   
<a name="l00687"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025">00687</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>         = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255, 255, 255),   
<a name="l00688"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8">00688</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>   = 0xFFFFFFFF,            
<a name="l00689"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a081ac86689e98e0c036e960e9cb159ac">00689</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a081ac86689e98e0c036e960e9cb159ac" title="Прозрачный цвет. Отключает рисование.">TX_NULL</a>          = <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>,        
<a name="l00690"></a>00690 
<a name="l00691"></a>00691 <span class="comment">//  Цветовые каналы (компоненты) - см. txExtractColor(), txRGB2HSL(), txHSL2RGB()</span>
<a name="l00692"></a>00692 
<a name="l00693"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aba144158f057694f9f08189c0b6a7d65">00693</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aba144158f057694f9f08189c0b6a7d65" title="Цветовой тон цвета в модели HSL.">TX_HUE</a>          = 0x04000000,             
<a name="l00694"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a18419bb9192c947fb25d517765dd04cc">00694</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a18419bb9192c947fb25d517765dd04cc" title="Насыщенность цвета в модели HSL.">TX_SATURATION</a>   = 0x05000000,             
<a name="l00695"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5acc91e717a52d475213f0201bfae5341e">00695</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5acc91e717a52d475213f0201bfae5341e" title="Светлота цвета в модели HSL.">TX_LIGHTNESS</a>    = 0x06000000;             
<a name="l00696"></a>00696 
<a name="l00697"></a>00697 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l00698"></a>00698 <span class="preprocessor"></span>    };
<a name="l00699"></a>00699 <span class="preprocessor">#endif</span>
<a name="l00700"></a>00700 <span class="preprocessor"></span>
<a name="l00701"></a>00701 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00721"></a>00721 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00722"></a>00722 
<a name="l00723"></a>00723 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l00724"></a>00724 <span class="preprocessor"></span>COLORREF <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (<span class="keywordtype">int</span> red, <span class="keywordtype">int</span> green, <span class="keywordtype">int</span> blue);
<a name="l00725"></a>00725 <span class="preprocessor">#endif</span>
<a name="l00726"></a>00726 <span class="preprocessor"></span>
<a name="l00727"></a>00727 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00742"></a>00742 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00743"></a>00743 
<a name="l00744"></a>00744 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga4006aaa9b91b25f81bfd88587842531a" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (COLORREF color, <span class="keywordtype">int</span> thickness = 1);
<a name="l00745"></a>00745 
<a name="l00746"></a>00746 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00762"></a>00762 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00763"></a>00763 
<a name="l00764"></a>00764 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga977c584db1ecfba20898615a948ab675" title="Устанавливает текущий цвет линий и текста.">txColor</a> (<span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue);
<a name="l00765"></a>00765 
<a name="l00766"></a>00766 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00777"></a>00777 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00778"></a>00778 
<a name="l00779"></a>00779 COLORREF <a class="code" href="a00029.htm#ga4894075399ec8e8747177f90c15fb35d" title="Возвращает текущий цвет линий и текста.">txGetColor</a>();
<a name="l00780"></a>00780 
<a name="l00781"></a>00781 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00795"></a>00795 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00796"></a>00796 
<a name="l00797"></a>00797 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gafb1459949ebb32b199d07f5464205baf" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (COLORREF color);
<a name="l00798"></a>00798 
<a name="l00799"></a>00799 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00814"></a>00814 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00815"></a>00815 
<a name="l00816"></a>00816 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga385a6f84e8f1447a33047fa0f3be972b" title="Устанавливает текущий цвет заполнения фигур.">txFillColor</a> (<span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue);
<a name="l00817"></a>00817 
<a name="l00818"></a>00818 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00829"></a>00829 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00830"></a>00830 
<a name="l00831"></a>00831 COLORREF <a class="code" href="a00029.htm#ga1a65fa9ddfd07bda8ab3e95873991b76" title="Возвращает текущий цвет заполнения фигур.">txGetFillColor</a>();
<a name="l00832"></a>00832 
<a name="l00833"></a>00833 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00884"></a>00884 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00885"></a>00885 
<a name="l00886"></a>00886 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga3ddd148ec8af2d1f722b398ee7e17a71" title="Устанавливает режим взаимодействия цветов при рисовании.">txSetROP2</a> (<span class="keywordtype">int</span> mode = R2_COPYPEN);
<a name="l00887"></a>00887 
<a name="l00888"></a>00888 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00906"></a>00906 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00907"></a>00907 
<a name="l00908"></a>00908 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (COLORREF color, COLORREF component);
<a name="l00909"></a>00909 
<a name="l00910"></a>00910 <span class="comment">//{---------------------------------------</span>
<a name="l00936"></a>00936 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00937"></a>00937 
<a name="l00938"></a>00938 COLORREF <a class="code" href="a00029.htm#ga0dc8953591b63696392ec581c6b25f7c" title="Преобразует цвет из формата RGB в формат HSL.">txRGB2HSL</a> (COLORREF rgbColor);
<a name="l00939"></a>00939 
<a name="l00940"></a>00940 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00968"></a>00968 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00969"></a>00969 
<a name="l00970"></a>00970 COLORREF <a class="code" href="a00029.htm#ga1a87b7cd3e5a74e4dc6828d42d03fffa" title="Преобразует цвет из формата HSL в формат RGB.">txHSL2RGB</a> (COLORREF hslColor);
<a name="l00971"></a>00971 
<a name="l00973"></a>00973 <span class="comment">//}</span>
<a name="l00974"></a>00974 <span class="comment">//============================================================================================</span>
<a name="l00975"></a>00975 
<a name="l00976"></a>00976 <span class="comment">//============================================================================================</span>
<a name="l00977"></a>00977 <span class="comment">//{          Drawing</span>
<a name="l00979"></a>00979 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l00981"></a>00981 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l00992"></a>00992 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l00993"></a>00993 
<a name="l00994"></a>00994 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga2a3940b99d02c630364d4b74e7d08a23" title="Стирает холст текущим цветом заполнения.">txClear</a>();
<a name="l00995"></a>00995 
<a name="l00996"></a>00996 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01012"></a>01012 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01013"></a>01013 
<a name="l01014"></a>01014 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga8f2821365f3a6addfcd8c19dd8971ce2" title="Рисует пиксель (точку на экране).">txSetPixel</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, COLORREF color);
<a name="l01015"></a>01015 
<a name="l01016"></a>01016 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01033"></a>01033 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01034"></a>01034 
<a name="l01035"></a>01035 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gada8f6502237b02eaf8759df026630c74" title="Рисует пиксель (точку на экране).">txPixel</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue);
<a name="l01036"></a>01036 
<a name="l01037"></a>01037 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01054"></a>01054 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01055"></a>01055 
<a name="l01056"></a>01056 <span class="keyword">inline</span> COLORREF <a class="code" href="a00029.htm#ga8e07f7bdb1c6a3d461960f14813a3425" title="Возвращает текущий цвет точки (пикселя) на экране.">txGetPixel</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y);
<a name="l01057"></a>01057 
<a name="l01058"></a>01058 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01077"></a>01077 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01078"></a>01078 
<a name="l01079"></a>01079 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga21a12a1077b09af8bdc59e147ca15d46" title="Рисует линию.">txLine</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1);
<a name="l01080"></a>01080 
<a name="l01081"></a>01081 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01102"></a>01102 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01103"></a>01103 
<a name="l01104"></a>01104 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga48ebe804bb14c53276f0b334ea7761a2" title="Рисует прямоугольник.">txRectangle</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1);
<a name="l01105"></a>01105 
<a name="l01106"></a>01106 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01124"></a>01124 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01125"></a>01125 
<a name="l01126"></a>01126 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga4e872a3d71ac242bd40d614b9c03f86e" title="Рисует ломаную линию или многоугольник.">txPolygon</a> (<span class="keyword">const</span> POINT points[], <span class="keywordtype">int</span> numPoints);
<a name="l01127"></a>01127 
<a name="l01128"></a>01128 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01147"></a>01147 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01148"></a>01148 
<a name="l01149"></a>01149 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gaf4e90f66d74b812afcd17203cf95b8b5" title="Рисует эллипс.">txEllipse</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1);
<a name="l01150"></a>01150 
<a name="l01151"></a>01151 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01169"></a>01169 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01170"></a>01170 
<a name="l01171"></a>01171 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga6870267a8cb62bddbe80ac2483b120a3" title="Рисует окружность или круг.">txCircle</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> r);
<a name="l01172"></a>01172 
<a name="l01173"></a>01173 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01195"></a>01195 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01196"></a>01196 
<a name="l01197"></a>01197 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gaadb118d9b8ae81cc60d43300326e52a3" title="Рисует дугу эллипса.">txArc</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1, <span class="keywordtype">int</span> startAngle, <span class="keywordtype">int</span> totalAngle);
<a name="l01198"></a>01198 
<a name="l01199"></a>01199 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01221"></a>01221 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01222"></a>01222 
<a name="l01223"></a>01223 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga732885ecfaf47b4051f278473724f44b" title="Рисует сектор эллипса.">txPie</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1, <span class="keywordtype">int</span> startAngle, <span class="keywordtype">int</span> totalAngle);
<a name="l01224"></a>01224 
<a name="l01225"></a>01225 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01247"></a>01247 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01248"></a>01248 
<a name="l01249"></a>01249 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga5ee97b4f6688ff24da8a494dc1c15daa" title="Рисует хорду эллипса.">txChord</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1, <span class="keywordtype">int</span> startAngle, <span class="keywordtype">int</span> totalAngle);
<a name="l01250"></a>01250 
<a name="l01251"></a>01251 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01276"></a>01276 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01277"></a>01277 
<a name="l01278"></a>01278 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga2a51480e07b3e31eb4e74ea29a8a480a" title="Заливает произвольный контур текущим цветом заполнения.">txFloodFill</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, COLORREF color = <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>, DWORD mode = FLOODFILLSURFACE);
<a name="l01279"></a>01279 
<a name="l01281"></a>01281 <span class="comment">//}</span>
<a name="l01282"></a>01282 <span class="comment">//============================================================================================</span>
<a name="l01283"></a>01283 
<a name="l01284"></a>01284 <span class="comment">//============================================================================================</span>
<a name="l01285"></a>01285 <span class="comment">//{          Drawing text</span>
<a name="l01287"></a>01287 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l01289"></a>01289 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01307"></a>01307 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01308"></a>01308 
<a name="l01309"></a>01309 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga3b57379a564dd459d1573a9c8db0c692" title="Рисует текст.">txTextOut</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keyword">const</span> <span class="keywordtype">char</span> text[]);
<a name="l01310"></a>01310 
<a name="l01311"></a>01311 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01340"></a>01340 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01341"></a>01341 
<a name="l01342"></a>01342 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga5b3f03bfb0444ac3b7ec74128d878a3f" title="Рисует текст, размещенный в прямоугольной области.">txDrawText</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1, <span class="keyword">const</span> <span class="keywordtype">char</span> text[],
<a name="l01343"></a>01343                  <span class="keywordtype">unsigned</span> format = DT_CENTER | DT_VCENTER | DT_WORDBREAK | DT_WORD_ELLIPSIS);
<a name="l01344"></a>01344 
<a name="l01345"></a>01345 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01367"></a>01367 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01368"></a>01368 
<a name="l01369"></a>01369 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga7726bc7f942c2540b172f83c3c1d5adf" title="Выбирает текущий шрифт.">txSelectFont</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> name[], <span class="keywordtype">int</span> sizeY,
<a name="l01370"></a>01370                    <span class="keywordtype">int</span>  sizeX     = -1,
<a name="l01371"></a>01371                    <span class="keywordtype">int</span>  bold      = FW_DONTCARE,
<a name="l01372"></a>01372                    <span class="keywordtype">bool</span> italic    = <span class="keyword">false</span>,
<a name="l01373"></a>01373                    <span class="keywordtype">bool</span> underline = <span class="keyword">false</span>,
<a name="l01374"></a>01374                    <span class="keywordtype">bool</span> strikeout = <span class="keyword">false</span>);
<a name="l01375"></a>01375 
<a name="l01376"></a>01376 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01390"></a>01390 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01391"></a>01391 
<a name="l01392"></a>01392 SIZE <a class="code" href="a00029.htm#ga356c475609cf282310fc336821adf71f" title="Вычисляет размеры текстовой надписи.">txGetTextExtent</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> text[]);
<a name="l01393"></a>01393 
<a name="l01394"></a>01394 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01407"></a>01407 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01408"></a>01408 
<a name="l01409"></a>01409 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gaad385937fb3526c8f4054ae288d285c6" title="Вычисляет ширину текстовой надписи.">txGetTextExtentX</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> text[]);
<a name="l01410"></a>01410 
<a name="l01411"></a>01411 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01424"></a>01424 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01425"></a>01425 
<a name="l01426"></a>01426 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#ga3a34e3baf660b310f6ca0d373f36c024" title="Вычисляет высоту текстовой надписи.">txGetTextExtentY</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> text[]);
<a name="l01427"></a>01427 
<a name="l01428"></a>01428 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01457"></a>01457 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01458"></a>01458 
<a name="l01459"></a>01459 <span class="keywordtype">unsigned</span> <a class="code" href="a00029.htm#ga5a3cef04fcf688a051a9eafd6c8338a7" title="Устанавливает текущее выравнивание текста.">txSetTextAlign</a> (<span class="keywordtype">unsigned</span> align = TA_CENTER | TA_BASELINE);
<a name="l01460"></a>01460 
<a name="l01461"></a>01461 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01476"></a>01476 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01477"></a>01477 
<a name="l01478"></a>01478 LOGFONT* <a class="code" href="a00029.htm#gaf147a93f96fadeb7a6a0b6d7f1320bcb" title="Ищет шрифт по его названию.">txFontExist</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> name[]);
<a name="l01479"></a>01479 
<a name="l01481"></a>01481 <span class="comment">//}</span>
<a name="l01482"></a>01482 <span class="comment">//============================================================================================</span>
<a name="l01483"></a>01483 
<a name="l01484"></a>01484 <span class="comment">//============================================================================================</span>
<a name="l01485"></a>01485 <span class="comment">//{          Drawing to memory DC and image loading</span>
<a name="l01487"></a>01487 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l01489"></a>01489 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01516"></a>01516 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01517"></a>01517 
<a name="l01518"></a>01518 HDC <a class="code" href="a00029.htm#gac41928e50c6374843e95c270a8c27119" title="Создает дополнительный холст (контекст рисования, Device Context, DC) в памяти.">txCreateCompatibleDC</a> (<span class="keywordtype">int</span> sizeX, <span class="keywordtype">int</span> sizeY, HBITMAP bitmap = NULL);
<a name="l01519"></a>01519 
<a name="l01520"></a>01520 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01555"></a>01555 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01556"></a>01556 
<a name="l01557"></a>01557 HDC <a class="code" href="a00029.htm#ga2b4df3ccb139bccaf3f7163986cf9b59" title="Загружает из файла изображение в формате BMP. Делает это довольно медленно.">txLoadImage</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> filename[]);
<a name="l01558"></a>01558 
<a name="l01559"></a>01559 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01578"></a>01578 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01579"></a>01579 <span class="comment">//@ {</span>
<a name="l01580"></a>01580 
<a name="l01581"></a>01581 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (HDC  dc);
<a name="l01582"></a>01582 
<a name="l01584"></a>01584 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (HDC* dc);
<a name="l01586"></a>01586 
<a name="l01587"></a>01587 <span class="comment">//@ }</span>
<a name="l01588"></a>01588 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01639"></a>01639 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01640"></a>01640 
<a name="l01641"></a>01641 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gadf16aed8a30951ff3239fffd440a8c76" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (HDC dest, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height,
<a name="l01642"></a>01642                HDC src,  <span class="keywordtype">int</span> xSrc,  <span class="keywordtype">int</span> ySrc,  DWORD rOp = SRCCOPY);
<a name="l01643"></a>01643 
<a name="l01644"></a>01644 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01680"></a>01680 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01681"></a>01681 
<a name="l01682"></a>01682 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga22dc1561bd086c35575bc296d2b379e6" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом прозрачности...">txTransparentBlt</a> (HDC dest, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height,
<a name="l01683"></a>01683                        HDC src,  <span class="keywordtype">int</span> xSrc,  <span class="keywordtype">int</span> ySrc,  COLORREF transColor = <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a9f0adfcb24eeb418fc39fe950db65ec8" title="Черный цвет.">TX_BLACK</a>);
<a name="l01684"></a>01684 
<a name="l01685"></a>01685 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01757"></a>01757 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01758"></a>01758 
<a name="l01759"></a>01759 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gac56527a904e9f996fc388e96dd086f45" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом прозрачности...">txAlphaBlend</a> (HDC dest, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height,
<a name="l01760"></a>01760                    HDC src,  <span class="keywordtype">int</span> xSrc,  <span class="keywordtype">int</span> ySrc,  <span class="keywordtype">double</span> alpha = 1.0);
<a name="l01762"></a>01762 <span class="comment">//}</span>
<a name="l01763"></a>01763 
<a name="l01764"></a>01764 <span class="comment">//============================================================================================</span>
<a name="l01765"></a>01765 <span class="comment">//{          Utility functions</span>
<a name="l01767"></a>01767 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l01769"></a>01769 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01792"></a>01792 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01793"></a>01793 
<a name="l01794"></a>01794 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gae92e621aaed81f90e4d142356e38762a" title="Блокирует обновление изображения окна, во избежание мигания.">txBegin</a>();
<a name="l01795"></a>01795 
<a name="l01796"></a>01796 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01815"></a>01815 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01816"></a>01816 
<a name="l01817"></a>01817 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00029.htm#ga809dc04afd5348247846ee01ce9a06e6" title="Разблокирует обновление окна, заблокированное функцией txBegin().">txEnd</a>();
<a name="l01818"></a>01818 
<a name="l01819"></a>01819 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01834"></a>01834 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01835"></a>01835 
<a name="l01836"></a>01836 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga483686b1ddea3a3de72ff5117f17ea30" title="Задерживает выполнение программы на определенное время.">txSleep</a> (<span class="keywordtype">int</span> time);
<a name="l01837"></a>01837 
<a name="l01838"></a>01838 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01860"></a>01860 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01861"></a>01861 
<a name="l01862"></a>01862 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a> (<span class="keywordtype">int</span> update = <span class="keyword">true</span>);
<a name="l01863"></a>01863 
<a name="l01864"></a>01864 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01879"></a>01879 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01880"></a>01880 
<a name="l01881"></a>01881 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gad4ee4d2a16f8f38412e0e7b1c380bf4d" title="Устанавливает текущий объект GDI.">txSelectObject</a> (HGDIOBJ obj);
<a name="l01882"></a>01882 
<a name="l01883"></a>01883 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01898"></a>01898 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01899"></a>01899 
<a name="l01900"></a>01900 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gac9d8435ced05ddc5c29a1a5c9f58f752" title="Уничтожает окно TXlib.">txDestroyWindow</a>();
<a name="l01901"></a>01901 
<a name="l01902"></a>01902 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01926"></a>01926 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01927"></a>01927 
<a name="l01928"></a>01928 <span class="comment">// See definition of this function below in this file.</span>
<a name="l01929"></a>01929 
<a name="l01930"></a>01930 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga478e37d200950e3e5ad78779e803387e" title="Делает нечто иногда удобное. См. название функции.">txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillCloseAndIWillNotBeAskingWhereIsMyPicture</a>();
<a name="l01931"></a>01931 
<a name="l01933"></a>01933 <span class="comment">//}</span>
<a name="l01934"></a>01934 
<a name="l01935"></a>01935 <span class="comment">//============================================================================================</span>
<a name="l01936"></a>01936 <span class="comment">//{          Mouse</span>
<a name="l01938"></a>01938 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l01940"></a>01940 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01957"></a>01957 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01958"></a>01958 
<a name="l01959"></a>01959 <span class="keyword">inline</span> POINT <a class="code" href="a00030.htm#ga452a1a7dc5d3f467c8b79b9db3ea053e" title="Возвращает позицию Мыши!">txMousePos</a>();
<a name="l01960"></a>01960 
<a name="l01961"></a>01961 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01976"></a>01976 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01977"></a>01977 
<a name="l01978"></a>01978 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00030.htm#ga6adbdb491a8eec2a4209c54874ae7b7d" title="Возвращает Х-Координату Мыши!">txMouseX</a>();
<a name="l01979"></a>01979 
<a name="l01980"></a>01980 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l01995"></a>01995 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l01996"></a>01996 
<a name="l01997"></a>01997 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00030.htm#ga572acf2310d35defaa9a37a2ec260576" title="Возвращает Y-Координату Мыши!">txMouseY</a>();
<a name="l01998"></a>01998 
<a name="l01999"></a>01999 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02020"></a>02020 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02021"></a>02021 
<a name="l02022"></a>02022 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00030.htm#gab814b21d8f52c3efd0d7175d30a4fa73" title="Возвращает состояние Кнопок Мыши!">txMouseButtons</a>();
<a name="l02023"></a>02023 
<a name="l02025"></a>02025 <span class="comment">//}</span>
<a name="l02026"></a>02026 <span class="comment">//============================================================================================</span>
<a name="l02027"></a>02027 
<a name="l02028"></a>02028 <span class="comment">//============================================================================================</span>
<a name="l02029"></a>02029 <span class="comment">//{          Console functions</span>
<a name="l02031"></a>02031 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l02033"></a>02033 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02074"></a>02074 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02075"></a>02075 
<a name="l02076"></a>02076 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gad993cf2d466cf203a1365e117b937d7f" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (WORD colors = 0x07);
<a name="l02077"></a>02077 
<a name="l02078"></a>02078 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02090"></a>02090 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02091"></a>02091 
<a name="l02092"></a>02092 WORD <a class="code" href="a00029.htm#ga09e52cdcd5a3fc97015a4ddbd3a0a0c2" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a>();
<a name="l02093"></a>02093 
<a name="l02094"></a>02094 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02108"></a>02108 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02109"></a>02109 
<a name="l02110"></a>02110 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga2cb63c12d9206e9ed2b2c83c9a08f68e" title="Стирает текст консоли.">txClearConsole</a>();
<a name="l02111"></a>02111 
<a name="l02112"></a>02112 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02131"></a>02131 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02132"></a>02132 
<a name="l02133"></a>02133 POINT <a class="code" href="a00029.htm#ga01d08fd56e2e727a76c8ed724a735326" title="Устанавливает позицию мигающего курсора консоли.">txSetConsoleCursorPos</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y);
<a name="l02134"></a>02134 
<a name="l02135"></a>02135 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02147"></a>02147 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02148"></a>02148 
<a name="l02149"></a>02149 POINT <a class="code" href="a00029.htm#ga3227242c57eef33049cdaee655f4faee" title="Возвращает позицию мигающего курсора консоли.">txGetConsoleCursorPos</a>();
<a name="l02150"></a>02150 
<a name="l02151"></a>02151 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02164"></a>02164 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02165"></a>02165 
<a name="l02166"></a>02166 POINT <a class="code" href="a00029.htm#ga56faf7c36cf0112165fb705fedf6ec8e" title="Возвращает размеры шрифта консоли.">txGetConsoleFontSize</a>();
<a name="l02167"></a>02167 
<a name="l02168"></a>02168 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02184"></a>02184 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02185"></a>02185 
<a name="l02186"></a>02186 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gaa148d2040d20ed74cf46ab186c35f9ed" title="Запрещает или разрешает рисование мигающего курсора в окне.">txTextCursor</a> (<span class="keywordtype">bool</span> blink = <span class="keyword">true</span>);
<a name="l02187"></a>02187 
<a name="l02189"></a>02189 <span class="comment">//}</span>
<a name="l02190"></a>02190 <span class="comment">//============================================================================================</span>
<a name="l02191"></a>02191 
<a name="l02192"></a>02192 <span class="comment">//============================================================================================</span>
<a name="l02193"></a>02193 <span class="comment">//{          Other staff not related to drawing</span>
<a name="l02195"></a>02195 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l02197"></a>02197 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02229"></a>02229 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02230"></a>02230 
<a name="l02231"></a>02231 <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#ga177f8bcb7544821ea4b5bd0571fe7196" title="Воспроизводит звуковой файл.">txPlaySound</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> filename[] = NULL, DWORD mode = SND_ASYNC);
<a name="l02232"></a>02232 
<a name="l02233"></a>02233 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02244"></a>02244 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02245"></a>02245 
<a name="l02246"></a>02246 <span class="keywordtype">double</span> <a class="code" href="a00032.htm#gaebe0b0f6b1324031ee6b9461ba5b0ab3" title="Оценивает скорость работы компьютера.">txQueryPerformance</a>();
<a name="l02247"></a>02247 
<a name="l02248"></a>02248 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02319"></a>02319 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02321"></a>02321 <span class="comment"></span>
<a name="l02322"></a>02322 <span class="preprocessor">#ifndef _MSC_VER_6</span>
<a name="l02323"></a>02323 <span class="preprocessor"></span>
<a name="l02324"></a><a class="code" href="a00032.htm#ga3379d227f91f891ac97d068ab90ee871">02324</a> <span class="preprocessor">    #define SIZEARR( arr )    ( sizeof (get_size_of_an_array_with_unknown_or_nonconst_size_ (arr)) )</span>
<a name="l02325"></a>02325 <span class="preprocessor"></span>
<a name="l02327"></a>02327     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">int</span> N&gt; char (&amp;get_size_of_an_array_with_unknown_or_nonconst_size_ (T (&amp;) [N])) [N]; <span class="comment">// ;)</span>
<a name="l02329"></a>02329 <span class="comment"></span>
<a name="l02330"></a>02330 <span class="preprocessor">#endif</span>
<a name="l02331"></a>02331 <span class="preprocessor"></span>
<a name="l02333"></a>02333 
<a name="l02334"></a><a class="code" href="a00032.htm#ga799c47c1a2a151647cd765e1fa4b27b5">02334</a> <span class="preprocessor">#define sizearr( arr )        ( sizeof (arr) / sizeof (arr)[0] )</span>
<a name="l02335"></a>02335 <span class="preprocessor"></span>
<a name="l02337"></a>02337 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02355"></a>02355 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02356"></a>02356 
<a name="l02357"></a>02357 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l02358"></a>02358 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (T x, T a, T b);
<a name="l02359"></a>02359 
<a name="l02360"></a>02360 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02404"></a>02404 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02406"></a>02406 <span class="comment"></span>
<a name="l02407"></a>02407 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (<span class="keyword">const</span> POINT&amp; pt, <span class="keyword">const</span> RECT&amp; rect);
<a name="l02408"></a>02408 
<a name="l02409"></a>02409 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (<span class="keyword">const</span> COORD&amp; pt, <span class="keyword">const</span> SMALL_RECT&amp; rect);
<a name="l02410"></a>02410 
<a name="l02412"></a>02412 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02427"></a>02427 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02428"></a>02428 
<a name="l02429"></a>02429 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00032.htm#gaa4558a3bf2a126a9e19c5a3655520787" title="Генератор случайных чисел">random</a> (<span class="keywordtype">int</span> range);
<a name="l02430"></a>02430 
<a name="l02431"></a>02431 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02451"></a>02451 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02452"></a>02452 
<a name="l02453"></a>02453 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="a00032.htm#gaa4558a3bf2a126a9e19c5a3655520787" title="Генератор случайных чисел">random</a> (<span class="keywordtype">double</span> left, <span class="keywordtype">double</span> right);
<a name="l02454"></a>02454 
<a name="l02455"></a>02455 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02470"></a>02470 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02471"></a>02471 
<a name="l02472"></a><a class="code" href="a00032.htm#gafa99ec4acc4ecb2dc3c2d05da15d0e3f">02472</a> <span class="preprocessor">#define MAX( a, b )    ( (a) &gt; (b) ? (a) : (b) )</span>
<a name="l02473"></a>02473 <span class="preprocessor"></span>
<a name="l02474"></a>02474 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02489"></a>02489 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02490"></a>02490 
<a name="l02491"></a><a class="code" href="a00032.htm#ga3acffbd305ee72dcd4593c0d8af64a4f">02491</a> <span class="preprocessor">#define MIN( a, b )    ( (a) &lt; (b) ? (a) : (b) )</span>
<a name="l02492"></a>02492 <span class="preprocessor"></span>
<a name="l02493"></a>02493 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02504"></a>02504 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02505"></a>02505 
<a name="l02506"></a><a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7">02506</a> <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a> = asin (1.0) * 2;
<a name="l02507"></a>02507 
<a name="l02508"></a>02508 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02527"></a>02527 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02528"></a>02528 
<a name="l02529"></a><a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6">02529</a> <span class="preprocessor">#define ZERO( type )    zero &lt;type&gt; ()</span>
<a name="l02530"></a>02530 <span class="preprocessor"></span>
<a name="l02532"></a>02532 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T zero();
<a name="l02534"></a>02534 
<a name="l02536"></a>02536 <span class="comment">//}</span>
<a name="l02537"></a>02537 <span class="comment">//============================================================================================</span>
<a name="l02538"></a>02538 
<a name="l02539"></a>02539 <span class="comment">//============================================================================================</span>
<a name="l02540"></a>02540 <span class="comment">//{          Back-hole (I hope, not an ass-hole:) of the library)</span>
<a name="l02542"></a>02542 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l02544"></a>02544 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02602"></a>02602 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02603"></a>02603 
<a name="l02604"></a>02604 WNDPROC <a class="code" href="a00033.htm#ga5a127fc3e1eeb4ab9241ee61a0ff2938" title="Устанавливает дополнительный обработчик оконных сообщений Windows.">txSetWindowHandler</a> (WNDPROC handler = NULL);
<a name="l02605"></a>02605 
<a name="l02606"></a>02606 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02634"></a>02634 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02635"></a>02635 
<a name="l02636"></a>02636 <span class="keywordtype">bool</span> <a class="code" href="a00033.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock</a> (<span class="keywordtype">bool</span> wait = <span class="keyword">true</span>);
<a name="l02637"></a>02637 
<a name="l02638"></a>02638 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02649"></a>02649 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02651"></a>02651 <span class="comment"></span>
<a name="l02652"></a>02652 <span class="keywordtype">bool</span> <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>();
<a name="l02653"></a>02653 
<a name="l02655"></a>02655 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a> (T value);
<a name="l02657"></a>02657 
<a name="l02659"></a>02659 
<a name="l02660"></a>02660 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02681"></a>02681 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02682"></a>02682 
<a name="l02683"></a><a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400">02683</a> <span class="preprocessor">#define txGDI( command )  txUnlock ( (txLock(), (command)) )</span>
<a name="l02684"></a>02684 <span class="preprocessor"></span>
<a name="l02686"></a>02686 <span class="comment">//}</span>
<a name="l02687"></a>02687 <span class="comment">//============================================================================================</span>
<a name="l02688"></a>02688 
<a name="l02689"></a>02689 <span class="comment">//============================================================================================</span>
<a name="l02690"></a>02690 <span class="comment">//{          Tune-up constants</span>
<a name="l02692"></a>02692 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l02694"></a>02694 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02725"></a>02725 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02726"></a>02726 
<a name="l02727"></a>02727 <span class="preprocessor">#if  defined  (_TX_NOINIT)</span>
<a name="l02728"></a>02728 <span class="preprocessor"></span>
<a name="l02729"></a>02729 <span class="preprocessor">    #undef     _TX_NOINIT</span>
<a name="l02730"></a>02730 <span class="preprocessor"></span><span class="preprocessor">    #define    _TX_NOINIT                 1</span>
<a name="l02731"></a>02731 <span class="preprocessor"></span>
<a name="l02732"></a>02732 <span class="preprocessor">#else</span>
<a name="l02733"></a>02733 <span class="preprocessor"></span>
<a name="l02734"></a><a class="code" href="a00034.htm#gaab281ee20ea6be5eae34d0e15bf03dcf">02734</a> <span class="preprocessor">    #define    _TX_NOINIT                 0</span>
<a name="l02735"></a>02735 <span class="preprocessor"></span>
<a name="l02736"></a>02736 <span class="preprocessor">#endif</span>
<a name="l02737"></a>02737 <span class="preprocessor"></span>
<a name="l02738"></a>02738 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02753"></a>02753 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02754"></a>02754 
<a name="l02755"></a>02755             <span class="comment">// TX_VEGETABLE_PRINTERS</span>
<a name="l02756"></a>02756 <span class="preprocessor">#if !defined  (_TX_WAITABLE_PARENTS)</span>
<a name="l02757"></a><a class="code" href="a00034.htm#ga2c0a4fe0612f109c5c88d6d55a061db5">02757</a> <span class="preprocessor"></span><span class="preprocessor">    #define    _TX_WAITABLE_PARENTS       &quot;cmd.exe:devenv.exe, &quot;                    </span><span class="comment">/* MSVS 2003-2010  */</span> \
<a name="l02758"></a>02758                                           &quot;vcspawn.exe:msdev.exe, &quot;                 <span class="comment">/* MSVS 6          */</span> \
<a name="l02759"></a>02759                                           &quot;cb_console_runner.exe:codeblocks.exe, &quot;  <span class="comment">/* CodeBlocks 8-10 */</span> \
<a name="l02760"></a>02760                                           &quot;cmd.exe:console_runner.exe, &quot;            <span class="comment">/* CodeBlocks 1    */</span> \
<a name="l02761"></a>02761                                           &quot;starter.exe:eclipse.exe, &quot;               <span class="comment">/* Eclipse 4       */</span> \
<a name="l02762"></a>02762                                           &quot;starter.exe:javaw.exe&quot;                   <span class="comment">/* Eclipse 3       */</span>
<a name="l02763"></a>02763 <span class="preprocessor">#endif</span>
<a name="l02764"></a>02764 <span class="preprocessor"></span>
<a name="l02765"></a>02765 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02783"></a>02783 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02784"></a>02784 
<a name="l02785"></a>02785 <span class="preprocessor">#if !defined (_TX_ALLOW_KILL_PARENT)</span>
<a name="l02786"></a><a class="code" href="a00034.htm#ga9a495d013c6f08cd50220aca99ca56c2">02786</a> <span class="preprocessor"></span><span class="preprocessor">#define       _TX_ALLOW_KILL_PARENT       true  // Все, это последняя настроечная константа! Хватит уже.</span>
<a name="l02787"></a>02787 <span class="preprocessor"></span><span class="preprocessor">#endif                                          // И да, я не призываю к убийству родителей. Это технический термин.</span>
<a name="l02788"></a>02788 <span class="preprocessor"></span>
<a name="l02789"></a>02789 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02803"></a>02803 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02804"></a>02804 
<a name="l02805"></a>02805 <span class="preprocessor">#if !defined  (_TX_CONSOLE_MODE)</span>
<a name="l02806"></a><a class="code" href="a00034.htm#gab4c131ad86b5b53baf2e8b271876c814">02806</a> <span class="preprocessor"></span><span class="preprocessor">    #define    _TX_CONSOLE_MODE           SWP_HIDEWINDOW</span>
<a name="l02807"></a>02807 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l02808"></a>02808 <span class="preprocessor"></span>
<a name="l02809"></a>02809 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02812"></a>02812 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02813"></a>02813 
<a name="l02814"></a><a class="code" href="a00034.htm#gab2cb9c8f646335d3491bc7dc4fb93d3f">02814</a> <span class="keyword">const</span> <span class="keywordtype">char</span>     <a class="code" href="a00034.htm#gab2cb9c8f646335d3491bc7dc4fb93d3f" title="Шрифт консоли">_TX_CONSOLE_FONT</a>[]         = <span class="stringliteral">&quot;Lucida Console&quot;</span>;
<a name="l02815"></a>02815 
<a name="l02816"></a>02816 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02819"></a>02819 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02820"></a>02820 
<a name="l02821"></a><a class="code" href="a00034.htm#ga805670088fa80b6c26f719da11621c7f">02821</a> <span class="keyword">const</span> COLORREF <a class="code" href="a00034.htm#ga805670088fa80b6c26f719da11621c7f" title="Цвет шрифта консоли">_TX_CONSOLE_COLOR</a>          = <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5abec0ab16c8a1ed55e137c20f80cdd25e" title="Светло-серый цвет.">TX_LIGHTGRAY</a>;
<a name="l02822"></a>02822 
<a name="l02823"></a>02823 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02826"></a>02826 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02827"></a>02827 
<a name="l02828"></a><a class="code" href="a00034.htm#ga2e46adf7525fa0625c9aae3609b3a629">02828</a> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <a class="code" href="a00034.htm#ga2e46adf7525fa0625c9aae3609b3a629" title="Интервал мигания курсора консоли (мс)">_TX_CURSOR_BLINK_INTERVAL</a>  = 250;
<a name="l02829"></a>02829 
<a name="l02830"></a>02830 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02833"></a>02833 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02834"></a>02834 
<a name="l02835"></a><a class="code" href="a00034.htm#gafcc9bd44fad6700bbbf2ee1646d2482d">02835</a> <span class="keyword">const</span> <span class="keywordtype">int</span>      <a class="code" href="a00034.htm#gafcc9bd44fad6700bbbf2ee1646d2482d" title="Интервал обновления холста (мс)">_TX_WINDOW_UPDATE_INTERVAL</a> = 10;
<a name="l02836"></a>02836 
<a name="l02837"></a>02837 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02840"></a>02840 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02841"></a>02841 
<a name="l02842"></a>02842 <span class="preprocessor">#if !defined (TX_TRACE)</span>
<a name="l02843"></a><a class="code" href="a00034.htm#ga7859e95fc4faec435abe372989f4f8ac">02843</a> <span class="preprocessor"></span>    <span class="keyword">const</span> <span class="keywordtype">int</span>  <a class="code" href="a00034.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания (мс)">_TX_TIMEOUT</a>                = 1000;
<a name="l02844"></a>02844 
<a name="l02845"></a>02845 <span class="preprocessor">#else</span>
<a name="l02846"></a>02846 <span class="preprocessor"></span>    <span class="keyword">const</span> <span class="keywordtype">int</span>  <a class="code" href="a00034.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания (мс)">_TX_TIMEOUT</a>                = 5000;
<a name="l02847"></a>02847 
<a name="l02848"></a>02848 <span class="preprocessor">#endif</span>
<a name="l02849"></a>02849 <span class="preprocessor"></span>
<a name="l02850"></a>02850 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02853"></a>02853 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02854"></a>02854 
<a name="l02855"></a><a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25">02855</a> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>                = 1024;
<a name="l02856"></a>02856 
<a name="l02857"></a>02857 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02860"></a>02860 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02861"></a>02861 
<a name="l02862"></a><a class="code" href="a00034.htm#gaa7273b2f613970c283053c5d9136addd">02862</a> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <a class="code" href="a00034.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BIGBUFSIZE</a>             = 2048;
<a name="l02863"></a>02863 
<a name="l02865"></a>02865 <span class="comment">//}</span>
<a name="l02866"></a>02866 <span class="comment">//============================================================================================</span>
<a name="l02867"></a>02867 
<a name="l02868"></a>02868 <span class="comment">//============================================================================================</span>
<a name="l02869"></a>02869 <span class="comment">//{          Diagnostics and Tools</span>
<a name="l02871"></a>02871 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l02873"></a>02873 <span class="comment"></span>
<a name="l02874"></a>02874 <span class="preprocessor">#define  TX_QUOTE( symbol )   _TX_QUOT2 (symbol)</span>
<a name="l02875"></a>02875 <span class="preprocessor"></span><span class="preprocessor">#define _TX_QUOT2( symbol )   #symbol</span>
<a name="l02876"></a>02876 <span class="preprocessor"></span>
<a name="l02878"></a>02878 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02882"></a>02882 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02883"></a>02883 
<a name="l02884"></a>02884 <span class="preprocessor">#if   defined (__GNUC__)</span>
<a name="l02885"></a>02885 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_COMPILER__   &quot;GNU C++ &quot;            TX_QUOTE (__GNUC__)       &quot;.&quot;  \</span>
<a name="l02886"></a>02886 <span class="preprocessor">                                                    TX_QUOTE (__GNUC_MINOR__) &quot;.&quot;  \</span>
<a name="l02887"></a>02887 <span class="preprocessor">                                                    TX_QUOTE (__GNUC_PATCHLEVEL__) \</span>
<a name="l02888"></a>02888 <span class="preprocessor">                                         &quot;, C++ = &quot; TX_QUOTE (__cplusplus)</span>
<a name="l02889"></a>02889 <span class="preprocessor"></span><span class="preprocessor">#elif defined (_MSC_VER)</span>
<a name="l02890"></a>02890 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_COMPILER__   &quot;Microsoft C++ &quot;      TX_QUOTE (_MSC_VER) \</span>
<a name="l02891"></a>02891 <span class="preprocessor">                                         &quot;, C++ = &quot; TX_QUOTE (__cplusplus)</span>
<a name="l02892"></a>02892 <span class="preprocessor"></span>
<a name="l02893"></a>02893 <span class="preprocessor">#elif defined (__INTEL_COMPILER)</span>
<a name="l02894"></a>02894 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_COMPILER__   &quot;Intel C++ Compiler &quot; TX_QUOTE (__INTEL_COMPILER) \</span>
<a name="l02895"></a>02895 <span class="preprocessor">                                         &quot;, C++ = &quot; TX_QUOTE (__cplusplus)</span>
<a name="l02896"></a>02896 <span class="preprocessor"></span>
<a name="l02897"></a>02897 <span class="preprocessor">#else</span>
<a name="l02898"></a><a class="code" href="a00032.htm#gadd1c9ccd036228402b807abaea14f7ee">02898</a> <span class="preprocessor"></span><span class="preprocessor">    #define __TX_COMPILER__   &quot;Unknown compiler&quot; \</span>
<a name="l02899"></a>02899 <span class="preprocessor">                                         &quot;, C++ = &quot; TX_QUOTE (__cplusplus)</span>
<a name="l02900"></a>02900 <span class="preprocessor"></span>
<a name="l02901"></a>02901 <span class="preprocessor">#endif</span>
<a name="l02902"></a>02902 <span class="preprocessor"></span>
<a name="l02903"></a>02903 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02907"></a>02907 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02908"></a>02908 
<a name="l02909"></a><a class="code" href="a00032.htm#ga973d717438fe468dd5a5d8d45ede5312">02909</a> <span class="preprocessor">#define __TX_FILELINE__       __FILE__ &quot; (&quot; TX_QUOTE (__LINE__) &quot;)&quot;</span>
<a name="l02910"></a>02910 <span class="preprocessor"></span>
<a name="l02911"></a>02911 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02919"></a>02919 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02920"></a>02920 
<a name="l02921"></a>02921 <span class="preprocessor">#if defined (__GNUC__)</span>
<a name="l02922"></a>02922 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __PRETTY_FUNCTION__</span>
<a name="l02923"></a>02923 <span class="preprocessor"></span>
<a name="l02924"></a>02924 <span class="preprocessor">#elif defined (__FUNCSIG__)</span>
<a name="l02925"></a>02925 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __FUNCSIG__</span>
<a name="l02926"></a>02926 <span class="preprocessor"></span>
<a name="l02927"></a>02927 <span class="preprocessor">#elif defined (__TX_FUNCTION__)</span>
<a name="l02928"></a>02928 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __FUNCTION__</span>
<a name="l02929"></a>02929 <span class="preprocessor"></span>
<a name="l02930"></a>02930 <span class="preprocessor">#elif defined (__INTEL_COMPILER) &amp;&amp; (__INTEL_COMPILER &gt;= 600)</span>
<a name="l02931"></a>02931 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __FUNCTION__</span>
<a name="l02932"></a>02932 <span class="preprocessor"></span>
<a name="l02933"></a>02933 <span class="preprocessor">#elif defined (__BORLANDC__) &amp;&amp; (__BORLANDC__ &gt;= 0x550)</span>
<a name="l02934"></a>02934 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __FUNC__</span>
<a name="l02935"></a>02935 <span class="preprocessor"></span>
<a name="l02936"></a>02936 <span class="preprocessor">#elif defined (__STDC_VERSION__) &amp;&amp; (__STDC_VERSION__ &gt;= 199901)</span>
<a name="l02937"></a>02937 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __func__</span>
<a name="l02938"></a>02938 <span class="preprocessor"></span>
<a name="l02939"></a>02939 <span class="preprocessor">#else</span>
<a name="l02940"></a><a class="code" href="a00032.htm#gab170f39ac0e379c324c73495f14a1309">02940</a> <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   &quot;(&quot; __TX_FILELINE__ &quot;)&quot;</span>
<a name="l02941"></a>02941 <span class="preprocessor"></span>
<a name="l02942"></a>02942 <span class="preprocessor">#endif</span>
<a name="l02943"></a>02943 <span class="preprocessor"></span>
<a name="l02944"></a>02944 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02948"></a>02948 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02949"></a>02949 
<a name="l02950"></a>02950 <span class="preprocessor">#if   !defined (NDEBUG) &amp;&amp;  defined (_DEBUG)</span>
<a name="l02951"></a>02951 <span class="preprocessor"></span><span class="preprocessor">    #define _TX_BUILDMODE     &quot;DEBUG&quot;</span>
<a name="l02952"></a>02952 <span class="preprocessor"></span>
<a name="l02953"></a>02953 <span class="preprocessor">#elif !defined (NDEBUG) &amp;&amp; !defined (_DEBUG)</span>
<a name="l02954"></a><a class="code" href="a00032.htm#ga3e287c38947fea870d01588fbd2a5fc9">02954</a> <span class="preprocessor"></span><span class="preprocessor">    #define _TX_BUILDMODE     &quot;Debug&quot;</span>
<a name="l02955"></a>02955 <span class="preprocessor"></span>
<a name="l02956"></a>02956 <span class="preprocessor">#elif  defined (NDEBUG)</span>
<a name="l02957"></a>02957 <span class="preprocessor"></span><span class="preprocessor">    #define _TX_BUILDMODE     &quot;Release&quot;</span>
<a name="l02958"></a>02958 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l02959"></a>02959 <span class="preprocessor"></span>
<a name="l02960"></a>02960 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l02994"></a>02994 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l02995"></a>02995 
<a name="l02996"></a>02996 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l02997"></a>02997 <span class="preprocessor"></span><span class="preprocessor">    #undef  assert</span>
<a name="l02998"></a><a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53">02998</a> <span class="preprocessor"></span><span class="preprocessor">    #define assert( cond )    _txNOP ( !(cond)? (TX_ERROR (&quot;\a&quot; &quot;ВНЕЗАПНО: Логическая ошибка: &quot; \</span>
<a name="l02999"></a>02999 <span class="preprocessor">                                                           &quot;Неверно, что \&quot;%s\&quot;&quot; TX_COMMA #cond), 0) : 1 )</span>
<a name="l03000"></a>03000 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l03001"></a>03001 <span class="preprocessor"></span><span class="preprocessor">    #undef  assert</span>
<a name="l03002"></a>03002 <span class="preprocessor"></span><span class="preprocessor">    #define assert( cond )    ((void) 1)</span>
<a name="l03003"></a>03003 <span class="preprocessor"></span>
<a name="l03004"></a>03004 <span class="preprocessor">#endif</span>
<a name="l03005"></a>03005 <span class="preprocessor"></span>
<a name="l03006"></a>03006 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03034"></a>03034 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03035"></a>03035 
<a name="l03036"></a>03036 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l03037"></a>03037 <span class="preprocessor"></span><span class="preprocessor">    #undef  verify</span>
<a name="l03038"></a><a class="code" href="a00032.htm#ga14fecb1c008314444a74c1fe7d9a113b">03038</a> <span class="preprocessor"></span><span class="preprocessor">    #define verify            assert</span>
<a name="l03039"></a>03039 <span class="preprocessor"></span>
<a name="l03040"></a>03040 <span class="preprocessor">#else</span>
<a name="l03041"></a>03041 <span class="preprocessor"></span><span class="preprocessor">    #undef  verify</span>
<a name="l03042"></a>03042 <span class="preprocessor"></span><span class="preprocessor">    #define verify( expr )    ( expr )</span>
<a name="l03043"></a>03043 <span class="preprocessor"></span>
<a name="l03044"></a>03044 <span class="preprocessor">#endif</span>
<a name="l03045"></a>03045 <span class="preprocessor"></span>
<a name="l03046"></a>03046 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03074"></a>03074 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03075"></a>03075 
<a name="l03076"></a>03076 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l03077"></a><a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7">03077</a> <span class="preprocessor"></span><span class="preprocessor">    #define asserted          || TX_ERROR (&quot;\a&quot; &quot;Обнаружен нулевой или ложный результат.&quot;)</span>
<a name="l03078"></a>03078 <span class="preprocessor"></span>
<a name="l03079"></a>03079 <span class="preprocessor">#else</span>
<a name="l03080"></a>03080 <span class="preprocessor"></span><span class="preprocessor">    #define asserted          || _txNOP (0)</span>
<a name="l03081"></a>03081 <span class="preprocessor"></span>
<a name="l03082"></a>03082 <span class="preprocessor">#endif</span>
<a name="l03083"></a>03083 <span class="preprocessor"></span>
<a name="l03084"></a><a class="code" href="a00032.htm#ga66cb8e8fe20d9d05d02e73373bda7f8a">03084</a> <span class="preprocessor">#define verified              asserted  //!&lt; For compatibility with assert macro</span>
<a name="l03085"></a>03085 <span class="preprocessor"></span>
<a name="l03087"></a>03087 <span class="preprocessor">#define TX_NEEDED             asserted  //!&lt; For compatibility with earlier releases</span>
<a name="l03088"></a>03088 <span class="preprocessor"></span>
<a name="l03089"></a>03089 
<a name="l03090"></a>03090 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03115"></a>03115 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03116"></a>03116 
<a name="l03117"></a>03117 <span class="preprocessor">#if defined (__STRICT_ANSI__) || defined (_MSC_VER) &amp;&amp; (_MSC_VER &lt; 1400)</span>
<a name="l03118"></a>03118 <span class="preprocessor"></span><span class="preprocessor">    #define TX_ERROR( msg )   _txError (__FILE__, __LINE__, __TX_FUNCTION__, msg)</span>
<a name="l03119"></a>03119 <span class="preprocessor"></span>
<a name="l03120"></a>03120 <span class="preprocessor">#else</span>
<a name="l03121"></a><a class="code" href="a00032.htm#ga3e4a82a10130528f63b6f19476a0943a">03121</a> <span class="preprocessor"></span><span class="preprocessor">    #define TX_ERROR( ... )   _txError (__FILE__, __LINE__, __TX_FUNCTION__, __VA_ARGS__)</span>
<a name="l03122"></a>03122 <span class="preprocessor"></span>
<a name="l03123"></a>03123 <span class="preprocessor">#endif</span>
<a name="l03124"></a>03124 <span class="preprocessor"></span>
<a name="l03125"></a>03125 <span class="comment">// ...because variadic macros not supported in Strict ANSI mode and in MSVC prior to MSVC 8 (2005)</span>
<a name="l03126"></a>03126 
<a name="l03128"></a>03128 <span class="preprocessor">#define TX_THROW              TX_ERROR  //!&lt; For compatibility with earlier releases</span>
<a name="l03129"></a>03129 <span class="preprocessor"></span>
<a name="l03130"></a>03130 
<a name="l03131"></a>03131 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03146"></a>03146 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03147"></a>03147 
<a name="l03148"></a>03148 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l03149"></a><a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220">03149</a> <span class="preprocessor"></span><span class="preprocessor">    #define TX_DEBUG_ERROR    TX_ERROR</span>
<a name="l03150"></a>03150 <span class="preprocessor"></span>
<a name="l03151"></a>03151 <span class="preprocessor">#else</span>
<a name="l03152"></a>03152 <span class="preprocessor"></span><span class="preprocessor">    #define TX_DEBUG_ERROR(m) ((void) 0)</span>
<a name="l03153"></a>03153 <span class="preprocessor"></span>
<a name="l03154"></a>03154 <span class="preprocessor">#endif</span>
<a name="l03155"></a>03155 <span class="preprocessor"></span>
<a name="l03156"></a>03156 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03168"></a>03168 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03170"></a>03170 <span class="comment"></span>
<a name="l03171"></a><a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba">03171</a> <span class="preprocessor">#define _                     ,</span>
<a name="l03172"></a><a class="code" href="a00032.htm#gaaff3c8e496327bec13a821061787878f">03172</a> <span class="preprocessor"></span><span class="preprocessor">#define TX_COMMA              ,  //!&lt; Синоним макроса _ (@ref _ &quot;символ подчеркивания&quot;)</span>
<a name="l03173"></a>03173 <span class="preprocessor"></span>
<a name="l03175"></a>03175 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03201"></a>03201 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03202"></a>03202 
<a name="l03203"></a>03203 <span class="keywordtype">int</span> <a class="code" href="a00032.htm#ga4cfbb1150d579322cb533a235050dece" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> format[], ...) _TX_CHECK_FORMAT (1);
<a name="l03204"></a>03204 
<a name="l03205"></a>03205 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03228"></a>03228 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03230"></a>03230 <span class="comment"></span>
<a name="l03231"></a>03231 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l03232"></a><a class="code" href="a00034.htm#ga1c7c387b21adad57d0dda2f8bd84ad1c">03232</a> <span class="preprocessor"></span><span class="preprocessor">#define      _TX_ALLOW_TRACE</span>
<a name="l03233"></a>03233 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l03234"></a>03234 <span class="preprocessor"></span>
<a name="l03235"></a>03235 <span class="preprocessor">#if defined (_TX_ALLOW_TRACE)</span>
<a name="l03236"></a>03236 <span class="preprocessor"></span><span class="preprocessor">    #undef  $</span>
<a name="l03237"></a>03237 <span class="preprocessor"></span><span class="preprocessor">    #define $                 { _txFile = __FILE__; _txLine = __LINE__; _txFunc = __TX_FUNCTION__; TX_TRACE; }</span>
<a name="l03238"></a>03238 <span class="preprocessor"></span><span class="preprocessor">    #undef  $1</span>
<a name="l03239"></a>03239 <span class="preprocessor"></span><span class="preprocessor">    #define $1                _txFuncEntry __txFuncEntry; $</span>
<a name="l03240"></a>03240 <span class="preprocessor"></span>
<a name="l03241"></a>03241 <span class="preprocessor">#elif defined (_DEBUG)</span>
<a name="l03242"></a>03242 <span class="preprocessor"></span><span class="preprocessor">    #undef  $</span>
<a name="l03243"></a>03243 <span class="preprocessor"></span><span class="preprocessor">    #define $                 { _txFile = __FILE__; _txLine = __LINE__; _txFunc = __TX_FUNCTION__; }</span>
<a name="l03244"></a>03244 <span class="preprocessor"></span><span class="preprocessor">    #undef  $1</span>
<a name="l03245"></a>03245 <span class="preprocessor"></span><span class="preprocessor">    #define $1                _txFuncEntry __txFuncEntry; $</span>
<a name="l03246"></a>03246 <span class="preprocessor"></span>
<a name="l03247"></a>03247 <span class="preprocessor">#else</span>
<a name="l03248"></a>03248 <span class="preprocessor"></span><span class="preprocessor">    #undef  $</span>
<a name="l03249"></a>03249 <span class="preprocessor"></span><span class="preprocessor">    #define $                 ;</span>
<a name="l03250"></a>03250 <span class="preprocessor"></span><span class="preprocessor">    #undef  $1</span>
<a name="l03251"></a>03251 <span class="preprocessor"></span><span class="preprocessor">    #define $1                ;</span>
<a name="l03252"></a>03252 <span class="preprocessor"></span>
<a name="l03253"></a>03253 <span class="preprocessor">#endif</span>
<a name="l03254"></a>03254 <span class="preprocessor"></span>
<a name="l03256"></a>03256 
<a name="l03257"></a>03257 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03258"></a>03258 
<a name="l03260"></a>03260 
<a name="l03261"></a>03261 <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* _txFile;
<a name="l03262"></a>03262 <span class="keyword">extern</span> <span class="keywordtype">int</span>         _txLine;
<a name="l03263"></a>03263 <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* _txFunc;
<a name="l03264"></a>03264 <span class="keyword">extern</span> <span class="keywordtype">int</span>         _txInTX;
<a name="l03265"></a>03265 
<a name="l03266"></a>03266 <span class="keyword">extern</span> <span class="keywordtype">unsigned</span>    _txMainThreadId;
<a name="l03267"></a>03267 <span class="keyword">extern</span> <span class="keywordtype">unsigned</span>    _txCanvas_ThreadId;
<a name="l03268"></a>03268 
<a name="l03270"></a>03270 
<a name="l03272"></a>03272 
<a name="l03273"></a>03273 <span class="keyword">struct </span>_txFuncEntry
<a name="l03274"></a>03274     {
<a name="l03275"></a>03275     _txFuncEntry() { _txInTX++; }
<a name="l03276"></a>03276    ~_txFuncEntry() { _txInTX--; }
<a name="l03277"></a>03277     };
<a name="l03278"></a>03278 
<a name="l03280"></a>03280 <span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03281"></a>03281 
<a name="l03282"></a>03282 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03313"></a>03313 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03315"></a>03315 <span class="comment"></span>
<a name="l03316"></a>03316 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l03317"></a><a class="code" href="a00034.htm#gac47df5e3eeabebd815393cb32b81343d">03317</a> <span class="preprocessor"></span><span class="preprocessor">#define       _TX_TRACE</span>
<a name="l03318"></a>03318 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l03319"></a>03319 <span class="preprocessor"></span>
<a name="l03320"></a>03320 <span class="preprocessor">#if !defined (TX_TRACE)</span>
<a name="l03321"></a>03321 <span class="preprocessor"></span><span class="preprocessor">    #define   TX_TRACE        _txTrace (__FILE__, __LINE__, __TX_FUNCTION__);</span>
<a name="l03322"></a>03322 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l03323"></a>03323 <span class="preprocessor"></span>
<a name="l03325"></a>03325 
<a name="l03326"></a>03326 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03327"></a>03327 
<a name="l03329"></a>03329 
<a name="l03330"></a>03330 <span class="keyword">inline</span> <span class="keywordtype">void</span> _txTrace (<span class="keyword">const</span> <span class="keywordtype">char</span>* file, <span class="keywordtype">int</span> line, <span class="keyword">const</span> <span class="keywordtype">char</span>* func)
<a name="l03331"></a>03331     {
<a name="l03332"></a>03332     <span class="keywordtype">unsigned</span> <span class="keywordtype">id</span> = GetCurrentThreadId();
<a name="l03333"></a>03333 
<a name="l03334"></a>03334     <span class="keyword">const</span> <span class="keywordtype">char</span> marks[2][2][3] = {{<span class="stringliteral">&quot;Uu&quot;</span>, <span class="stringliteral">&quot;Cc&quot;</span>}, {<span class="stringliteral">&quot;Mm&quot;</span>, <span class="stringliteral">&quot;??&quot;</span>}};
<a name="l03335"></a>03335 
<a name="l03336"></a>03336     <span class="keywordtype">char</span> mark = marks [<span class="keywordtype">id</span> == _txMainThreadId] [<span class="keywordtype">id</span> == _txCanvas_ThreadId] [_txInTX &gt; 0];
<a name="l03337"></a>03337 
<a name="l03338"></a>03338     <a class="code" href="a00032.htm#ga4cfbb1150d579322cb533a235050dece" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s%s- [%c] %s (%d) %s&quot;</span> <span class="stringliteral">&quot;\n&quot;</span>,
<a name="l03339"></a>03339                          <a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a>, _TX_NAME, mark,
<a name="l03340"></a>03340                          (file? file : <span class="stringliteral">&quot;(NULL file)&quot;</span>), line, (func? func : <span class="stringliteral">&quot;&quot;</span>));
<a name="l03341"></a>03341     }
<a name="l03342"></a>03342 
<a name="l03344"></a>03344 <span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03345"></a>03345 
<a name="l03346"></a>03346 <span class="comment">//============================================================================================</span>
<a name="l03347"></a>03347 <span class="comment">//{          Sweet critical section blocking: txAutoLock class</span>
<a name="l03348"></a>03348 <span class="comment">//============================================================================================</span>
<a name="l03349"></a>03349 
<a name="l03350"></a>03350 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03369"></a>03369 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03370"></a>03370 
<a name="l03372"></a>03372 <span class="keyword">extern</span> CRITICAL_SECTION _txCanvas_LockBackBuf;
<a name="l03374"></a>03374 
<a name="l03375"></a><a class="code" href="a00008.htm">03375</a> <span class="keyword">class </span><a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>
<a name="l03376"></a>03376     {
<a name="l03377"></a>03377     <span class="keyword">public</span>:
<a name="l03378"></a>03378 
<a name="l03379"></a>03379 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03402"></a>03402 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03403"></a>03403 
<a name="l03404"></a><a class="code" href="a00008.htm#a61feaeca08bc74354fae1dc8ef55b31a">03404</a>     <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> (CRITICAL_SECTION* cs, <span class="keywordtype">bool</span> mandatory = <span class="keyword">true</span>) :
<a name="l03405"></a>03405         cs_ (cs)
<a name="l03406"></a>03406         {
<a name="l03407"></a>03407 $1      <span class="keywordflow">if</span> (!cs_) <span class="keywordflow">return</span>;
<a name="l03408"></a>03408 
<a name="l03409"></a>03409         <span class="keywordflow">if</span> (mandatory) { $    EnterCriticalSection (cs_);                   }
<a name="l03410"></a>03410         <span class="keywordflow">else</span>           { $ TryEnterCriticalSection (cs_)? 0 : (cs_ = NULL); }
<a name="l03411"></a>03411         }
<a name="l03412"></a>03412 
<a name="l03413"></a>03413 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03426"></a>03426 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03427"></a>03427 
<a name="l03428"></a><a class="code" href="a00008.htm#a7cf59bdea297feba1a8a1695657817b9">03428</a>     <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> (<span class="keywordtype">bool</span> mandatory = <span class="keyword">true</span>) :
<a name="l03429"></a>03429         cs_ (NULL)
<a name="l03430"></a>03430         {
<a name="l03431"></a>03431 $1      <span class="keyword">new</span> (<span class="keyword">this</span>) <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> (&amp;_txCanvas_LockBackBuf, mandatory);
<a name="l03432"></a>03432         }
<a name="l03433"></a>03433 
<a name="l03434"></a>03434 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03436"></a>03436 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03437"></a>03437 
<a name="l03438"></a><a class="code" href="a00008.htm#a65ee5bd5cf2560f863a2c8caf26ceb81">03438</a>    ~<a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>()
<a name="l03439"></a>03439         {
<a name="l03440"></a>03440 $1      <span class="keywordflow">if</span> (!cs_) <span class="keywordflow">return</span>;
<a name="l03441"></a>03441 $       LeaveCriticalSection (cs_); cs_ = NULL;
<a name="l03442"></a>03442         }
<a name="l03443"></a>03443 
<a name="l03444"></a>03444 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03447"></a>03447 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03448"></a>03448 
<a name="l03449"></a><a class="code" href="a00008.htm#aa385aa18f5e42db5a415c25a90f4193d">03449</a>     operator bool ()<span class="keyword"> const</span>
<a name="l03450"></a>03450 <span class="keyword">        </span>{
<a name="l03451"></a>03451 $1      <span class="keywordflow">return</span> (cs_ != NULL);
<a name="l03452"></a>03452         }
<a name="l03453"></a>03453 
<a name="l03454"></a>03454 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03456"></a>03456 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03457"></a>03457 
<a name="l03458"></a>03458 <span class="comment">//  private:</span>
<a name="l03459"></a><a class="code" href="a00008.htm#a331135d21727f8d293dc9e112ebc59c5">03459</a>     CRITICAL_SECTION* <a class="code" href="a00008.htm#a331135d21727f8d293dc9e112ebc59c5" title="Блокируемая критическая секция">cs_</a>;
<a name="l03460"></a>03460 
<a name="l03461"></a>03461 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03463"></a>03463 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03465"></a>03465 <span class="comment"></span>
<a name="l03466"></a>03466     <span class="keyword">private</span>:
<a name="l03467"></a>03467     <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>             (<span class="keyword">const</span> <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>&amp;);
<a name="l03468"></a>03468     <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>&amp; operator = (<span class="keyword">const</span> <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>&amp;);
<a name="l03469"></a>03469 
<a name="l03471"></a>03471 
<a name="l03472"></a>03472     };
<a name="l03473"></a>03473 
<a name="l03474"></a>03474 <span class="comment">//}</span>
<a name="l03475"></a>03475 <span class="comment">//============================================================================================</span>
<a name="l03476"></a>03476 
<a name="l03478"></a>03478 <span class="comment">//}</span>
<a name="l03479"></a>03479 <span class="comment">//============================================================================================</span>
<a name="l03480"></a>03480 
<a name="l03481"></a>03481 <span class="comment">//============================================================================================</span>
<a name="l03482"></a>03482 <span class="comment">//{          Dialogs: txDialog class</span>
<a name="l03484"></a>03484 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l03486"></a>03486 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03506"></a>03506 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03507"></a>03507 
<a name="l03508"></a><a class="code" href="a00009.htm">03508</a> <span class="keyword">struct </span><a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>
<a name="l03509"></a>03509     {
<a name="l03510"></a>03510 
<a name="l03511"></a>03511 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03524"></a>03524 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03525"></a>03525 
<a name="l03526"></a>03526     <span class="keyword">public</span>:
<a name="l03527"></a><a class="code" href="a00031.htm#ga077745aacfb8431d6529e20ad67d1674">03527</a>     <span class="keyword">enum</span> <a class="code" href="a00031.htm#ga077745aacfb8431d6529e20ad67d1674" title="Константы для задания типа контрола.">CONTROL</a>
<a name="l03528"></a>03528         {
<a name="l03529"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a4c775f01785801b0b11ec0cd5bdd7230">03529</a>         DIALOG    = 0x00000000,                  
<a name="l03530"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a7d67f007544f534278ecca3cdca12565">03530</a>         BUTTON    = 0xFFFF0080,                  
<a name="l03531"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a2ca2e6cc3897a6960816076f3237bc9c">03531</a>         EDIT      = 0xFFFF0081,                  
<a name="l03532"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674ae55a36a850c67d46b3b3325de7fce0b8">03532</a>         STATIC    = 0xFFFF0082,                  
<a name="l03533"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a097e68cde08918fb77838059126485f7">03533</a>         LISTBOX   = 0xFFFF0083,                  
<a name="l03534"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a95f321f7f597a08478ddfd6fbb763a2f">03534</a>         SCROLLBAR = 0xFFFF0084,                  
<a name="l03535"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674aeb6d73055f99e0170907c4352dd1c448">03535</a>         COMBOBOX  = 0xFFFF0085,                  
<a name="l03536"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674adc6f24fd6915a3f2786a1b7045406924">03536</a>         END       = 0x00000000                   
<a name="l03537"></a>03537         };
<a name="l03538"></a>03538 
<a name="l03539"></a>03539 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03555"></a>03555 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03556"></a>03556 
<a name="l03557"></a>03557     <span class="keyword">public</span>:
<a name="l03558"></a><a class="code" href="a00007.htm">03558</a>     <span class="keyword">struct </span><a class="code" href="a00007.htm" title="Класс для описания элемента диалогового окна (контрола)">Layout</a>
<a name="l03559"></a>03559         {
<a name="l03560"></a><a class="code" href="a00007.htm#aef0e185c3b1c26598c04af6fc185afd2">03560</a>         <a class="code" href="a00031.htm#ga077745aacfb8431d6529e20ad67d1674" title="Константы для задания типа контрола.">CONTROL</a>     <a class="code" href="a00007.htm#aef0e185c3b1c26598c04af6fc185afd2" title="Тип контрола">wndclass</a>;                    
<a name="l03561"></a><a class="code" href="a00007.htm#a80d1a77abfa3f1d4158ec3de9e61bb88">03561</a>         <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00007.htm#a80d1a77abfa3f1d4158ec3de9e61bb88" title="Название или текст">caption</a>;                     
<a name="l03562"></a><a class="code" href="a00007.htm#a7b7a6396b2c82ad46c6d8b2bf141a8dd">03562</a>         WORD        <a class="code" href="a00007.htm#a7b7a6396b2c82ad46c6d8b2bf141a8dd" title="Идентификатор контрола">id</a>;                          
<a name="l03563"></a><a class="code" href="a00007.htm#ad34729e4edc23ac502eaa17b188df67b">03563</a>         <span class="keywordtype">short</span>        <a class="code" href="a00007.htm#ad34729e4edc23ac502eaa17b188df67b" title="Координата верхнего левого угла">x</a>;                          
<a name="l03564"></a><a class="code" href="a00007.htm#a34769302b056076dd9f0cd95de8c5d2f">03564</a>         <span class="keywordtype">short</span>        <a class="code" href="a00007.htm#a34769302b056076dd9f0cd95de8c5d2f" title="Координата нижнего правого угла">y</a>;                          
<a name="l03565"></a><a class="code" href="a00007.htm#ad412d3c503fde76edb4b79e9bb5bdee4">03565</a>         <span class="keywordtype">short</span>       <a class="code" href="a00007.htm#ad412d3c503fde76edb4b79e9bb5bdee4" title="Размер по X.">sx</a>;                          
<a name="l03566"></a><a class="code" href="a00007.htm#a0153fced86e1addd87ec429590e82741">03566</a>         <span class="keywordtype">short</span>       <a class="code" href="a00007.htm#a0153fced86e1addd87ec429590e82741" title="Размер по Y.">sy</a>;                          
<a name="l03567"></a><a class="code" href="a00007.htm#a7e39a7a8f3d68749766e46dd311f41fd">03567</a>         DWORD       <a class="code" href="a00007.htm#a7e39a7a8f3d68749766e46dd311f41fd" title="Стиль контрола">style</a>;                       
<a name="l03568"></a>03568 
<a name="l03569"></a><a class="code" href="a00007.htm#ad41674a1cf26ce09ed78be29f12ea121">03569</a>         <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00007.htm#ad41674a1cf26ce09ed78be29f12ea121" title="Шрифт диалогового окна">font</a>;                        
<a name="l03570"></a><a class="code" href="a00007.htm#ad71d13adce565c8e4692040b8c4cba83">03570</a>         WORD        <a class="code" href="a00007.htm#ad71d13adce565c8e4692040b8c4cba83" title="Размер шрифта диалогового окна">fontsize</a>;                    
<a name="l03571"></a>03571         };
<a name="l03572"></a>03572 
<a name="l03573"></a>03573 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03580"></a>03580 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03581"></a>03581 
<a name="l03582"></a>03582     <span class="keyword">public</span>:
<a name="l03583"></a>03583     <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>();
<a name="l03584"></a>03584 
<a name="l03585"></a>03585 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03595"></a>03595 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03596"></a>03596 
<a name="l03597"></a>03597     <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a> (<span class="keyword">const</span> <a class="code" href="a00007.htm" title="Класс для описания элемента диалогового окна (контрола)">Layout</a>* layout);
<a name="l03598"></a>03598 
<a name="l03599"></a>03599 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03601"></a>03601 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03602"></a>03602 
<a name="l03603"></a><a class="code" href="a00009.htm#a39d59590ff0d9bc50daab64d37743997">03603</a>     <span class="keyword">virtual</span> <a class="code" href="a00009.htm#a39d59590ff0d9bc50daab64d37743997" title="Деструктор.">~txDialog</a>() {};
<a name="l03604"></a>03604 
<a name="l03605"></a>03605 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03618"></a>03618 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03619"></a>03619 
<a name="l03620"></a>03620     <span class="keyword">const</span> Layout* setLayout (<span class="keyword">const</span> Layout *layout);
<a name="l03621"></a>03621 
<a name="l03622"></a>03622 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03643"></a>03643 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03644"></a>03644 
<a name="l03645"></a>03645     <span class="keyword">virtual</span> <span class="keywordtype">int</span> dialogProc (HWND _wnd, UINT _msg, WPARAM _wParam, LPARAM _lParam);
<a name="l03646"></a>03646 
<a name="l03647"></a>03647 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03665"></a>03665 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03666"></a>03666 
<a name="l03667"></a>03667     INT_PTR dialogBox (<span class="keyword">const</span> Layout* layout = NULL, <span class="keywordtype">size_t</span> bufsize = 0);
<a name="l03668"></a>03668 
<a name="l03669"></a>03669 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03683"></a>03683 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03684"></a>03684 
<a name="l03685"></a>03685     INT_PTR dialogBox (WORD resource);
<a name="l03686"></a>03686 
<a name="l03687"></a>03687 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03689"></a>03689 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03690"></a>03690 
<a name="l03691"></a>03691     <span class="keyword">private</span>:
<a name="l03692"></a>03692     <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a> (<span class="keyword">const</span> <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>&amp;);
<a name="l03693"></a>03693     <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>&amp; operator = (<span class="keyword">const</span> <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>&amp;);
<a name="l03694"></a>03694 
<a name="l03695"></a>03695 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03698"></a>03698 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03699"></a>03699 
<a name="l03700"></a>03700     <span class="keyword">private</span>:
<a name="l03701"></a>03701     <span class="keyword">static</span> <span class="keywordtype">int</span> CALLBACK dialogProc__ (HWND wnd, UINT msg, WPARAM wParam, LPARAM lParam);
<a name="l03702"></a>03702 
<a name="l03703"></a>03703 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03705"></a>03705 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03706"></a>03706 
<a name="l03707"></a>03707     <span class="keyword">private</span>:
<a name="l03708"></a><a class="code" href="a00009.htm#a20f23d5aad5b4e3cc8ad8d7c49ac4fb7">03708</a>     <span class="keyword">const</span> <a class="code" href="a00007.htm" title="Класс для описания элемента диалогового окна (контрола)">Layout</a>* <a class="code" href="a00009.htm#a20f23d5aad5b4e3cc8ad8d7c49ac4fb7" title="Текущий макет диалога.">layout_</a>;
<a name="l03709"></a>03709     };
<a name="l03710"></a>03710 
<a name="l03712"></a>03712 <span class="comment">//}</span>
<a name="l03713"></a>03713 <span class="comment">//============================================================================================</span>
<a name="l03714"></a>03714 
<a name="l03715"></a>03715 <span class="comment">//============================================================================================</span>
<a name="l03716"></a>03716 <span class="comment">//{          Dialogs: Message Map macros</span>
<a name="l03718"></a>03718 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l03720"></a>03720 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03730"></a>03730 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03731"></a>03731 
<a name="l03732"></a><a class="code" href="a00032.htm#gaf6ea524e3c76ba5c8a0d1fa6b81d55b8">03732</a> <span class="preprocessor">#define TX_BEGIN_MESSAGE_MAP()                                                     \</span>
<a name="l03733"></a>03733 <span class="preprocessor">    virtual int dialogProc (HWND _wnd, UINT _msg, WPARAM _wParam, LPARAM _lParam)  \</span>
<a name="l03734"></a>03734 <span class="preprocessor">        {                                                                          \</span>
<a name="l03735"></a>03735 <span class="preprocessor">        (void)_wnd; (void)_msg; (void)_wParam; (void)_lParam;                      \</span>
<a name="l03736"></a>03736 <span class="preprocessor">                                                                                   \</span>
<a name="l03737"></a>03737 <span class="preprocessor">        switch (_msg)                                                              \</span>
<a name="l03738"></a>03738 <span class="preprocessor">            {                                                                      \</span>
<a name="l03739"></a>03739 <span class="preprocessor">            case WM_NULL:</span>
<a name="l03740"></a>03740 <span class="preprocessor"></span>
<a name="l03741"></a>03741 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03754"></a>03754 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03755"></a>03755 
<a name="l03756"></a><a class="code" href="a00032.htm#gadbe2f17002d8d41056e9770066ef558b">03756</a> <span class="preprocessor">#define TX_HANDLE( id )                                                            \</span>
<a name="l03757"></a>03757 <span class="preprocessor">            break;                                                                 \</span>
<a name="l03758"></a>03758 <span class="preprocessor">            case (id):</span>
<a name="l03759"></a>03759 <span class="preprocessor"></span>
<a name="l03760"></a>03760 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03770"></a>03770 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03771"></a>03771 
<a name="l03772"></a><a class="code" href="a00032.htm#ga3637c3398b6ebfa337171beec0770fe4">03772</a> <span class="preprocessor">#define TX_COMMAND_MAP                                                             \</span>
<a name="l03773"></a>03773 <span class="preprocessor">            default: break;                                                        \</span>
<a name="l03774"></a>03774 <span class="preprocessor">            }                                                                      \</span>
<a name="l03775"></a>03775 <span class="preprocessor">                                                                                   \</span>
<a name="l03776"></a>03776 <span class="preprocessor">        if (_msg == WM_COMMAND) switch (LOWORD (_wParam))                          \</span>
<a name="l03777"></a>03777 <span class="preprocessor">            {                                                                      \</span>
<a name="l03778"></a>03778 <span class="preprocessor">            case 0:</span>
<a name="l03779"></a>03779 <span class="preprocessor"></span>
<a name="l03780"></a>03780 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03790"></a>03790 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03791"></a>03791 
<a name="l03792"></a><a class="code" href="a00032.htm#ga3f4a70a0e5076cb4f4addcab0ca760cd">03792</a> <span class="preprocessor">#define TX_END_MESSAGE_MAP                                                         \</span>
<a name="l03793"></a>03793 <span class="preprocessor">            default: break;                                                        \</span>
<a name="l03794"></a>03794 <span class="preprocessor">            }                                                                      \</span>
<a name="l03795"></a>03795 <span class="preprocessor">                                                                                   \</span>
<a name="l03796"></a>03796 <span class="preprocessor">        return FALSE;                                                              \</span>
<a name="l03797"></a>03797 <span class="preprocessor">        }</span>
<a name="l03798"></a>03798 <span class="preprocessor"></span>
<a name="l03800"></a>03800 <span class="comment">//}</span>
<a name="l03801"></a>03801 <span class="comment">//============================================================================================</span>
<a name="l03802"></a>03802 
<a name="l03803"></a>03803 <span class="comment">//============================================================================================</span>
<a name="l03804"></a>03804 <span class="comment">//{          Dialogs: txDialog example: txInputBox()</span>
<a name="l03806"></a>03806 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l03808"></a>03808 <span class="comment"></span><span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l03827"></a>03827 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l03828"></a>03828 
<a name="l03829"></a>03829 <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00031.htm#ga364e78410e64fb751d3a0253d08f98e2" title="Ввод строки в отдельном окне.">txInputBox</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* text = NULL, <span class="keyword">const</span> <span class="keywordtype">char</span>* caption = NULL, <span class="keyword">const</span> <span class="keywordtype">char</span>* input = NULL);
<a name="l03830"></a>03830 
<a name="l03831"></a><a class="code" href="a00031.htm#ga364e78410e64fb751d3a0253d08f98e2">03831</a> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00031.htm#ga364e78410e64fb751d3a0253d08f98e2" title="Ввод строки в отдельном окне.">txInputBox</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* text, <span class="keyword">const</span> <span class="keywordtype">char</span>* caption, <span class="keyword">const</span> <span class="keywordtype">char</span>* input)
<a name="l03832"></a>03832     {
<a name="l03833"></a>03833 $1  <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03834"></a>03834     <span class="comment">// Если не указаны параметры, приходится использовать хоть какие-то надписи.</span>
<a name="l03835"></a>03835     <span class="comment">// txGetModuleFileName() - имя EXE-файла, на случай, если кое-кто поленился задать название.</span>
<a name="l03836"></a>03836     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03837"></a>03837 
<a name="l03838"></a>03838 $   <span class="keywordflow">if</span> (!text)    text    = <span class="stringliteral">&quot;Введите строку:&quot;</span>;
<a name="l03839"></a>03839 $   <span class="keywordflow">if</span> (!caption) caption = <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keyword">false</span>);
<a name="l03840"></a>03840 $   <span class="keywordflow">if</span> (!input)   input   = <span class="stringliteral">&quot;&quot;</span>;
<a name="l03841"></a>03841 
<a name="l03842"></a>03842     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03843"></a>03843     <span class="comment">// Идентификаторы элементов диалога. Они требуются в GetDlgItemText().</span>
<a name="l03844"></a>03844     <span class="comment">// Если диалог строится не вручную, а редактором ресурсов, то они задаются в нем автоматически.</span>
<a name="l03845"></a>03845     <span class="comment">// У нас же тут - хардкор стайл, к сожалению. Причина в том, что у разных сред программирования</span>
<a name="l03846"></a>03846     <span class="comment">// разные редакторы ресурсов и системы сборки. Поэтому для независимости от них все будет</span>
<a name="l03847"></a>03847     <span class="comment">// строиться на этапе выполнения, динамически. Вы еще посмотрите, как это будет реализовано</span>
<a name="l03848"></a>03848     <span class="comment">// в txDialog::dialogBox() и _tx_DLGTEMPLATE_()... О_о</span>
<a name="l03849"></a>03849     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03850"></a>03850 
<a name="l03851"></a>03851 <span class="preprocessor">    #define ID_TEXT_  101</span>
<a name="l03852"></a>03852 <span class="preprocessor"></span><span class="preprocessor">    #define ID_INPUT_ 102</span>
<a name="l03853"></a>03853 <span class="preprocessor"></span>
<a name="l03854"></a>03854     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03855"></a>03855     <span class="comment">// Задание макета (вида) диалога в виде массива структур.</span>
<a name="l03856"></a>03856     <span class="comment">// С помощью особого порядка полей в структуре txDialog::Layout и констант из класса</span>
<a name="l03857"></a>03857     <span class="comment">// txDialog этот массив становится похож на описание ресурса диалога в .rc - файле.</span>
<a name="l03858"></a>03858     <span class="comment">// См. описание синтаксиса rc-файла в документации по Win32 (MSDN, http://msdn.com).</span>
<a name="l03859"></a>03859     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03860"></a>03860 
<a name="l03861"></a>03861 $   <a class="code" href="a00007.htm" title="Класс для описания элемента диалогового окна (контрола)">txDialog::Layout</a> layout[] =
<a name="l03862"></a>03862 
<a name="l03863"></a>03863     <span class="comment">//----------------------+-----------+-------------+-----------------+---------------------</span>
<a name="l03864"></a>03864     <span class="comment">//     Тип элемента     | Имя       | Идентифика- |   Координаты    | Флаги элементов</span>
<a name="l03865"></a>03865     <span class="comment">//     диалога          | элемента  | тор, связан-|-----------------| (см. описание элементов диалога в MSDN).</span>
<a name="l03866"></a>03866     <span class="comment">//                      |           | ный с ним   | X | Y |Шир.|Выс.|</span>
<a name="l03867"></a>03867     <span class="comment">//----------------------+-----------+-------------+---+---+----+----+---------------------</span>
<a name="l03868"></a>03868     <span class="comment">//                      |           |             |   |   |    |    |</span>
<a name="l03869"></a>03869         {{ <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a4c775f01785801b0b11ec0cd5bdd7230" title="Начало описания диалога">txDialog::DIALOG</a>,   caption,   0,             0,  0, 240,  85                                                     },
<a name="l03870"></a>03870          { <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674ae55a36a850c67d46b3b3325de7fce0b8" title="Нередактируемый элемент (текст, картинка и т.д.)">txDialog::STATIC</a>,   text,      ID_TEXT_,     10, 10, 150,  40, SS_LEFT                                            },
<a name="l03871"></a>03871          { <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a2ca2e6cc3897a6960816076f3237bc9c" title="Редактируемый текст">txDialog::EDIT</a>,     input,     ID_INPUT_,    10, 60, 220,  15, ES_LEFT | WS_BORDER | ES_AUTOHSCROLL | WS_TABSTOP  },
<a name="l03872"></a>03872          { <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a7d67f007544f534278ecca3cdca12565" title="Кнопка">txDialog::BUTTON</a>,   <span class="stringliteral">&quot;&amp;OK&quot;</span>,     IDOK,        180, 10,  50,  15, BS_DEFPUSHBUTTON                     | WS_TABSTOP  },
<a name="l03873"></a>03873          { <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a7d67f007544f534278ecca3cdca12565" title="Кнопка">txDialog::BUTTON</a>,   <span class="stringliteral">&quot;&amp;Cancel&quot;</span>, IDCANCEL,    180, 30,  50,  15, BS_PUSHBUTTON                        | WS_TABSTOP  },
<a name="l03874"></a>03874          { <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674adc6f24fd6915a3f2786a1b7045406924" title="Конец описания диалога">txDialog::END</a>                                                                                                     }};
<a name="l03875"></a>03875 
<a name="l03876"></a>03876     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03877"></a>03877     <span class="comment">// Класс диалога для InputBox. Внутренний, т.к. зачем ему быть внешним.</span>
<a name="l03878"></a>03878     <span class="comment">// Нужен в основном для задания строки ввода (str) и оконной функции диалогового окна,</span>
<a name="l03879"></a>03879     <span class="comment">// требуемой Win32 (она построена макросами TX_BEGIN_MESSAGE_MAP и другими). Можно не делать</span>
<a name="l03880"></a>03880     <span class="comment">// внутреннего класса, но тогда оконную функцию придется писать в глобальной области видимости,</span>
<a name="l03881"></a>03881     <span class="comment">// и str объявлять глобально тоже (или передавать ее адрес через DialogBoxParam и записывать</span>
<a name="l03882"></a>03882     <span class="comment">// его в класс во время обработки WM_INITDIALOG).</span>
<a name="l03883"></a>03883     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03884"></a>03884 
<a name="l03885"></a>03885     <span class="keyword">struct </span>inputDlg : <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>
<a name="l03886"></a>03886         {
<a name="l03887"></a>03887         <span class="keywordtype">char</span> str [1024];
<a name="l03888"></a>03888 
<a name="l03889"></a>03889         <span class="comment">//------------------------------------------------------------------------------------</span>
<a name="l03890"></a>03890 
<a name="l03891"></a>03891         inputDlg() :
<a name="l03892"></a>03892             str()                               <span class="comment">// Обнуление всей строки. Не работает на старых</span>
<a name="l03893"></a>03893             {                                   <span class="comment">//     компиляторах, поэтому еще раз:</span>
<a name="l03894"></a>03894 $           memset (str, 0, <span class="keyword">sizeof</span> (str) - 1);  <span class="comment">// Обнуление всей строки</span>
<a name="l03895"></a>03895             }
<a name="l03896"></a>03896 
<a name="l03897"></a>03897         <span class="comment">//------------------------------------------------------------------------------------</span>
<a name="l03898"></a>03898 
<a name="l03899"></a>03899         <a class="code" href="a00032.htm#gaf6ea524e3c76ba5c8a0d1fa6b81d55b8" title="Заголовок карты сообщений (Message Map).">TX_BEGIN_MESSAGE_MAP</a>()    <span class="comment">// Карта сообщений. На самом деле это начало оконной функции.</span>
<a name="l03900"></a>03900 
<a name="l03901"></a>03901             <a class="code" href="a00032.htm#ga3637c3398b6ebfa337171beec0770fe4" title="Начало карты команд (Command map) в карте сообщений.">TX_COMMAND_MAP</a>        <span class="comment">// Здесь обрабатываются WM_COMMAND. На самом деле это switch.</span>
<a name="l03902"></a>03902 
<a name="l03903"></a>03903                 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l03904"></a>03904                 <span class="comment">// При нажатии кнопки OK копируем строку из поля ввода в нашу переменную str,</span>
<a name="l03905"></a>03905                 <span class="comment">// т.к. после закрытия диалога строка ввода умрет и текст уже из нее получить.</span>
<a name="l03906"></a>03906                 <span class="comment">// Этот макрос на самом деле превращается в case из оператора switch.</span>
<a name="l03907"></a>03907                 <span class="comment">// _wnd - это параметр оконной функции, см. определение макроса TX_BEGIN_MESSAGE_MAP().</span>
<a name="l03908"></a>03908                 <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l03909"></a>03909 
<a name="l03910"></a>03910                 <a class="code" href="a00032.htm#gadbe2f17002d8d41056e9770066ef558b" title="Заголовок обработчика сообщения (Message handler) карты сообщений.">TX_HANDLE</a> (IDOK) $ GetDlgItemText (_wnd, ID_INPUT_, str, <span class="keyword">sizeof</span> (str) - 1);
<a name="l03911"></a>03911 
<a name="l03912"></a>03912         <a class="code" href="a00032.htm#ga3f4a70a0e5076cb4f4addcab0ca760cd" title="Завершитель карты сообщений.">TX_END_MESSAGE_MAP</a>
<a name="l03913"></a>03913 
<a name="l03914"></a>03914         <span class="comment">//------------------------------------------------------------------------------------</span>
<a name="l03915"></a>03915         <span class="comment">// Конец внутреннего класса диалога</span>
<a name="l03916"></a>03916         <span class="comment">//------------------------------------------------------------------------------------</span>
<a name="l03917"></a>03917 
<a name="l03918"></a>03918         };
<a name="l03919"></a>03919 
<a name="l03920"></a>03920     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03921"></a>03921     <span class="comment">// Убираем дефайны, чтобы потом не мешали.</span>
<a name="l03922"></a>03922     <span class="comment">// От этого они получаются &quot;локального действия&quot;, как будто у них была бы область видимости -</span>
<a name="l03923"></a>03923     <span class="comment">// функция. На самом деле это сделано вручную через #undef. Чтобы подчеркнуть их локальную</span>
<a name="l03924"></a>03924     <span class="comment">// природу, у них имена заканчиваются на _. Такие дейфайны потом не перекосячат весь код после</span>
<a name="l03925"></a>03925     <span class="comment">// того как, фактически, стали уже не нужны.</span>
<a name="l03926"></a>03926     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03927"></a>03927 
<a name="l03928"></a>03928 <span class="preprocessor">    #undef ID_TEXT_</span>
<a name="l03929"></a>03929 <span class="preprocessor"></span><span class="preprocessor">    #undef ID_INPUT_</span>
<a name="l03930"></a>03930 <span class="preprocessor"></span>
<a name="l03931"></a>03931     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03932"></a>03932     <span class="comment">// Это статический объект, потому что строка в нем должна жить после завершения функции.</span>
<a name="l03933"></a>03933     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03934"></a>03934 
<a name="l03935"></a>03935 $   <span class="keyword">static</span> inputDlg dlg;
<a name="l03936"></a>03936 
<a name="l03937"></a>03937     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03938"></a>03938     <span class="comment">// Передаем layout и запускаем окно диалога</span>
<a name="l03939"></a>03939     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03940"></a>03940 
<a name="l03941"></a>03941 $   dlg.dialogBox (layout);
<a name="l03942"></a>03942 
<a name="l03943"></a>03943     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03944"></a>03944     <span class="comment">// Возвращаем адрес строки из статического объекта. Так можно делать, потому что статический</span>
<a name="l03945"></a>03945     <span class="comment">// объект не умрет при выходе из функции и строка в нем, соответственно, тоже. Адрес</span>
<a name="l03946"></a>03946     <span class="comment">// нестатических переменных передавать синтаксически можно, но ведет к серьезным ошибкам.</span>
<a name="l03947"></a>03947     <span class="comment">//----------------------------------------------------------------------------------------</span>
<a name="l03948"></a>03948 
<a name="l03949"></a>03949 $   <span class="keywordflow">return</span> dlg.str;
<a name="l03950"></a>03950     }
<a name="l03951"></a>03951 
<a name="l03953"></a>03953 <span class="comment">//}</span>
<a name="l03954"></a>03954 <span class="comment">//============================================================================================</span>
<a name="l03955"></a>03955 
<a name="l03956"></a>03956 <span class="comment">//}</span>
<a name="l03957"></a>03957 <span class="comment">//============================================================================================</span>
<a name="l03958"></a>03958 
<a name="l03959"></a>03959 <span class="comment">//============================================================================================</span>
<a name="l03960"></a>03960 <span class="comment">//{          TXLIB IMPLEMENTATION</span>
<a name="l03961"></a>03961 <span class="comment">//           Реализация функций библиотеки</span>
<a name="l03962"></a>03962 <span class="comment">//============================================================================================</span>
<a name="l03964"></a>03964 <span class="comment"></span>
<a name="l03965"></a>03965 <span class="comment">//============================================================================================</span>
<a name="l03966"></a>03966 <span class="comment">//{          [Internal] Function prototypes, macros and constants</span>
<a name="l03967"></a>03967 <span class="comment">//           Прототипы внутренних функций, макросы и константы</span>
<a name="l03968"></a>03968 <span class="comment">//============================================================================================</span>
<a name="l03969"></a>03969 
<a name="l03970"></a>03970 <span class="keywordtype">int</span>              _txInitialize();
<a name="l03971"></a>03971 <span class="keywordtype">void</span>             _txCleanup();
<a name="l03972"></a>03972 
<a name="l03973"></a>03973 HWND             _txCanvas_CreateWindow (CREATESTRUCT* from);
<a name="l03974"></a>03974 <span class="keyword">inline</span> <span class="keywordtype">bool</span>      _txCanvas_OK();
<a name="l03975"></a>03975 
<a name="l03976"></a>03976 <span class="keywordtype">int</span>              _txCanvas_SetRefreshLock (<span class="keywordtype">int</span> count);
<a name="l03977"></a>03977 
<a name="l03978"></a>03978 <span class="keywordtype">bool</span>             _txCanvas_OnCREATE     (HWND wnd);
<a name="l03979"></a>03979 <span class="keywordtype">bool</span>             _txCanvas_OnDESTROY    (HWND wnd);
<a name="l03980"></a>03980 <span class="keywordtype">bool</span>             _txCanvas_OnCLOSE      (HWND);
<a name="l03981"></a>03981 <span class="keywordtype">bool</span>             _txCanvas_OnPAINT      (HWND wnd);
<a name="l03982"></a>03982 <span class="keywordtype">bool</span>             _txCanvas_OnCHAR       (HWND wnd, WPARAM ch);
<a name="l03983"></a>03983 <span class="keywordtype">bool</span>             _txCanvas_OnTIMER      (HWND wnd, WPARAM <span class="keywordtype">id</span>);
<a name="l03984"></a>03984 <span class="keywordtype">bool</span>             _txCanvas_OnMOUSEMOVE  (HWND wnd, WPARAM buttons, LPARAM coords);
<a name="l03985"></a>03985 <span class="keywordtype">bool</span>             _txCanvas_OnCmdCONSOLE (HWND wnd, WPARAM cmd);
<a name="l03986"></a>03986 <span class="keywordtype">bool</span>             _txCanvas_OnCmdABOUT   (HWND wnd, WPARAM cmd);
<a name="l03987"></a>03987 
<a name="l03988"></a>03988 <span class="keywordtype">unsigned</span> WINAPI  _txCanvas_ThreadProc   (<span class="keywordtype">void</span>* data);
<a name="l03989"></a>03989 LRESULT CALLBACK _txCanvas_WndProc      (HWND wnd, UINT msg, WPARAM wpar, LPARAM lpar);
<a name="l03990"></a>03990 
<a name="l03991"></a>03991 HDC              _txBuffer_Create (HWND wnd, <span class="keyword">const</span> POINT* size = NULL, HBITMAP bmap = NULL);
<a name="l03992"></a>03992 <span class="keywordtype">bool</span>             _txBuffer_Delete (HDC* dc);
<a name="l03993"></a>03993 <span class="keywordtype">bool</span>             _txBuffer_Select (HGDIOBJ obj, HDC dc = <a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>());
<a name="l03994"></a>03994 
<a name="l03995"></a>03995 HWND             _txConsole_Attach();
<a name="l03996"></a>03996 <span class="keywordtype">bool</span>             _txConsole_OK();
<a name="l03997"></a>03997 <span class="keywordtype">bool</span>             _txConsole_Detach (<span class="keywordtype">bool</span> restorePos);
<a name="l03998"></a>03998 <span class="keywordtype">bool</span>             _txConsole_Draw (HDC dc);
<a name="l03999"></a>03999 <span class="keywordtype">bool</span>             _txConsole_SetUnicodeFont();
<a name="l04000"></a>04000 
<a name="l04001"></a>04001 <span class="keywordtype">void</span>             _txPauseBeforeTermination (HWND canvas);
<a name="l04002"></a>04002 <span class="keywordtype">bool</span>             _txIsParentWaitable (DWORD* parentPID);
<a name="l04003"></a>04003 PROCESSENTRY32*  _txFindProcess (<span class="keywordtype">unsigned</span> pid = GetCurrentProcessId());
<a name="l04004"></a>04004 <span class="keywordtype">bool</span>             _txKillProcess (DWORD pid);
<a name="l04005"></a>04005 <span class="keywordtype">int</span>              _txGetInput();
<a name="l04006"></a>04006 
<a name="l04007"></a>04007 <span class="keywordtype">bool</span>             _txCreateShortcut (<span class="keyword">const</span> <span class="keywordtype">char</span> shortcutName[],
<a name="l04008"></a>04008                                     <span class="keyword">const</span> <span class="keywordtype">char</span> fileToLink[], <span class="keyword">const</span> <span class="keywordtype">char</span> args[] = NULL, <span class="keyword">const</span> <span class="keywordtype">char</span> workDir[] = NULL,
<a name="l04009"></a>04009                                     <span class="keyword">const</span> <span class="keywordtype">char</span> description[] = NULL, <span class="keywordtype">int</span> cmdShow = SW_SHOWNORMAL,
<a name="l04010"></a>04010                                     <span class="keyword">const</span> <span class="keywordtype">char</span> iconFile[] = NULL, <span class="keywordtype">int</span> iconIndex = 0, <span class="keywordtype">int</span> fontSize = 0,
<a name="l04011"></a>04011                                     COORD bufSize = <a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (COORD), COORD wndSize = <a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (COORD), COORD wndOrg = <a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (COORD));
<a name="l04012"></a>04012 
<a name="l04013"></a>04013 <span class="keywordtype">void</span>*            _tx_DLGTEMPLATE_Create (<span class="keywordtype">void</span>* globalMem, <span class="keywordtype">size_t</span> bufsize, DWORD style, DWORD exStyle,
<a name="l04014"></a>04014                                          WORD controls, <span class="keywordtype">short</span> x, <span class="keywordtype">short</span> y, <span class="keywordtype">short</span> cx, <span class="keywordtype">short</span> cy,
<a name="l04015"></a>04015                                          <span class="keyword">const</span> <span class="keywordtype">char</span> caption[], <span class="keyword">const</span> <span class="keywordtype">char</span> font[], WORD fontsize,
<a name="l04016"></a>04016                                          HANDLE menu);
<a name="l04017"></a>04017 <span class="keywordtype">void</span>*            _tx_DLGTEMPLATE_Add    (<span class="keywordtype">void</span>* dlgTemplatePtr, <span class="keywordtype">size_t</span> bufsize, DWORD style, DWORD exStyle,
<a name="l04018"></a>04018                                          <span class="keywordtype">short</span> x, <span class="keywordtype">short</span> y, <span class="keywordtype">short</span> cx, <span class="keywordtype">short</span> cy,
<a name="l04019"></a>04019                                          WORD <span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> wclass[], <span class="keyword">const</span> <span class="keywordtype">char</span> caption[]);
<a name="l04020"></a>04020 
<a name="l04021"></a>04021 <span class="keyword">const</span> <span class="keywordtype">char</span>*      _txError        (<span class="keyword">const</span> <span class="keywordtype">char</span> file[] = NULL, <span class="keywordtype">int</span> line = 0, <span class="keyword">const</span> <span class="keywordtype">char</span> func[] = NULL,
<a name="l04022"></a>04022                                   <span class="keyword">const</span> <span class="keywordtype">char</span> msg[] = NULL, ...) _TX_CHECK_FORMAT (4);
<a name="l04023"></a>04023 
<a name="l04024"></a>04024 HICON            _txCreateTXIcon (<span class="keywordtype">int</span> size);
<a name="l04025"></a>04025 <span class="keywordtype">bool</span>             _txNotifyIcon   (<span class="keywordtype">unsigned</span> flags, const <span class="keywordtype">char</span> title[], const <span class="keywordtype">char</span> info[], ...) _TX_CHECK_FORMAT (3);
<a name="l04026"></a>04026 
<a name="l04027"></a>04027 <span class="keywordtype">void</span>             _txOnSignal (<span class="keywordtype">int</span> signal = 0, <span class="keywordtype">int</span> fpe = 0);
<a name="l04028"></a>04028 <span class="keywordtype">void</span>             _txOnTerminate();
<a name="l04029"></a>04029 <span class="keywordtype">void</span>             _txOnUnexpected();
<a name="l04030"></a>04030 
<a name="l04031"></a>04031 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04032"></a>04032 
<a name="l04033"></a>04033 FARPROC      _txDllImport (const <span class="keywordtype">char</span> dllFileName[], const <span class="keywordtype">char</span> funcName[], <span class="keywordtype">bool</span> required = true);
<a name="l04034"></a>04034 
<a name="l04035"></a>04035 <span class="preprocessor">#define      _TX_SAFECALL(func)     (func) &amp;&amp; func</span>
<a name="l04036"></a>04036 <span class="preprocessor"></span>
<a name="l04037"></a>04037 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04038"></a>04038 
<a name="l04039"></a>04039 <span class="comment">// These are macros for __FILE__ and __LINE__ to work properly.</span>
<a name="l04040"></a>04040 
<a name="l04041"></a>04041 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l04042"></a>04042 <span class="preprocessor"></span><span class="preprocessor">    #define  _TX_IF_ARGUMENT_FAILED(cond)      if (!assert (cond) &amp;&amp; (SetLastError (ERROR_BAD_ARGUMENTS), 1))</span>
<a name="l04043"></a>04043 <span class="preprocessor"></span>
<a name="l04044"></a>04044 <span class="preprocessor">    #define  _TX_IF_TXWINDOW_FAILED            if (       !txOK() &amp;&amp; (SetLastError (ERROR_INVALID_DATA),  1) &amp;&amp;  \</span>
<a name="l04045"></a>04045 <span class="preprocessor">                                                  (TX_ERROR (&quot;\a&quot; &quot;Окно рисования не создано или не в порядке&quot;), 1))</span>
<a name="l04046"></a>04046 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l04047"></a>04047 <span class="preprocessor"></span><span class="preprocessor">    #define  _TX_IF_ARGUMENT_FAILED(cond)      if (!       (cond) &amp;&amp; (SetLastError (ERROR_BAD_ARGUMENTS), 1))</span>
<a name="l04048"></a>04048 <span class="preprocessor"></span>
<a name="l04049"></a>04049 <span class="preprocessor">    #define  _TX_IF_TXWINDOW_FAILED            if (       !txOK() &amp;&amp; (SetLastError (ERROR_INVALID_DATA),  1))</span>
<a name="l04050"></a>04050 <span class="preprocessor"></span>
<a name="l04051"></a>04051 <span class="preprocessor">#endif</span>
<a name="l04052"></a>04052 <span class="preprocessor"></span>
<a name="l04053"></a>04053 <span class="comment">// This is a macro because cond is an expression and not always a function. Lack of lambdas in pre-C++0x.</span>
<a name="l04054"></a>04054 
<a name="l04055"></a>04055 <span class="preprocessor">#define      _txWaitFor(cond)       { for (DWORD _t = GetTickCount() + _TX_TIMEOUT;  \</span>
<a name="l04056"></a>04056 <span class="preprocessor">                                           !(cond) &amp;&amp; GetTickCount() &lt; _t;           \</span>
<a name="l04057"></a>04057 <span class="preprocessor">                                           Sleep (_TX_WINDOW_UPDATE_INTERVAL)) ;     \</span>
<a name="l04058"></a>04058 <span class="preprocessor">                                      if  (!(cond))                                  \</span>
<a name="l04059"></a>04059 <span class="preprocessor">                                           _txTrace (__FILE__, __LINE__, &quot;WARNING: Timeout: &quot; #cond &quot;.&quot;); }</span>
<a name="l04060"></a>04060 <span class="preprocessor"></span>
<a name="l04061"></a>04061 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04062"></a>04062 
<a name="l04063"></a>04063 <span class="keyword">const</span> <span class="keywordtype">int</span>    _TX_IDM_ABOUT          = 40000;  <span class="comment">// Идентификаторы системного меню окна</span>
<a name="l04064"></a>04064 <span class="keyword">const</span> <span class="keywordtype">int</span>    _TX_IDM_CONSOLE        = 40001;
<a name="l04065"></a>04065 
<a name="l04066"></a>04066 <span class="comment">//}</span>
<a name="l04067"></a>04067 <span class="comment">//============================================================================================</span>
<a name="l04068"></a>04068 
<a name="l04069"></a>04069 <span class="comment">//============================================================================================</span>
<a name="l04070"></a>04070 <span class="comment">//{          [Internal] DLL functions import</span>
<a name="l04072"></a>04072 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l04074"></a>04074 <span class="comment"></span>
<a name="l04075"></a>04075 FARPROC _txDllImport (<span class="keyword">const</span> <span class="keywordtype">char</span> dllFileName[], <span class="keyword">const</span> <span class="keywordtype">char</span> funcName[], <span class="keywordtype">bool</span> required <span class="comment">/*= true*/</span>)
<a name="l04076"></a>04076     {
<a name="l04077"></a>04077     _TX_IF_ARGUMENT_FAILED (!(dllFileName &amp;&amp; !*dllFileName)) return NULL;
<a name="l04078"></a>04078     _TX_IF_ARGUMENT_FAILED (  funcName    &amp;&amp;  *funcName)     return NULL;
<a name="l04079"></a>04079 
<a name="l04080"></a>04080     HMODULE                  dll = GetModuleHandle (dllFileName);
<a name="l04081"></a>04081     if (!dll &amp;&amp; dllFileName) dll = LoadLibrary     (dllFileName);
<a name="l04082"></a>04082     if (!dll &amp;&amp; required)  <a class="code" href="a00032.htm#ga3e4a82a10130528f63b6f19476a0943a" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (&quot;\a&quot; &quot;Cannot load library \&quot;%s\&quot;&quot; <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> dllFileName);
<a name="l04083"></a>04083 
<a name="l04084"></a>04084     if (!dll) return NULL;
<a name="l04085"></a>04085 
<a name="l04086"></a>04086     FARPROC addr = GetProcAddress (dll, funcName);
<a name="l04087"></a>04087     if (!addr &amp;&amp; required) <a class="code" href="a00032.htm#ga3e4a82a10130528f63b6f19476a0943a" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (&quot;\a&quot; &quot;Cannot import \&quot;%s\&quot; from library \&quot;%s\&quot;&quot;<a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> funcName <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> dllFileName);
<a name="l04088"></a>04088 
<a name="l04089"></a>04089     return addr;
<a name="l04090"></a>04090     }
<a name="l04091"></a>04091 
<a name="l04092"></a>04092 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04093"></a>04093 <span class="comment">//           Import helpers</span>
<a name="l04094"></a>04094 <span class="comment">//           Малая механизация</span>
<a name="l04095"></a>04095 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04096"></a>04096 
<a name="l04097"></a>04097 <span class="preprocessor">#define _TX_DLLIMPORT(     lib, retval, name, params ) \</span>
<a name="l04098"></a>04098 <span class="preprocessor">     retval (WINAPI* name) params = (retval (WINAPI*) params) _txDllImport (lib &quot;.dll&quot;, #name, true)</span>
<a name="l04099"></a>04099 <span class="preprocessor"></span>
<a name="l04100"></a>04100 <span class="preprocessor">#define _TX_DLLIMPORT_OPT( lib, retval, name, params ) \</span>
<a name="l04101"></a>04101 <span class="preprocessor">     retval (WINAPI* name) params = (retval (WINAPI*) params) _txDllImport (lib &quot;.dll&quot;, #name, false)</span>
<a name="l04102"></a>04102 <span class="preprocessor"></span>
<a name="l04103"></a>04103 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04104"></a>04104 <span class="comment">// Some IDEs don&#39;t link with these libs by default in console projects, so do sunrise by hand. :(</span>
<a name="l04105"></a>04105 <span class="comment">//{ &lt;tears&gt;</span>
<a name="l04106"></a>04106 
<a name="l04107"></a>04107 <span class="keyword">namespace </span>Win32 {
<a name="l04108"></a>04108 
<a name="l04109"></a>04109 <span class="preprocessor">#ifdef _MSC_VER_6</span>
<a name="l04110"></a>04110 <span class="preprocessor"></span><span class="keyword">struct </span>CONSOLE_FONT_INFO;
<a name="l04111"></a>04111 <span class="preprocessor">#endif</span>
<a name="l04112"></a>04112 <span class="preprocessor"></span>
<a name="l04113"></a>04113 <span class="keyword">struct </span>NT_CONSOLE_PROPS;
<a name="l04114"></a>04114 <span class="keyword">struct </span>CONSOLE_FONT_INFOEX;
<a name="l04115"></a>04115 
<a name="l04116"></a>04116 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      GetDeviceCaps,          (HDC dc, <span class="keywordtype">int</span> index));
<a name="l04117"></a>04117 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HDC,      CreateCompatibleDC,     (HDC dc));
<a name="l04118"></a>04118 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HBITMAP,  CreateCompatibleBitmap, (HDC dc, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height));
<a name="l04119"></a>04119 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HGDIOBJ,  GetStockObject,         (<span class="keywordtype">int</span> <span class="keywordtype">object</span>));
<a name="l04120"></a>04120 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HGDIOBJ,  SelectObject,           (HDC dc, HGDIOBJ <span class="keywordtype">object</span>));
<a name="l04121"></a>04121 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HGDIOBJ,  GetCurrentObject,       (HDC dc, UINT objectType));
<a name="l04122"></a>04122 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      GetObjectA,             (HGDIOBJ obj, <span class="keywordtype">int</span> bufsize, LPVOID buffer));
<a name="l04123"></a>04123 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    DWORD,    GetObjectType,          (HGDIOBJ <span class="keywordtype">object</span>));
<a name="l04124"></a>04124 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     DeleteDC,               (HDC dc));
<a name="l04125"></a>04125 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     DeleteObject,           (HGDIOBJ <span class="keywordtype">object</span>));
<a name="l04126"></a>04126 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    COLORREF, SetTextColor,           (HDC dc, COLORREF color));
<a name="l04127"></a>04127 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    COLORREF, SetBkColor,             (HDC dc, COLORREF color));
<a name="l04128"></a>04128 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      SetBkMode,              (HDC dc, <span class="keywordtype">int</span> bkMode));
<a name="l04129"></a>04129 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HFONT,    CreateFontA,            (<span class="keywordtype">int</span> height, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> escapement, <span class="keywordtype">int</span> orientation,
<a name="l04130"></a>04130                                                                   <span class="keywordtype">int</span> weight, DWORD italic, DWORD underline, DWORD strikeout,
<a name="l04131"></a>04131                                                                   DWORD charSet, DWORD outputPrec, DWORD clipPrec,
<a name="l04132"></a>04132                                                                   DWORD quality, DWORD pitchAndFamily, LPCTSTR face));
<a name="l04133"></a>04133 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      EnumFontFamiliesExA,    (HDC dc, LPLOGFONT logFont, FONTENUMPROC enumProc,
<a name="l04134"></a>04134                                                                   LPARAM lParam, DWORD reserved));
<a name="l04135"></a>04135 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    COLORREF, SetPixel,               (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, COLORREF color));
<a name="l04136"></a>04136 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    COLORREF, GetPixel,               (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y));
<a name="l04137"></a>04137 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HPEN,     CreatePen,              (<span class="keywordtype">int</span> penStyle, <span class="keywordtype">int</span> width, COLORREF color));
<a name="l04138"></a>04138 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HBRUSH,   CreateSolidBrush,       (COLORREF color));
<a name="l04139"></a>04139 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     MoveToEx,               (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, LPPOINT point));
<a name="l04140"></a>04140 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     LineTo,                 (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y));
<a name="l04141"></a>04141 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     Polygon,                (HDC dc, CONST POINT points[], <span class="keywordtype">int</span> count));
<a name="l04142"></a>04142 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     Rectangle,              (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1));
<a name="l04143"></a>04143 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     RoundRect,              (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1, <span class="keywordtype">int</span> sizeX, <span class="keywordtype">int</span> sizeY));
<a name="l04144"></a>04144 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     Ellipse,                (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1));
<a name="l04145"></a>04145 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     Arc,                    (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1,
<a name="l04146"></a>04146                                                                   <span class="keywordtype">int</span> xStart, <span class="keywordtype">int</span> yStart, <span class="keywordtype">int</span> xEnd, <span class="keywordtype">int</span> yEnd));
<a name="l04147"></a>04147 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     Pie,                    (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1,
<a name="l04148"></a>04148                                                                   <span class="keywordtype">int</span> xStart, <span class="keywordtype">int</span> yStart, <span class="keywordtype">int</span> xEnd, <span class="keywordtype">int</span> yEnd));
<a name="l04149"></a>04149 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     Chord,                  (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1,
<a name="l04150"></a>04150                                                                   <span class="keywordtype">int</span> xStart, <span class="keywordtype">int</span> yStart, <span class="keywordtype">int</span> xEnd, <span class="keywordtype">int</span> yEnd));
<a name="l04151"></a>04151 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     TextOutA,               (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, LPCTSTR <span class="keywordtype">string</span>, <span class="keywordtype">int</span> length));
<a name="l04152"></a>04152 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    UINT,     SetTextAlign,           (HDC dc, UINT mode));
<a name="l04153"></a>04153 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     GetTextExtentPoint32A,  (HDC dc, LPCTSTR <span class="keywordtype">string</span>, <span class="keywordtype">int</span> length, LPSIZE size));
<a name="l04154"></a>04154 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     ExtFloodFill,           (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, COLORREF color, UINT type));
<a name="l04155"></a>04155 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     BitBlt,                 (HDC dest, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height,
<a name="l04156"></a>04156                                                                   HDC src,  <span class="keywordtype">int</span> xSrc,  <span class="keywordtype">int</span> ySrc,  DWORD rOp));
<a name="l04157"></a>04157 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      SetDIBitsToDevice,      (HDC dc, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, DWORD width, DWORD height,
<a name="l04158"></a>04158                                                                   <span class="keywordtype">int</span> xSrc, <span class="keywordtype">int</span> ySrc, UINT startLine, UINT numLines,
<a name="l04159"></a>04159                                                                   <span class="keyword">const</span> VOID* data, <span class="keyword">const</span> BITMAPINFO* info, UINT colorUse));
<a name="l04160"></a>04160 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     PatBlt,                 (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height, DWORD rOp));
<a name="l04161"></a>04161 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      SetROP2,                (HDC dc, <span class="keywordtype">int</span> mode));
<a name="l04162"></a>04162 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HRGN,     CreateRectRgn,          (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1));
<a name="l04163"></a>04163 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     GetBitmapDimensionEx,   (HBITMAP bitmap, LPSIZE dimensions));
<a name="l04164"></a>04164 _TX_DLLIMPORT     (<span class="stringliteral">&quot;User32&quot;</span>,   <span class="keywordtype">int</span>,      DrawTextA,              (HDC dc, LPCTSTR text, <span class="keywordtype">int</span> length, LPRECT rect, UINT format));
<a name="l04165"></a>04165 _TX_DLLIMPORT     (<span class="stringliteral">&quot;User32&quot;</span>,   HANDLE,   LoadImageA,             (HINSTANCE inst, LPCTSTR name, UINT type,
<a name="l04166"></a>04166                                                                   <span class="keywordtype">int</span> sizex, <span class="keywordtype">int</span> sizey, UINT mode));
<a name="l04167"></a>04167 _TX_DLLIMPORT     (<span class="stringliteral">&quot;WinMM&quot;</span>,    BOOL,     PlaySound,              (LPCSTR sound, HMODULE mod, DWORD mode));
<a name="l04168"></a>04168 
<a name="l04169"></a>04169 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MSImg32&quot;</span>,  BOOL,     TransparentBlt,         (HDC dest, <span class="keywordtype">int</span> destX, <span class="keywordtype">int</span> destY, <span class="keywordtype">int</span> destWidth, <span class="keywordtype">int</span> destHeight,
<a name="l04170"></a>04170                                                                   HDC src,  <span class="keywordtype">int</span> srcX,  <span class="keywordtype">int</span> srcY,  <span class="keywordtype">int</span> srcWidth,  <span class="keywordtype">int</span> srcHeight,
<a name="l04171"></a>04171                                                                   UINT transparentColor));
<a name="l04172"></a>04172 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MSImg32&quot;</span>,  BOOL,     AlphaBlend,             (HDC dest, <span class="keywordtype">int</span> destX, <span class="keywordtype">int</span> destY, <span class="keywordtype">int</span> destWidth, <span class="keywordtype">int</span> destHeight,
<a name="l04173"></a>04173                                                                   HDC src,  <span class="keywordtype">int</span> srcX,  <span class="keywordtype">int</span> srcY,  <span class="keywordtype">int</span> srcWidth,  <span class="keywordtype">int</span> srcHeight,
<a name="l04174"></a>04174                                                                   BLENDFUNCTION blending));
<a name="l04175"></a>04175 
<a name="l04176"></a>04176 _TX_DLLIMPORT     (<span class="stringliteral">&quot;Kernel32&quot;</span>, HWND,     GetConsoleWindow,       (<span class="keywordtype">void</span>));
<a name="l04177"></a>04177 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, BOOL,     SetConsoleFont,         (HANDLE console, DWORD fontIndex));
<a name="l04178"></a>04178 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, BOOL,     GetConsoleFontInfo,     (HANDLE console, BOOL fullScreen, DWORD numFonts, CONSOLE_FONT_INFO* fontsInfo));
<a name="l04179"></a>04179 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, DWORD,    GetNumberOfConsoleFonts,(<span class="keywordtype">void</span>));
<a name="l04180"></a>04180 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, BOOL,     GetCurrentConsoleFont,  (HANDLE console, BOOL maxWnd, CONSOLE_FONT_INFO*   curFont));
<a name="l04181"></a>04181 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, BOOL,     GetCurrentConsoleFontEx,(HANDLE console, BOOL maxWnd, CONSOLE_FONT_INFOEX* curFont));
<a name="l04182"></a>04182 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, BOOL,     SetCurrentConsoleFontEx,(HANDLE console, BOOL maxWnd, CONSOLE_FONT_INFOEX* curFont));
<a name="l04183"></a>04183 
<a name="l04184"></a>04184 _TX_DLLIMPORT     (<span class="stringliteral">&quot;OLE32&quot;</span>,    HRESULT,  CoInitialize,           (<span class="keywordtype">void</span>*));
<a name="l04185"></a>04185 _TX_DLLIMPORT     (<span class="stringliteral">&quot;OLE32&quot;</span>,    HRESULT,  CoCreateInstance,       (REFCLSID clsid, LPUNKNOWN, DWORD, REFIID iid, PVOID* value));
<a name="l04186"></a>04186 _TX_DLLIMPORT     (<span class="stringliteral">&quot;OLE32&quot;</span>,    <span class="keywordtype">void</span>,     CoUninitialize,         (<span class="keywordtype">void</span>));
<a name="l04187"></a>04187 
<a name="l04188"></a>04188 _TX_DLLIMPORT     (<span class="stringliteral">&quot;Shell32&quot;</span>,  HINSTANCE,ShellExecuteA,          (HWND wnd, LPCTSTR operation, LPCTSTR file,
<a name="l04189"></a>04189                                                                   LPCTSTR parameters, LPCTSTR directory, INT showCmd));
<a name="l04190"></a>04190 
<a name="l04191"></a>04191 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;NTDLL&quot;</span>,    <span class="keywordtype">char</span>*,    wine_get_version,       ());
<a name="l04192"></a>04192 
<a name="l04193"></a>04193 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04194"></a>04194 <span class="comment">// Another issue, some of structs, consts and interfaces aren&#39;t defined in MinGW some ealry headers.</span>
<a name="l04195"></a>04195 <span class="comment">// Copied from Windows SDK 7.0a.</span>
<a name="l04196"></a>04196 
<a name="l04197"></a>04197 <span class="preprocessor">#ifndef AC_SRC_ALPHA</span>
<a name="l04198"></a>04198 <span class="preprocessor"></span><span class="preprocessor">#define AC_SRC_ALPHA          0x01</span>
<a name="l04199"></a>04199 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04200"></a>04200 <span class="preprocessor"></span>
<a name="l04201"></a>04201 <span class="preprocessor">#ifndef SMTO_ERRORONEXIT</span>
<a name="l04202"></a>04202 <span class="preprocessor"></span><span class="preprocessor">#define SMTO_ERRORONEXIT      0x0020</span>
<a name="l04203"></a>04203 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04204"></a>04204 <span class="preprocessor"></span>
<a name="l04205"></a>04205 <span class="preprocessor">#ifndef NT_CONSOLE_PROPS_SIG</span>
<a name="l04206"></a>04206 <span class="preprocessor"></span><span class="preprocessor">#define NT_CONSOLE_PROPS_SIG  0xA0000002</span>
<a name="l04207"></a>04207 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04208"></a>04208 <span class="preprocessor"></span>
<a name="l04209"></a>04209 <span class="preprocessor">#ifndef NIIF_INFO</span>
<a name="l04210"></a>04210 <span class="preprocessor"></span><span class="preprocessor">#define NIIF_INFO             0x00000001</span>
<a name="l04211"></a>04211 <span class="preprocessor"></span><span class="preprocessor">#define NIIF_WARNING          0x00000002</span>
<a name="l04212"></a>04212 <span class="preprocessor"></span><span class="preprocessor">#define NIIF_ERROR            0x00000003</span>
<a name="l04213"></a>04213 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04214"></a>04214 <span class="preprocessor"></span>
<a name="l04215"></a>04215 <span class="preprocessor">#ifndef NIF_INFO</span>
<a name="l04216"></a>04216 <span class="preprocessor"></span><span class="preprocessor">#define NIF_STATE             0x00000008</span>
<a name="l04217"></a>04217 <span class="preprocessor"></span><span class="preprocessor">#define NIF_INFO              0x00000010</span>
<a name="l04218"></a>04218 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04219"></a>04219 <span class="preprocessor"></span>
<a name="l04220"></a>04220 <span class="preprocessor">#pragma pack (push, 1)</span>
<a name="l04221"></a>04221 <span class="preprocessor"></span>
<a name="l04222"></a>04222 <span class="preprocessor">#ifdef _MSC_VER_6</span>
<a name="l04223"></a>04223 <span class="preprocessor"></span>
<a name="l04224"></a>04224 <span class="keyword">struct </span>CONSOLE_FONT_INFO
<a name="l04225"></a>04225     {
<a name="l04226"></a>04226     DWORD  nFont;
<a name="l04227"></a>04227     COORD  dwFontSize;
<a name="l04228"></a>04228     };
<a name="l04229"></a>04229 
<a name="l04230"></a>04230 <span class="keyword">struct </span>NOTIFYICONDATA
<a name="l04231"></a>04231     {
<a name="l04232"></a>04232     DWORD cbSize;
<a name="l04233"></a>04233     HWND  hWnd;
<a name="l04234"></a>04234     UINT  uID;
<a name="l04235"></a>04235     UINT  uFlags;
<a name="l04236"></a>04236     UINT  uCallbackMessage;
<a name="l04237"></a>04237     HICON hIcon;
<a name="l04238"></a>04238 
<a name="l04239"></a>04239     CHAR  szTip[128];
<a name="l04240"></a>04240     DWORD dwState;
<a name="l04241"></a>04241     DWORD dwStateMask;
<a name="l04242"></a>04242     CHAR  szInfo[256];
<a name="l04243"></a>04243 
<a name="l04244"></a>04244     <span class="keyword">union </span>{
<a name="l04245"></a>04245         UINT uTimeout;
<a name="l04246"></a>04246         UINT uVersion;
<a name="l04247"></a>04247         } u;
<a name="l04248"></a>04248 
<a name="l04249"></a>04249     CHAR  szInfoTitle[64];
<a name="l04250"></a>04250     DWORD dwInfoFlags;
<a name="l04251"></a>04251     };
<a name="l04252"></a>04252 
<a name="l04253"></a>04253 <span class="preprocessor">#endif</span>
<a name="l04254"></a>04254 <span class="preprocessor"></span>
<a name="l04255"></a>04255 <span class="keyword">struct </span>CONSOLE_FONT_INFOEX
<a name="l04256"></a>04256     {
<a name="l04257"></a>04257     ULONG cbSize;
<a name="l04258"></a>04258     DWORD nFont;
<a name="l04259"></a>04259     COORD dwFontSize;
<a name="l04260"></a>04260     UINT  FontFamily;
<a name="l04261"></a>04261     UINT  FontWeight;
<a name="l04262"></a>04262     WCHAR FaceName[LF_FACESIZE];
<a name="l04263"></a>04263     };
<a name="l04264"></a>04264 
<a name="l04265"></a>04265 <span class="keyword">struct </span>DATABLOCK_HEADER
<a name="l04266"></a>04266     {
<a name="l04267"></a>04267     DWORD cbSize;
<a name="l04268"></a>04268     DWORD dwSignature;
<a name="l04269"></a>04269     };
<a name="l04270"></a>04270 
<a name="l04271"></a>04271 <span class="keyword">struct </span>NT_CONSOLE_PROPS
<a name="l04272"></a>04272     {
<a name="l04273"></a>04273     DATABLOCK_HEADER dbh;
<a name="l04274"></a>04274 
<a name="l04275"></a>04275     WORD  wFillAttribute;
<a name="l04276"></a>04276     WORD  wPopupFillAttribute;
<a name="l04277"></a>04277     COORD dwScreenBufferSize;
<a name="l04278"></a>04278     COORD dwWindowSize;
<a name="l04279"></a>04279     COORD dwWindowOrigin;
<a name="l04280"></a>04280     DWORD nFont;
<a name="l04281"></a>04281     DWORD nInputBufferSize;
<a name="l04282"></a>04282     COORD dwFontSize;
<a name="l04283"></a>04283     UINT  uFontFamily;
<a name="l04284"></a>04284     UINT  uFontWeight;
<a name="l04285"></a>04285     WCHAR FaceName[LF_FACESIZE];
<a name="l04286"></a>04286     UINT  uCursorSize;
<a name="l04287"></a>04287     BOOL  bFullScreen;
<a name="l04288"></a>04288     BOOL  bQuickEdit;
<a name="l04289"></a>04289     BOOL  bInsertMode;
<a name="l04290"></a>04290     BOOL  bAutoPosition;
<a name="l04291"></a>04291     UINT  uHistoryBufferSize;
<a name="l04292"></a>04292     UINT  uNumberOfHistoryBuffers;
<a name="l04293"></a>04293     BOOL  bHistoryNoDup;
<a name="l04294"></a>04294 
<a name="l04295"></a>04295     COLORREF ColorTable[16];
<a name="l04296"></a>04296     };
<a name="l04297"></a>04297 
<a name="l04298"></a>04298 <span class="preprocessor">#pragma pack (pop)</span>
<a name="l04299"></a>04299 <span class="preprocessor"></span>
<a name="l04300"></a>04300 <span class="preprocessor">#undef  INTERFACE</span>
<a name="l04301"></a>04301 <span class="preprocessor"></span><span class="preprocessor">#define INTERFACE IShellLinkDataList</span>
<a name="l04302"></a>04302 <span class="preprocessor"></span>
<a name="l04303"></a>04303 DECLARE_INTERFACE_ (IShellLinkDataList, IUnknown)
<a name="l04304"></a>04304     {
<a name="l04305"></a>04305     <span class="comment">// *** IUnknown methods ***</span>
<a name="l04306"></a>04306     STDMETHOD (QueryInterface)  (THIS_ REFIID iid, <span class="keywordtype">void</span>** value)    PURE;
<a name="l04307"></a>04307     STDMETHOD_(ULONG, AddRef)   (THIS)                              PURE;
<a name="l04308"></a>04308     STDMETHOD_(ULONG, Release)  (THIS)                              PURE;
<a name="l04309"></a>04309 
<a name="l04310"></a>04310     <span class="comment">// *** IShellLinkDataList methods ***</span>
<a name="l04311"></a>04311     STDMETHOD (AddDataBlock)    (THIS_ <span class="keywordtype">void</span>* dataBlock)             PURE;
<a name="l04312"></a>04312     STDMETHOD (CopyDataBlock)   (THIS_ DWORD sig, <span class="keywordtype">void</span>** dataBlock) PURE;
<a name="l04313"></a>04313     STDMETHOD (RemoveDataBlock) (THIS_ DWORD sig)                   PURE;
<a name="l04314"></a>04314     STDMETHOD (GetFlags)        (THIS_ DWORD* flags)                PURE;
<a name="l04315"></a>04315     STDMETHOD (SetFlags)        (THIS_ DWORD  flags)                PURE;
<a name="l04316"></a>04316 
<a name="l04317"></a>04317     <span class="keyword">private</span>:
<a name="l04318"></a>04318     <span class="keyword">virtual</span> ~IShellLinkDataList();
<a name="l04319"></a>04319     };
<a name="l04320"></a>04320 
<a name="l04321"></a>04321 <span class="keyword">const</span> GUID IID_IShellLinkDataList = {0x45e2b4ae, 0xb1c3, 0x11d0, {0xb9,0x2f,0x00,0xa0,0xc9,0x03,0x12,0xe1}};
<a name="l04322"></a>04322 <span class="keyword">const</span> GUID IID_IPersistFile       = {0x0000010b, 0x0000, 0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
<a name="l04323"></a>04323 
<a name="l04324"></a>04324 <span class="preprocessor">#undef  INTERFACE</span>
<a name="l04325"></a>04325 <span class="preprocessor"></span>
<a name="l04326"></a>04326 }  <span class="comment">// namespace Win32</span>
<a name="l04327"></a>04327 <span class="keyword">using namespace </span>Win32;
<a name="l04328"></a>04328 
<a name="l04329"></a>04329 <span class="comment">//} &lt;/tears&gt;</span>
<a name="l04330"></a>04330 
<a name="l04332"></a>04332 <span class="comment">//}</span>
<a name="l04333"></a>04333 <span class="comment">//============================================================================================</span>
<a name="l04334"></a>04334 
<a name="l04335"></a>04335 <span class="comment">//============================================================================================</span>
<a name="l04336"></a>04336 <span class="comment">//{          [Internal] Global data</span>
<a name="l04338"></a>04338 <span class="comment"></span><span class="comment">//           Не упакованы в структуру или класс, для того, чтобы это сделали Вы сами :)</span>
<a name="l04339"></a>04339 <span class="comment">//============================================================================================</span>
<a name="l04341"></a>04341 <span class="comment"></span>
<a name="l04342"></a>04342 <span class="keywordtype">unsigned</span>         _txMainThreadId        = 0;      <span class="comment">// ID потока, где выполняется main()</span>
<a name="l04343"></a>04343 
<a name="l04344"></a>04344 HANDLE           _txCanvas_Thread       = NULL;   <span class="comment">// Поток, владеющий окном холста TXLib</span>
<a name="l04345"></a>04345 <span class="keywordtype">unsigned</span>         _txCanvas_ThreadId     = 0;      <span class="comment">// ID этого потока</span>
<a name="l04346"></a>04346 
<a name="l04347"></a>04347 HWND             _txCanvas_Window       = NULL;   <span class="comment">// Дескриптор окна холста TXLib</span>
<a name="l04348"></a>04348 
<a name="l04349"></a>04349 HDC              _txCanvas_BackBuf[2]   = {NULL,  <span class="comment">// [0] Main TXLib memory DC, where user picture lies</span>
<a name="l04350"></a>04350                                            NULL}; <span class="comment">// [1] Intermediate buffer for console text, also</span>
<a name="l04351"></a>04351                                                   <span class="comment">//     used in WM_PAINT handling when user frozen</span>
<a name="l04352"></a>04352                                                   <span class="comment">//     screen auto-update by txBegin()... call.</span>
<a name="l04353"></a>04353 
<a name="l04354"></a>04354 CRITICAL_SECTION _txCanvas_LockBackBuf  = {0,-1}; <span class="comment">// Prevent simultaneous access to back buffer,</span>
<a name="l04355"></a>04355                                                   <span class="comment">//   see txLock()/txUnlock()</span>
<a name="l04356"></a>04356 
<a name="l04357"></a>04357 UINT             _txCanvas_RefreshTimer = 0;      <span class="comment">// Timer to redraw TXLib window</span>
<a name="l04358"></a>04358 
<a name="l04359"></a>04359 <span class="keywordtype">int</span>              _txCanvas_RefreshLock  = 0;      <span class="comment">// Blocks automatic on-timer canvas update,</span>
<a name="l04360"></a>04360                                                   <span class="comment">//   see txBegin()/txEnd()</span>
<a name="l04361"></a>04361 
<a name="l04362"></a>04362 std::vector&lt;HDC&gt; _txCanvas_UserDCs;
<a name="l04363"></a>04363 
<a name="l04364"></a>04364 <span class="keywordtype">bool</span>             _txConsole_IsBlinking  = <span class="keyword">true</span>;   <span class="comment">// To blink or not to blink, that is the question.</span>
<a name="l04365"></a>04365 <span class="keywordtype">bool</span>             _txConsole_Active      = <span class="keyword">true</span>;
<a name="l04366"></a>04366 RECT             _txConsole_Pos         = {0};
<a name="l04367"></a>04367 
<a name="l04368"></a>04368 <span class="keywordtype">bool</span>             _txRunning             = <span class="keyword">false</span>;  <span class="comment">// Indicate that main() is still running</span>
<a name="l04369"></a>04369 <span class="keywordtype">bool</span>             _txExit                = <span class="keyword">false</span>;  <span class="comment">// Indicate that exit() is active</span>
<a name="l04370"></a>04370 
<a name="l04371"></a>04371 POINT            _txMousePos            = {0};
<a name="l04372"></a>04372 <span class="keywordtype">int</span>              _txMouseButtons        =  0;
<a name="l04373"></a>04373 
<a name="l04374"></a>04374 WNDPROC          _txAltWndProc          = NULL;   <span class="comment">// Альтернативная оконная функция. См. txSetWindowHandler().</span>
<a name="l04375"></a>04375 
<a name="l04376"></a>04376 <span class="keyword">const</span> <span class="keywordtype">char</span>*      _txFile                = NULL;
<a name="l04377"></a>04377 <span class="keywordtype">int</span>              _txLine                = 0;
<a name="l04378"></a>04378 <span class="keyword">const</span> <span class="keywordtype">char</span>*      _txFunc                = NULL;
<a name="l04379"></a>04379 <span class="keywordtype">int</span>              _txInTX                = 0;
<a name="l04380"></a>04380 
<a name="l04381"></a>04381 <span class="keywordtype">int</span>              _txStaticInitialized   = <a class="code" href="a00034.htm#gaab281ee20ea6be5eae34d0e15bf03dcf" title="Запрет статической инициализации TXLib.">_TX_NOINIT</a> || _txInitialize();
<a name="l04382"></a>04382 
<a name="l04384"></a>04384 <span class="comment">//}</span>
<a name="l04385"></a>04385 <span class="comment">//============================================================================================</span>
<a name="l04386"></a>04386 
<a name="l04387"></a>04387 <span class="comment">//============================================================================================</span>
<a name="l04388"></a>04388 <span class="comment">//{          TXLib engine init/check/cleanup</span>
<a name="l04390"></a>04390 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l04392"></a>04392 <span class="comment"></span>
<a name="l04393"></a>04393 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04394"></a>04394 <span class="comment">//{          Static initialization</span>
<a name="l04395"></a>04395 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04396"></a>04396 
<a name="l04397"></a>04397 <span class="keywordtype">int</span> _txInitialize()
<a name="l04398"></a>04398     {
<a name="l04399"></a>04399 <span class="preprocessor">    #ifndef NDEBUG</span>
<a name="l04400"></a>04400 <span class="preprocessor"></span>    OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l04401"></a>04401     OutputDebugString (<a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> _TX_NAME <span class="stringliteral">&quot;- The Dumb Artist Library, &quot;</span> _TX_AUTHOR <span class="stringliteral">&quot;: &quot;</span>
<a name="l04402"></a>04402                        <span class="stringliteral">&quot;\&quot;&quot;</span> __FILE__ <span class="stringliteral">&quot;\&quot;&quot;</span> _TX_NAME
<a name="l04403"></a>04403                        <span class="stringliteral">&quot;compiled &quot;</span> __DATE__ <span class="stringliteral">&quot; &quot;</span> __TIME__ <span class="stringliteral">&quot;, &quot;</span> <a class="code" href="a00032.htm#ga3e287c38947fea870d01588fbd2a5fc9" title="Имя режима сборки">_TX_BUILDMODE</a> <span class="stringliteral">&quot; mode\n&quot;</span>);
<a name="l04404"></a>04404     OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l04405"></a>04405 <span class="preprocessor">    #endif</span>
<a name="l04406"></a>04406 <span class="preprocessor"></span>
<a name="l04407"></a>04407 $1  _txMainThreadId = GetCurrentThreadId();
<a name="l04408"></a>04408 
<a name="l04409"></a>04409 $   _txOnSignal();
<a name="l04410"></a>04410 $   SetErrorMode (SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX);
<a name="l04411"></a>04411 
<a name="l04412"></a>04412 <span class="preprocessor">    #ifndef _MSC_VER_6</span>
<a name="l04413"></a>04413 <span class="preprocessor"></span>$   std::set_unexpected (_txOnUnexpected);
<a name="l04414"></a>04414 $   std::set_terminate  (_txOnTerminate);
<a name="l04415"></a>04415 <span class="preprocessor">    #endif</span>
<a name="l04416"></a>04416 <span class="preprocessor"></span>
<a name="l04417"></a>04417 $   HWND console = _txConsole_Attach();
<a name="l04418"></a>04418 $   <span class="keywordflow">if</span> (console) SetWindowTextA (console, <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keyword">false</span>));
<a name="l04419"></a>04419 
<a name="l04420"></a>04420 $   InitializeCriticalSection (&amp;_txCanvas_LockBackBuf);
<a name="l04421"></a>04421 
<a name="l04422"></a>04422 $   _txCanvas_UserDCs.reserve (<a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>);
<a name="l04423"></a>04423 
<a name="l04424"></a>04424 $   atexit (_txCleanup);
<a name="l04425"></a>04425 
<a name="l04426"></a>04426 $   (void) Win32::SetDIBitsToDevice;    <span class="comment">// Just for warning &quot;defined but not used&quot; suppression</span>
<a name="l04427"></a>04427 $   (void) Win32::RoundRect;
<a name="l04428"></a>04428 $   (void) Win32::CreateRectRgn;
<a name="l04429"></a>04429 $   (void) Win32::GetBitmapDimensionEx;
<a name="l04430"></a>04430 $   (void) Win32::GetConsoleFontInfo;
<a name="l04431"></a>04431 
<a name="l04432"></a>04432 $   <span class="keywordflow">return</span> 1;
<a name="l04433"></a>04433     }
<a name="l04434"></a>04434 
<a name="l04435"></a>04435 <span class="comment">//}</span>
<a name="l04436"></a>04436 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04437"></a>04437 
<a name="l04438"></a>04438 HWND <a class="code" href="a00029.htm#gaca799138bbc60568976aef93fcb3bb2b" title="Создание окна рисования">txCreateWindow</a> (<span class="keywordtype">int</span> sizeX, <span class="keywordtype">int</span> sizeY, <span class="keywordtype">unsigned</span> style <span class="comment">/*= WS_SYSMENU | 1*/</span>)
<a name="l04439"></a>04439     {
<a name="l04440"></a>04440 $1  <span class="keywordflow">if</span> (<a class="code" href="a00029.htm#ga6971b22d5486b242e20a8dea1f21422a" title="Проверка правильности работы библиотеки">txOK</a>()) <span class="keywordflow">return</span> 0;
<a name="l04441"></a>04441 
<a name="l04442"></a>04442 $   <span class="keywordflow">if</span> (!_txStaticInitialized) _txStaticInitialized = _txInitialize();
<a name="l04443"></a>04443 
<a name="l04444"></a>04444 $   _txRunning = <span class="keyword">false</span>;
<a name="l04445"></a>04445 
<a name="l04446"></a>04446 $   <span class="keywordflow">if</span> (style &amp; 1) { sizeX *= -1; sizeY *= -1; }
<a name="l04447"></a>04447 
<a name="l04448"></a>04448 $   <span class="keyword">static</span> CREATESTRUCT from = { NULL, NULL, NULL, NULL,
<a name="l04449"></a>04449                                  sizeY, sizeX, CW_USEDEFAULT, CW_USEDEFAULT,
<a name="l04450"></a>04450                                  style &amp; ~1, NULL, NULL, 0 };
<a name="l04451"></a>04451 
<a name="l04452"></a>04452     <span class="comment">// In Thread, where REAL creation lies...</span>
<a name="l04453"></a>04453 
<a name="l04454"></a>04454 <span class="preprocessor">    #if !( defined (_MSC_VER) &amp;&amp; (_MSC_VER &lt; 1400) &amp;&amp; !defined (_MT) )</span>
<a name="l04455"></a>04455 <span class="preprocessor"></span>$   <span class="keywordtype">unsigned</span> <span class="keywordtype">id</span> = 0;
<a name="l04456"></a>04456 $   _txCanvas_Thread = (HANDLE) _beginthreadex (NULL, 0,                        _txCanvas_ThreadProc, &amp;from, 0, &amp;<span class="keywordtype">id</span>);
<a name="l04457"></a>04457 <span class="preprocessor">    #else</span>
<a name="l04458"></a>04458 <span class="preprocessor"></span>$   DWORD    <span class="keywordtype">id</span> = 0;
<a name="l04459"></a>04459 $   _txCanvas_Thread =          CreateThread   (NULL, 0, (PTHREAD_START_ROUTINE)_txCanvas_ThreadProc, &amp;from, 0, &amp;<span class="keywordtype">id</span>);
<a name="l04460"></a>04460 <span class="preprocessor">    #endif</span>
<a name="l04461"></a>04461 <span class="preprocessor"></span>
<a name="l04462"></a>04462 $   <span class="keywordflow">if</span> (!_txCanvas_Thread) <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Cannot start canvas thread.&quot;</span>), (HWND)NULL;
<a name="l04463"></a>04463 
<a name="l04464"></a>04464 $   _txWaitFor (_txRunning);
<a name="l04465"></a>04465 $   <span class="keywordflow">if</span> (!_txRunning)       <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Cannot create canvas window.&quot;</span>),(HWND)NULL;
<a name="l04466"></a>04466 
<a name="l04467"></a>04467 $   <span class="keywordflow">if</span> (!<a class="code" href="a00029.htm#ga6971b22d5486b242e20a8dea1f21422a" title="Проверка правильности работы библиотеки">txOK</a>())           <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Canvas window is not OK.&quot;</span>),    (HWND)NULL;
<a name="l04468"></a>04468 
<a name="l04469"></a>04469 $   errno = _doserrno = 0;
<a name="l04470"></a>04470 $   SetLastError (0);
<a name="l04471"></a>04471 
<a name="l04472"></a>04472 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>();
<a name="l04473"></a>04473     }
<a name="l04474"></a>04474 
<a name="l04475"></a>04475 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04476"></a>04476 
<a name="l04477"></a>04477 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gae05b7bb52b782b86796201f9f96d0f58" title="Установка параметров рисования по умолчанию.">txSetDefaults</a>()
<a name="l04478"></a>04478     {
<a name="l04479"></a>04479 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l04480"></a>04480 
<a name="l04481"></a>04481 $   <a class="code" href="a00029.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a> (<span class="keyword">false</span>);
<a name="l04482"></a>04482 $   <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l04483"></a>04483 
<a name="l04484"></a>04484 <span class="comment">//{ Set defaults for graphics layer</span>
<a name="l04485"></a>04485 
<a name="l04486"></a>04486 $   RECT r = {0};
<a name="l04487"></a>04487 
<a name="l04488"></a>04488 $   GetClientRect (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), &amp;r) <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l04489"></a>04489 $   SIZE szCanvas = { r.right - r.left, r.bottom - r.top };
<a name="l04490"></a>04490 
<a name="l04491"></a>04491 $   GetClientRect (Win32::GetConsoleWindow(), &amp;r) <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l04492"></a>04492 $   SIZE szCon    = { r.right - r.left, r.bottom - r.top };
<a name="l04493"></a>04493 
<a name="l04494"></a>04494 $   _txBuffer_Select (Win32::GetStockObject (WHITE_PEN),   <a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>()) <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l04495"></a>04495 $   _txBuffer_Select (Win32::GetStockObject (WHITE_BRUSH), <a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>()) <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l04496"></a>04496 $   _txBuffer_Select (Win32::CreateFont (szCon.cy/25, szCon.cx/80, 0, 0,
<a name="l04497"></a>04497                                          FW_REGULAR, FALSE, FALSE, FALSE, RUSSIAN_CHARSET,
<a name="l04498"></a>04498                                          OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
<a name="l04499"></a>04499                                          DEFAULT_QUALITY, DEFAULT_PITCH, <a class="code" href="a00034.htm#gab2cb9c8f646335d3491bc7dc4fb93d3f" title="Шрифт консоли">_TX_CONSOLE_FONT</a>),
<a name="l04500"></a>04500                       <a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>()) asserted;
<a name="l04501"></a>04501 
<a name="l04502"></a>04502 $   (Win32::SetTextColor (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>) != CLR_INVALID) asserted;
<a name="l04503"></a>04503 $    Win32::SetBkMode    (txDC(), TRANSPARENT)              asserted;
<a name="l04504"></a>04504 
<a name="l04505"></a>04505 $    Win32::SetROP2      (txDC(), R2_COPYPEN)               asserted;
<a name="l04506"></a>04506 
<a name="l04507"></a>04507 <span class="comment">//}</span>
<a name="l04508"></a>04508 
<a name="l04509"></a>04509 <span class="comment">//{ Set defaults for console  layer</span>
<a name="l04510"></a>04510 
<a name="l04511"></a>04511 $   HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l04512"></a>04512 
<a name="l04513"></a>04513 $   CONSOLE_SCREEN_BUFFER_INFO con = {{80, 25}, {0}, 0, {0, 0, 80-1, 25-1}, {80, 25}};
<a name="l04514"></a>04514 $   GetConsoleScreenBufferInfo (out, &amp;con);
<a name="l04515"></a>04515 
<a name="l04516"></a>04516 $   SIZE szChr  = { (short) (con.srWindow.Right  - con.srWindow.Left + 1),
<a name="l04517"></a>04517                     (short) (con.srWindow.Bottom - con.srWindow.Top  + 1) };
<a name="l04518"></a>04518 
<a name="l04519"></a>04519 $   SIZE szFont = { (short) ((1.0 * szCon.cx / szChr.cx) / (1.0 * szCon.cx / szCanvas.cx)),
<a name="l04520"></a>04520                     (short) ((1.0 * szCon.cy / szChr.cy) / (1.0 * szCon.cy / szCanvas.cy)) };
<a name="l04521"></a>04521 
<a name="l04522"></a>04522 $   _txBuffer_Select (<a class="code" href="a00029.htm#gaf147a93f96fadeb7a6a0b6d7f1320bcb" title="Ищет шрифт по его названию.">txFontExist</a> (<a class="code" href="a00034.htm#gab2cb9c8f646335d3491bc7dc4fb93d3f" title="Шрифт консоли">_TX_CONSOLE_FONT</a>)?
<a name="l04523"></a>04523                           Win32::CreateFont (szFont.cy, szFont.cx, 0, 0,
<a name="l04524"></a>04524                                              FW_REGULAR, FALSE, FALSE, FALSE, RUSSIAN_CHARSET,
<a name="l04525"></a>04525                                              OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
<a name="l04526"></a>04526                                              DEFAULT_QUALITY, FIXED_PITCH, <a class="code" href="a00034.htm#gab2cb9c8f646335d3491bc7dc4fb93d3f" title="Шрифт консоли">_TX_CONSOLE_FONT</a>)
<a name="l04527"></a>04527                           :
<a name="l04528"></a>04528                           Win32::GetStockObject (SYSTEM_FIXED_FONT),
<a name="l04529"></a>04529                       _txCanvas_BackBuf[1]) <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l04530"></a>04530 <span class="comment">//}</span>
<a name="l04531"></a>04531 
<a name="l04532"></a>04532 <span class="comment">//{ Scroll the console for text to go above top of window and don&#39;t mix with graphics</span>
<a name="l04533"></a>04533 
<a name="l04534"></a>04534 $   if (con.dwCursorPosition.X) _putch (&#39;\n&#39;);
<a name="l04535"></a>04535 
<a name="l04536"></a>04536 $   <span class="keywordtype">short</span> delta = (<span class="keywordtype">short</span>) (con.dwCursorPosition.Y - con.srWindow.Top);
<a name="l04537"></a>04537 
<a name="l04538"></a>04538 $   con.srWindow.Top    = (<span class="keywordtype">short</span>) (con.srWindow.Top    + delta);
<a name="l04539"></a>04539 $   con.srWindow.Bottom = (<span class="keywordtype">short</span>) (con.srWindow.Bottom + delta);
<a name="l04540"></a>04540 
<a name="l04541"></a>04541 $   SMALL_RECT src  = {0, 0, (short) (con.dwSize.X - 1), (short) (con.dwSize.Y - 1) };
<a name="l04542"></a>04542 $   CHAR_INFO  fill = {{<span class="charliteral">&#39; &#39;</span>}, 0x07};        <span class="comment">// Fill with spaces, light-gray on black</span>
<a name="l04543"></a>04543 $   COORD      dest = {0, (short) -delta};  <span class="comment">// New UL-corner of src, scroll up</span>
<a name="l04544"></a>04544 
<a name="l04545"></a>04545 $   con.dwCursorPosition.X = 0;
<a name="l04546"></a>04546 $   con.dwCursorPosition.Y = (short) (con.dwCursorPosition.Y - delta);
<a name="l04547"></a>04547 
<a name="l04548"></a>04548 $   (con.srWindow.Bottom &lt; con.dwSize.Y &amp;&amp;                        <span class="comment">// Move the &quot;window&quot;</span>
<a name="l04549"></a>04549      SetConsoleWindowInfo      (out, <span class="keyword">true</span>, &amp;con.srWindow))
<a name="l04550"></a>04550     ||
<a name="l04551"></a>04551     (ScrollConsoleScreenBuffer (out, &amp;src, NULL, dest, &amp;fill),    <span class="comment">// Or scroll the buffer</span>
<a name="l04552"></a>04552      SetConsoleCursorPosition  (out, con.dwCursorPosition));
<a name="l04553"></a>04553 <span class="comment">//}</span>
<a name="l04554"></a>04554 
<a name="l04555"></a>04555 $   <a class="code" href="a00029.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a> (<span class="keyword">true</span>);
<a name="l04556"></a>04556 
<a name="l04557"></a>04557     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l04558"></a>04558     }
<a name="l04559"></a>04559 
<a name="l04560"></a>04560 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04561"></a>04561 
<a name="l04562"></a>04562 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga6971b22d5486b242e20a8dea1f21422a" title="Проверка правильности работы библиотеки">txOK</a>()
<a name="l04563"></a>04563     {
<a name="l04564"></a>04564 $1  <span class="keywordflow">return</span> _txCanvas_OK();
<a name="l04565"></a>04565     }
<a name="l04566"></a>04566 
<a name="l04567"></a>04567 <span class="comment">//-----------------------------------------------------------------------------</span>
<a name="l04568"></a>04568 
<a name="l04569"></a>04569 <span class="keywordtype">void</span> _txCleanup()
<a name="l04570"></a>04570     {
<a name="l04571"></a>04571 $1  <span class="keywordflow">if</span> (!_txStaticInitialized) <span class="keywordflow">return</span>;
<a name="l04572"></a>04572     <span class="keywordflow">else</span> _txStaticInitialized = <span class="keyword">false</span>;
<a name="l04573"></a>04573 
<a name="l04574"></a>04574 $   _txRunning = <span class="keyword">false</span>;
<a name="l04575"></a>04575 $   _txConsole_IsBlinking = <span class="keyword">false</span>;
<a name="l04576"></a>04576 
<a name="l04577"></a>04577 $   HWND canvas  = <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>();
<a name="l04578"></a>04578 $   HWND console = Win32::GetConsoleWindow();
<a name="l04579"></a>04579 
<a name="l04580"></a>04580 $   HWND wnd     = (canvas)? canvas : console;
<a name="l04581"></a>04581 $   <span class="keywordtype">int</span> isMaster = (canvas)? (GetWindowLong (canvas, GWL_STYLE) &amp; WS_SYSMENU) : <span class="keyword">true</span>;
<a name="l04582"></a>04582 
<a name="l04583"></a>04583 $   <span class="keyword">static</span> <span class="keywordtype">char</span> title [<a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l04584"></a>04584 $   <span class="keywordflow">if</span> (wnd) GetWindowText (wnd, title, <span class="keyword">sizeof</span> (title));
<a name="l04585"></a>04585 $   strncat_s (title, <span class="stringliteral">&quot; [ЗАВЕРШЕНО]&quot;</span>, <span class="keyword">sizeof</span> (title) - 1);
<a name="l04586"></a>04586 $   <span class="keywordflow">if</span> (wnd) SetWindowText (wnd, title);
<a name="l04587"></a>04587 
<a name="l04588"></a>04588 $   DWORD parent = 0;
<a name="l04589"></a>04589 $   <span class="keywordtype">bool</span> waitableParent = _txIsParentWaitable (&amp;parent);
<a name="l04590"></a>04590 
<a name="l04591"></a>04591 $   <span class="keywordflow">if</span> ((canvas || !waitableParent) &amp;&amp; isMaster &amp;&amp; !_txExit &amp;&amp;
<a name="l04592"></a>04592         GetCurrentThreadId() == _txMainThreadId)
<a name="l04593"></a>04593         {
<a name="l04594"></a>04594 $       _txPauseBeforeTermination (canvas);
<a name="l04595"></a>04595         }
<a name="l04596"></a>04596 
<a name="l04597"></a>04597 $   <span class="keywordflow">if</span> (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>())
<a name="l04598"></a>04598         { $ SendNotifyMessage (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), WM_DESTROY, 0, 0); }
<a name="l04599"></a>04599 
<a name="l04600"></a>04600 $   _txWaitFor (!<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>());
<a name="l04601"></a>04601 
<a name="l04602"></a>04602 $   <span class="keywordflow">if</span> (!<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>())
<a name="l04603"></a>04603         { $ DeleteCriticalSection (&amp;_txCanvas_LockBackBuf); _txCanvas_LockBackBuf = <a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (CRITICAL_SECTION); }
<a name="l04604"></a>04604 
<a name="l04605"></a>04605 $   <span class="keywordflow">if</span> (_txCanvas_Thread)
<a name="l04606"></a>04606         { $ CloseHandle (_txCanvas_Thread) asserted; _txCanvas_Thread = NULL; }
<a name="l04607"></a>04607 
<a name="l04608"></a>04608 $   if (canvas &amp;&amp; waitableParent &amp;&amp; <a class="code" href="a00034.htm#ga9a495d013c6f08cd50220aca99ca56c2" title="Разрешать принудительное завершение вызывающих программ, ждущих нажатия клавиш после завершения TXLib...">_TX_ALLOW_KILL_PARENT</a>)
<a name="l04609"></a>04609         { $ waitableParent |= !_txKillProcess (parent); }
<a name="l04610"></a>04610 
<a name="l04611"></a>04611 $   _txConsole_Detach (!waitableParent);
<a name="l04612"></a>04612 
<a name="l04613"></a>04613 <span class="preprocessor">    #ifndef NDEBUG</span>
<a name="l04614"></a>04614 <span class="preprocessor"></span>    OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l04615"></a>04615     OutputDebugString (<a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> _TX_NAME <span class="stringliteral">&quot;- FINISHED\n&quot;</span>);
<a name="l04616"></a>04616     OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l04617"></a>04617 <span class="preprocessor">    #endif</span>
<a name="l04618"></a>04618 <span class="preprocessor"></span>    }
<a name="l04619"></a>04619 
<a name="l04620"></a>04620 <span class="comment">//-----------------------------------------------------------------------------</span>
<a name="l04621"></a>04621 
<a name="l04622"></a>04622 <span class="keywordtype">void</span> _txPauseBeforeTermination (HWND canvas)
<a name="l04623"></a>04623     {
<a name="l04624"></a>04624 $1  <a class="code" href="a00029.htm#gad993cf2d466cf203a1365e117b937d7f" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (0x07);
<a name="l04625"></a>04625 
<a name="l04626"></a>04626 $   <span class="keywordflow">while</span> (_kbhit()) (void)_getch();
<a name="l04627"></a>04627 
<a name="l04628"></a>04628 $   CONSOLE_SCREEN_BUFFER_INFO con = {{0}};
<a name="l04629"></a>04629 $   <span class="keywordtype">bool</span> kbRedir = !GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &amp;con);
<a name="l04630"></a>04630 $   <span class="keywordtype">bool</span> kbWait  = (_txGetInput() == EOF);
<a name="l04631"></a>04631 
<a name="l04632"></a>04632 $   <span class="keywordflow">if</span> (kbWait &amp;&amp; !canvas &amp;&amp; !kbRedir)
<a name="l04633"></a>04633         {
<a name="l04634"></a>04634 $       printf (<span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;[Нажмите любую клавишу для завершения]&quot;</span>);
<a name="l04635"></a>04635         }
<a name="l04636"></a>04636 
<a name="l04637"></a>04637 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; ; i++)
<a name="l04638"></a>04638         {
<a name="l04639"></a>04639 $       Sleep (<a class="code" href="a00034.htm#gafcc9bd44fad6700bbbf2ee1646d2482d" title="Интервал обновления холста (мс)">_TX_WINDOW_UPDATE_INTERVAL</a>);
<a name="l04640"></a>04640 
<a name="l04641"></a>04641         <span class="keywordflow">if</span> (!kbWait || (kbRedir &amp;&amp; !canvas)) { $ <span class="keywordflow">break</span>; }  <span class="comment">// No need to run and hide</span>
<a name="l04642"></a>04642 
<a name="l04643"></a>04643         <span class="keywordflow">if</span> (_txGetInput() != EOF)            { $ <span class="keywordflow">break</span>; }  <span class="comment">// Somebody hit something.</span>
<a name="l04644"></a>04644 
<a name="l04645"></a>04645         <span class="keywordflow">if</span> (canvas &amp;&amp; !_txCanvas_ThreadId)   { $ <span class="keywordflow">break</span>; }  <span class="comment">// There was a window, and now there is not.</span>
<a name="l04646"></a>04646 
<a name="l04647"></a>04647         <span class="keywordflow">if</span> (!(i % 100500))
<a name="l04648"></a>04648             printf (<span class="stringliteral">&quot;\r&quot;</span> <span class="stringliteral">&quot;[Нажмите же какую-нибудь клавишу для моего завершения]&quot;</span>);
<a name="l04649"></a>04649         }
<a name="l04650"></a>04650 
<a name="l04651"></a>04651 $   <span class="keywordflow">while</span> (_kbhit()) (void)_getch();
<a name="l04652"></a>04652 
<a name="l04653"></a>04653 $   printf (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l04654"></a>04654     }
<a name="l04655"></a>04655 
<a name="l04656"></a>04656 <span class="comment">//-----------------------------------------------------------------------------</span>
<a name="l04657"></a>04657 
<a name="l04658"></a>04658 <span class="keywordtype">int</span> _txGetInput()
<a name="l04659"></a>04659     {
<a name="l04660"></a>04660 $1  HANDLE con = GetStdHandle (STD_INPUT_HANDLE);
<a name="l04661"></a>04661 
<a name="l04662"></a>04662 $   DWORD nchars = 0;
<a name="l04663"></a>04663 $   <span class="keywordflow">if</span> (!GetConsoleMode (con, &amp;nchars) &amp;&amp;
<a name="l04664"></a>04664         PeekNamedPipe   (con, NULL, 0, NULL, &amp;nchars, NULL))
<a name="l04665"></a>04665         {
<a name="l04666"></a>04666 $       <span class="keywordflow">return</span> (nchars)? fgetc (stdin) : EOF;
<a name="l04667"></a>04667         }
<a name="l04668"></a>04668 
<a name="l04669"></a>04669 $   <span class="keywordflow">if</span> (_kbhit())
<a name="l04670"></a>04670         {
<a name="l04671"></a>04671 $       <span class="keywordflow">return</span> _getch();
<a name="l04672"></a>04672     }
<a name="l04673"></a>04673 
<a name="l04674"></a>04674 $   <span class="keywordflow">if</span> (fseek (stdin, 1, SEEK_CUR) != EOF)
<a name="l04675"></a>04675         {
<a name="l04676"></a>04676 $       (void) fseek (stdin, -1, SEEK_CUR);
<a name="l04677"></a>04677 $       <span class="keywordflow">return</span> fgetc (stdin);
<a name="l04678"></a>04678         }
<a name="l04679"></a>04679 
<a name="l04680"></a>04680 $   <span class="keywordflow">return</span> EOF;
<a name="l04681"></a>04681     }
<a name="l04682"></a>04682 
<a name="l04683"></a>04683 <span class="comment">//-----------------------------------------------------------------------------</span>
<a name="l04684"></a>04684 
<a name="l04685"></a>04685 <span class="keywordtype">bool</span> _txIsParentWaitable (DWORD* parentPID)
<a name="l04686"></a>04686     {
<a name="l04687"></a>04687 $1  PROCESSENTRY32* info = _txFindProcess();
<a name="l04688"></a>04688 $   <span class="keywordflow">if</span> (!info) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l04689"></a>04689 
<a name="l04690"></a>04690 $   info = _txFindProcess (info-&gt;th32ParentProcessID);
<a name="l04691"></a>04691 $   <span class="keywordflow">if</span> (!info) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l04692"></a>04692 
<a name="l04693"></a>04693 $   <span class="keywordtype">char</span> parent [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l04694"></a>04694 $   strncpy_s (parent, info-&gt;szExeFile, sizeof (parent) - 1);
<a name="l04695"></a>04695 $   <span class="keywordflow">if</span> (parentPID) *parentPID = info-&gt;th32ProcessID;
<a name="l04696"></a>04696 
<a name="l04697"></a>04697 $   info = _txFindProcess (info-&gt;th32ParentProcessID);  <span class="comment">// info: grandparent</span>
<a name="l04698"></a>04698 
<a name="l04699"></a>04699 $   <span class="keyword">static</span> <span class="keywordtype">char</span> list[<a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <a class="code" href="a00034.htm#ga2c0a4fe0612f109c5c88d6d55a061db5" title="Список запускающих программ, которые ждут нажатия клавиши после завершения процесса TXLib...">_TX_WAITABLE_PARENTS</a>;
<a name="l04700"></a>04700 $   <span class="keywordtype">char</span>* ctx = NULL;
<a name="l04701"></a>04701 
<a name="l04702"></a>04702 $   <span class="keywordflow">for</span> (<span class="keywordtype">char</span>* p = strtok_s (list, <span class="stringliteral">&quot;, &quot;</span>, &amp;ctx); p; p = strtok_s (NULL, <span class="stringliteral">&quot;, &quot;</span>, &amp;ctx))
<a name="l04703"></a>04703         {
<a name="l04704"></a>04704 $       <span class="keywordtype">char</span>* gp = strchr (p, <span class="charliteral">&#39;:&#39;</span>);
<a name="l04705"></a>04705 
<a name="l04706"></a>04706 $       <span class="keywordflow">if</span> (gp)
<a name="l04707"></a>04707             {
<a name="l04708"></a>04708 $           *gp++ = 0;
<a name="l04709"></a>04709 $           <span class="keywordflow">if</span> (_stricmp (p, parent) != 0) <span class="keywordflow">continue</span>;
<a name="l04710"></a>04710 
<a name="l04711"></a>04711 $           <span class="keywordflow">if</span> (info) <span class="keywordflow">if</span> (_stricmp (gp, info-&gt;szExeFile) == 0)  <span class="comment">// Was &amp;&amp;, but OMG MSVC /analyze..</span>
<a name="l04712"></a>04712                 { $ <span class="keywordflow">return</span> <span class="keyword">true</span>; }
<a name="l04713"></a>04713             }
<a name="l04714"></a>04714         <span class="keywordflow">else</span>
<a name="l04715"></a>04715             {
<a name="l04716"></a>04716 $           <span class="keywordflow">if</span> (_stricmp (p, parent) == 0)
<a name="l04717"></a>04717                 { $ <span class="keywordflow">return</span> <span class="keyword">true</span>; }
<a name="l04718"></a>04718             }
<a name="l04719"></a>04719         }
<a name="l04720"></a>04720 
<a name="l04721"></a>04721 $   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l04722"></a>04722     }
<a name="l04723"></a>04723 
<a name="l04724"></a>04724 <span class="comment">//-----------------------------------------------------------------------------</span>
<a name="l04725"></a>04725 
<a name="l04726"></a>04726 PROCESSENTRY32* _txFindProcess (<span class="keywordtype">unsigned</span> pid <span class="comment">/*= GetCurrentProcessId()*/</span>)
<a name="l04727"></a>04727     {
<a name="l04728"></a>04728 $1  <span class="keyword">static</span> PROCESSENTRY32 info = { <span class="keyword">sizeof</span> (info) };
<a name="l04729"></a>04729 $   <span class="keywordflow">if</span> (!pid) <span class="keywordflow">return</span> &amp;info;
<a name="l04730"></a>04730 
<a name="l04731"></a>04731 $   HANDLE sshot = CreateToolhelp32Snapshot (TH32CS_SNAPPROCESS, 0);
<a name="l04732"></a>04732 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (sshot); <span class="keywordflow">if</span> (!sshot) <span class="keywordflow">return</span> NULL;
<a name="l04733"></a>04733 
<a name="l04734"></a>04734 $   <span class="keywordflow">for</span> (Process32First (sshot, &amp;info); Process32Next (sshot, &amp;info); )
<a name="l04735"></a>04735         <span class="keywordflow">if</span> (info.th32ProcessID == pid) <span class="keywordflow">break</span>;
<a name="l04736"></a>04736 
<a name="l04737"></a>04737 $   CloseHandle (sshot);
<a name="l04738"></a>04738 
<a name="l04739"></a>04739 $   <span class="keywordflow">return</span> &amp;info;
<a name="l04740"></a>04740     }
<a name="l04741"></a>04741 
<a name="l04742"></a>04742 <span class="comment">//-----------------------------------------------------------------------------</span>
<a name="l04743"></a>04743 
<a name="l04744"></a>04744 <span class="comment">// You are here, little hacker?</span>
<a name="l04745"></a>04745 
<a name="l04746"></a>04746 <span class="keywordtype">bool</span> _txKillProcess (DWORD pid)
<a name="l04747"></a>04747     {
<a name="l04748"></a>04748 $1  _TX_IF_ARGUMENT_FAILED (pid) return false;
<a name="l04749"></a>04749 
<a name="l04750"></a>04750 $   HANDLE token = INVALID_HANDLE_VALUE;
<a name="l04751"></a>04751 $   OpenProcessToken (GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;token) asserted;
<a name="l04752"></a>04752 
<a name="l04753"></a>04753 $   LUID luid = {0};
<a name="l04754"></a>04754 $   LookupPrivilegeValue (NULL, SE_DEBUG_NAME, &amp;luid) asserted;
<a name="l04755"></a>04755 
<a name="l04756"></a>04756 $   TOKEN_PRIVILEGES priv = { 1, {{{ luid.LowPart, luid.HighPart}, SE_PRIVILEGE_ENABLED }}};
<a name="l04757"></a>04757 $   TOKEN_PRIVILEGES old  = {0};
<a name="l04758"></a>04758 
<a name="l04759"></a>04759 $   DWORD oldSz = 0;
<a name="l04760"></a>04760 $   AdjustTokenPrivileges (token, <span class="keyword">false</span>, &amp;priv, <span class="keyword">sizeof</span> (priv), &amp;old, &amp;oldSz) asserted;
<a name="l04761"></a>04761 
<a name="l04762"></a>04762 $   HANDLE proc = OpenProcess (PROCESS_ALL_ACCESS, 0, pid);
<a name="l04763"></a>04763 $   if (!proc) return false;
<a name="l04764"></a>04764 
<a name="l04765"></a>04765 $   <span class="keywordtype">bool</span> ok = !!TerminateProcess (proc, 0);
<a name="l04766"></a>04766 $   CloseHandle (proc);
<a name="l04767"></a>04767 
<a name="l04768"></a>04768 $   return ok;
<a name="l04769"></a>04769     }
<a name="l04770"></a>04770 
<a name="l04771"></a>04771 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04772"></a>04772 
<a name="l04773"></a>04773 const <span class="keywordtype">char</span>* <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keywordtype">bool</span> fileNameOnly <span class="comment">/*= true*/</span>)
<a name="l04774"></a>04774     {
<a name="l04775"></a>04775 $1  <span class="keyword">static</span> <span class="keywordtype">char</span> name[MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l04776"></a>04776 
<a name="l04777"></a>04777 $   <span class="keywordflow">if</span> (!*name) GetModuleFileName (NULL, name, <span class="keyword">sizeof</span> (name) - 1) asserted;
<a name="l04778"></a>04778 $   if (fileNameOnly) return name;
<a name="l04779"></a>04779 
<a name="l04780"></a>04780 $   static <span class="keywordtype">char</span> fullName[MAX_PATH] = &quot;&quot;;
<a name="l04781"></a>04781 $   strncpy_s (fullName, name, sizeof (fullName) - 1);
<a name="l04782"></a>04782 
<a name="l04783"></a>04783 $   <span class="keywordtype">char</span>* title = strrchr (fullName, &#39;\\&#39;);
<a name="l04784"></a>04784 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (title); if (!title) title = fullName;
<a name="l04785"></a>04785 
<a name="l04786"></a>04786 $   <span class="keywordtype">char</span>* ext   = strrchr (fullName,  &#39;.&#39;);
<a name="l04787"></a>04787 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (ext);   if (!ext)   ext   = fullName + strlen (fullName);
<a name="l04788"></a>04788 
<a name="l04789"></a>04789 $   <span class="keywordtype">size_t</span> sz = sizeof (fullName) - (ext - fullName) - 1;
<a name="l04790"></a>04790 
<a name="l04791"></a>04791     <span class="preprocessor">#ifdef _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES</span>
<a name="l04792"></a>04792 <span class="preprocessor"></span>$   strncpy_s (ext, sz, _TX_NAME <span class="stringliteral">&quot;- TXLib&quot;</span>, sz);
<a name="l04793"></a>04793 <span class="preprocessor">    #else</span>
<a name="l04794"></a>04794 <span class="preprocessor"></span>$   strncpy   (ext,     _TX_NAME <span class="stringliteral">&quot;- TXLib&quot;</span>, sz);
<a name="l04795"></a>04795 <span class="preprocessor">    #endif</span>
<a name="l04796"></a>04796 <span class="preprocessor"></span>
<a name="l04797"></a>04797 $   <span class="keywordflow">return</span> title + 1;
<a name="l04798"></a>04798     }
<a name="l04799"></a>04799 
<a name="l04801"></a>04801 <span class="comment">//}</span>
<a name="l04802"></a>04802 <span class="comment">//============================================================================================</span>
<a name="l04803"></a>04803 
<a name="l04804"></a>04804 <span class="comment">//============================================================================================</span>
<a name="l04805"></a>04805 <span class="comment">//{          [Internal] TXLib window functions      (_txCanvas...)</span>
<a name="l04807"></a>04807 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l04808"></a>04808 
<a name="l04809"></a>04809 <span class="keywordtype">unsigned</span> WINAPI _txCanvas_ThreadProc (<span class="keywordtype">void</span>* data)
<a name="l04810"></a>04810     {
<a name="l04811"></a>04811 $1  _txCanvas_ThreadId = GetCurrentThreadId();
<a name="l04812"></a>04812 
<a name="l04813"></a>04813 $   _TX_IF_ARGUMENT_FAILED (data) return false;
<a name="l04814"></a>04814 
<a name="l04815"></a>04815 $   _txCanvas_CreateWindow ((CREATESTRUCT*) data);
<a name="l04816"></a>04816 $   if (!<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>()) return <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (&quot;\a&quot; &quot;Cannot create canvas&quot;), 0;
<a name="l04817"></a>04817 
<a name="l04818"></a>04818 $   HICON icon32 = _txCreateTXIcon (32); SetClassLong (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), GCL_HICON,   (DWORD)(ptrdiff_t) icon32);
<a name="l04819"></a>04819 $   HICON icon16 = _txCreateTXIcon (16); SetClassLong (txWindow(), GCL_HICONSM, (DWORD)(ptrdiff_t) icon16);
<a name="l04820"></a>04820 
<a name="l04821"></a>04821 $   <span class="keywordtype">bool</span> isMaster = !!(GetWindowLong (txWindow(), GWL_STYLE) &amp; WS_SYSMENU);
<a name="l04822"></a>04822 
<a name="l04823"></a>04823     <span class="preprocessor">#ifndef NDEBUG</span>
<a name="l04824"></a>04824 <span class="preprocessor"></span>    OutputDebugString (<a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> _TX_NAME <span class="stringliteral">&quot;- STARTED\n&quot;</span>);
<a name="l04825"></a>04825 <span class="preprocessor">    #endif</span>
<a name="l04826"></a>04826 <span class="preprocessor"></span>
<a name="l04827"></a>04827 $   _txRunning = <span class="keyword">true</span>;
<a name="l04828"></a>04828 
<a name="l04829"></a>04829 $   MSG msg = {0};
<a name="l04830"></a>04830 $   <span class="keywordflow">while</span> (GetMessage (&amp;msg, NULL, 0, 0))
<a name="l04831"></a>04831         {
<a name="l04832"></a>04832 $       TranslateMessage (&amp;msg);
<a name="l04833"></a>04833 $       DispatchMessage  (&amp;msg);
<a name="l04834"></a>04834 $       Sleep (0);
<a name="l04835"></a>04835         }
<a name="l04836"></a>04836 
<a name="l04837"></a>04837 $   DestroyIcon (icon16);
<a name="l04838"></a>04838 $   DestroyIcon (icon32);
<a name="l04839"></a>04839 
<a name="l04840"></a>04840 $   <span class="keywordflow">if</span> (_txRunning &amp;&amp; isMaster)  <span class="comment">// Master window is destroyed but main() is still running.</span>
<a name="l04841"></a>04841         {                        <span class="comment">// No chances for good termination, so use exit().</span>
<a name="l04842"></a>04842 $       exit ((<span class="keywordtype">int</span>) msg.wParam);
<a name="l04843"></a>04843         }
<a name="l04844"></a>04844 
<a name="l04845"></a>04845 <span class="preprocessor">    #ifndef NDEBUG</span>
<a name="l04846"></a>04846 <span class="preprocessor"></span>    OutputDebugString (<a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> _TX_NAME <span class="stringliteral">&quot;- STOPPED\n&quot;</span>);
<a name="l04847"></a>04847 <span class="preprocessor">    #endif</span>
<a name="l04848"></a>04848 <span class="preprocessor"></span>
<a name="l04849"></a>04849 $   _txCanvas_ThreadId = 0;
<a name="l04850"></a>04850 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l04851"></a>04851     }
<a name="l04852"></a>04852 
<a name="l04853"></a>04853 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04854"></a>04854 
<a name="l04855"></a>04855 HWND _txCanvas_CreateWindow (CREATESTRUCT* from)
<a name="l04856"></a>04856     {
<a name="l04857"></a>04857 $1  _TX_IF_ARGUMENT_FAILED (from) return false;
<a name="l04858"></a>04858 
<a name="l04859"></a>04859 $   static <span class="keywordtype">char</span> className[<a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = &quot;&quot;;
<a name="l04860"></a>04860 $   _snprintf_s (className, sizeof (className) - 1 _TX_TRUNCATE,
<a name="l04861"></a>04861                  &quot;<span class="comment">/*---[TXLib]-------------------------- &quot;</span>
<a name="l04862"></a>04862 <span class="comment">                 _TX_VERSION &quot;  &quot; __FILE__ _TX_NAME &quot; WndClass %08X &quot;</span>
<a name="l04863"></a>04863 <span class="comment">                  &quot;--------------------------[TXLib]---*/</span>&quot;, (<span class="keywordtype">int</span>) GetTickCount());
<a name="l04864"></a>04864 
<a name="l04865"></a>04865 $   WNDCLASSEX wc    = { <span class="keyword">sizeof</span> (wc) };
<a name="l04866"></a>04866 $   wc.style         = CS_HREDRAW | CS_VREDRAW;
<a name="l04867"></a>04867 $   wc.lpfnWndProc   = _txCanvas_WndProc;
<a name="l04868"></a>04868 $   wc.hCursor       = LoadCursor (NULL, IDC_ARROW);
<a name="l04869"></a>04869 $   wc.hbrBackground = (HBRUSH) Win32::GetStockObject (HOLLOW_BRUSH);
<a name="l04870"></a>04870 $   wc.lpszClassName = className;
<a name="l04871"></a>04871 
<a name="l04872"></a>04872 $   ATOM wndclass = RegisterClassEx (&amp;wc);
<a name="l04873"></a>04873 $   <span class="keywordflow">if</span> (!wndclass) <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;RegisterClass (\&quot;%s\&quot;) failed&quot;</span><a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> className), (HWND) NULL;
<a name="l04874"></a>04874 
<a name="l04875"></a>04875 $   <span class="keywordtype">int</span> centered = <span class="keyword">false</span>;
<a name="l04876"></a>04876 $   <span class="keywordflow">if</span> (from-&gt;cx &lt; 0 &amp;&amp; from-&gt;cy &lt; 0) { from-&gt;cx *= -1; from-&gt;cy *= -1; centered = <span class="keyword">true</span>; }
<a name="l04877"></a>04877 
<a name="l04878"></a>04878 $   SIZE screen  = { GetSystemMetrics (SM_CXSCREEN),     GetSystemMetrics (SM_CYSCREEN)     };
<a name="l04879"></a>04879 $   SIZE frame   = { GetSystemMetrics (SM_CXFIXEDFRAME), GetSystemMetrics (SM_CYFIXEDFRAME) };
<a name="l04880"></a>04880 $   SIZE caption = { 0, GetSystemMetrics (SM_CYCAPTION) };
<a name="l04881"></a>04881 $   SIZE size    = { from-&gt;cx + 2*frame.cx, from-&gt;cy + 2*frame.cy + caption.cy };
<a name="l04882"></a>04882 $   POINT center = { screen.cx / 2, screen.cy / 2 };
<a name="l04883"></a>04883 
<a name="l04884"></a>04884 $   HWND console = Win32::GetConsoleWindow();
<a name="l04885"></a>04885 $   GetWindowRect (console, &amp;_txConsole_Pos);
<a name="l04886"></a>04886 
<a name="l04887"></a>04887 $   <span class="keywordflow">if</span> (!centered)
<a name="l04888"></a>04888         {
<a name="l04889"></a>04889 $       center.x = (_txConsole_Pos.right  + _txConsole_Pos.left) / 2;
<a name="l04890"></a>04890 $       center.y = (_txConsole_Pos.bottom + _txConsole_Pos.top)  / 2;
<a name="l04891"></a>04891         }
<a name="l04892"></a>04892 
<a name="l04893"></a>04893 $   HWND wnd = CreateWindowEx (from-&gt;dwExStyle, className,
<a name="l04894"></a>04894                                from-&gt;lpszName? from-&gt;lpszName : <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keyword">false</span>),
<a name="l04895"></a>04895                                from-&gt;style | WS_POPUP | WS_BORDER | WS_CAPTION,
<a name="l04896"></a>04896                                center.x - size.cx/2, center.y - size.cy/2, size.cx, size.cy,
<a name="l04897"></a>04897                                NULL, from-&gt;hMenu, NULL, from-&gt;lpCreateParams);
<a name="l04898"></a>04898 
<a name="l04899"></a>04899 $   <span class="keywordflow">if</span> (!wnd || !<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>()) <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Cannot create canvas: CreateWindowEx (\&quot;%s\&quot;) failed&quot;</span><a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a>
<a name="l04900"></a>04900                                                      className), (HWND) NULL;
<a name="l04901"></a>04901 $   <span class="keywordflow">if</span> (console)
<a name="l04902"></a>04902         { $ SetWindowPos (console, HWND_NOTOPMOST, center.x - size.cx*2/5, center.y - size.cy*2/5, 0, 0,
<a name="l04903"></a>04903                           SWP_NOSIZE | SWP_NOACTIVATE | <a class="code" href="a00034.htm#gab4c131ad86b5b53baf2e8b271876c814" title="Режим отображения консольного окна. Допустимы любые флаги функции SetWindowPos.">_TX_CONSOLE_MODE</a>) asserted; }
<a name="l04904"></a>04904 
<a name="l04905"></a>04905 $   ShowWindow          (txWindow(), SW_SHOW);
<a name="l04906"></a>04906 $   SetForegroundWindow (txWindow());
<a name="l04907"></a>04907 $   UpdateWindow        (txWindow());
<a name="l04908"></a>04908 
<a name="l04909"></a>04909 $   HMENU menu = GetSystemMenu (txWindow(), false);
<a name="l04910"></a>04910 $   if (!menu) return txWindow();
<a name="l04911"></a>04911 
<a name="l04912"></a>04912 $   AppendMenu (menu, MF_SEPARATOR, 0, NULL)                      asserted;
<a name="l04913"></a>04913 $   AppendMenu (menu, MF_STRING, _TX_IDM_CONSOLE, &quot;Show Console&quot;) asserted;
<a name="l04914"></a>04914 $   AppendMenu (menu, MF_STRING, _TX_IDM_ABOUT,   &quot;About...&quot;)     asserted;
<a name="l04915"></a>04915 
<a name="l04916"></a>04916 $   CheckMenuItem (menu, _TX_IDM_CONSOLE,
<a name="l04917"></a>04917                    console? (IsWindowVisible (console)? MF_CHECKED : 0) : MF_DISABLED);
<a name="l04918"></a>04918 
<a name="l04919"></a>04919 $   return txWindow();
<a name="l04920"></a>04920     }
<a name="l04921"></a>04921 
<a name="l04922"></a>04922 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04923"></a>04923 
<a name="l04924"></a>04924 inline <span class="keywordtype">bool</span> _txCanvas_OK()
<a name="l04925"></a>04925     {
<a name="l04926"></a>04926 $1  <span class="keywordflow">return</span> _txCanvas_ThreadId   &amp;&amp;
<a name="l04927"></a>04927            _txCanvas_Window     &amp;&amp;
<a name="l04928"></a>04928            _txCanvas_BackBuf[0] &amp;&amp;
<a name="l04929"></a>04929            _txCanvas_BackBuf[1];
<a name="l04930"></a>04930     }
<a name="l04931"></a>04931 
<a name="l04932"></a>04932 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04933"></a>04933 
<a name="l04934"></a>04934 <span class="keywordtype">int</span> _txCanvas_SetRefreshLock (<span class="keywordtype">int</span> count)
<a name="l04935"></a>04935     {
<a name="l04936"></a>04936 $1  <span class="keywordtype">int</span> oldCount = _txCanvas_RefreshLock;
<a name="l04937"></a>04937 
<a name="l04938"></a>04938 $   _txCanvas_RefreshLock = count;
<a name="l04939"></a>04939 
<a name="l04940"></a>04940 $   <span class="keywordflow">if</span> (_txCanvas_RefreshLock &lt;= 0 || oldCount &lt;= 0)
<a name="l04941"></a>04941         <span class="keywordflow">if</span> (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>())
<a name="l04942"></a>04942             {
<a name="l04943"></a>04943 $           InvalidateRect (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), NULL, <span class="keyword">false</span>);
<a name="l04944"></a>04944 $           UpdateWindow   (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>());
<a name="l04945"></a>04945             }
<a name="l04946"></a>04946 
<a name="l04947"></a>04947 $   <span class="keywordflow">return</span> oldCount;
<a name="l04948"></a>04948     }
<a name="l04949"></a>04949 
<a name="l04950"></a>04950 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l04951"></a>04951 
<a name="l04952"></a>04952 HICON _txCreateTXIcon (<span class="keywordtype">int</span> size)
<a name="l04953"></a>04953     {
<a name="l04954"></a>04954 $1  _TX_IF_ARGUMENT_FAILED (size == 32 || size == 16) return NULL;
<a name="l04955"></a>04955 
<a name="l04956"></a>04956 $   const <span class="keywordtype">char</span> image32 [32*32+1] =
<a name="l04957"></a>04957         &quot;00000000000000000000000000000000&quot;&quot;0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0&quot;&quot;0F0000000000000000000000000000F0&quot;&quot;0F0000000000000000000000000000F0&quot;
<a name="l04958"></a>04958         &quot;0F0000000000000099999999999900F0&quot;&quot;0F0000000000000090300333330900F0&quot;&quot;0F0000000990000090000000000900F0&quot;&quot;0F00000099990000900BB000000900F0&quot;
<a name="l04959"></a>04959         &quot;0F0000039999000090B00090900900F0&quot;&quot;0F0000009999000090B00999990900F0&quot;&quot;0F00000009903799900BB090900900F0&quot;&quot;0F000000009BB70090000010000900F0&quot;
<a name="l04960"></a>04960         &quot;0F0000000B90000090000000000900F0&quot;&quot;0F000000B0B0000099999999999900F0&quot;&quot;0F00007B30B0000090000000000000F0&quot;&quot;0F00007300B0000090000000000000F0&quot;
<a name="l04961"></a>04961         &quot;0F00000000B3000090000000000000F0&quot;&quot;0F0000000B0B000090000000000000F0&quot;&quot;0F000000B303B00090000000000000F0&quot;&quot;0F000003B000B00090000000000000F0&quot;
<a name="l04962"></a>04962         &quot;0F00003B00003B0090000000000000F0&quot;&quot;0F0000300000030090000000000000F0&quot;&quot;0F0000000448888888888844000000F0&quot;&quot;0F00004886E6E6E60E66E6EEEE4400F0&quot;
<a name="l04963"></a>04963         &quot;0F4488866E0E60E00660E06E66EEE4F0&quot;&quot;0F868806E06E06E666E66E00E06EE6F0&quot;&quot;0F08606E66E0066000E006E66E00E6F0&quot;&quot;0F8666E006600E00006600E006E00EF0&quot;
<a name="l04964"></a>04964         &quot;0F000E066888888888888888606660F0&quot;&quot;0F66EEE6EE000E00000E00086EEEE6F0&quot;&quot;0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0&quot;&quot;00000000000000000000000000000000&quot;;
<a name="l04965"></a>04965 
<a name="l04966"></a>04966 $   const <span class="keywordtype">char</span> image16 [16*16+1] =
<a name="l04967"></a>04967         &quot;0000000000000000&quot;&quot;0000000999999990&quot;&quot;0009000900000090&quot;&quot;0099900909973090&quot;&quot;0059700909009390&quot;&quot;0009799909973090&quot;&quot;0099000900000090&quot;&quot;0959330999999990&quot;
<a name="l04968"></a>04968         &quot;0709500900000000&quot;&quot;0095930900000000&quot;&quot;0090393900000000&quot;&quot;0790073900000000&quot;&quot;0900000900000000&quot;&quot;000EE6E6E6E6E000&quot;&quot;0EE6E6E6E6E6EEE0&quot;&quot;0000000000000000&quot;;
<a name="l04969"></a>04969 
<a name="l04970"></a>04970 $   const COLORREF pal[&#39;F&#39;-&#39;0&#39;+1] = { 0x000000, 0x002b2b, 0x555500, 0x005555, 0x808000, 0x008080, 0xaaaa00, 0x00aaaa, 0xd5d500, 0x00d5d5,
<a name="l04971"></a>04971                                       0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
<a name="l04972"></a>04972                                       0xffff00, 0x00ffff, 0xffffaa, 0xaaffff, 0xd5d500, 0xffffff };
<a name="l04973"></a>04973 
<a name="l04974"></a>04974 $   <span class="keyword">const</span> <span class="keywordtype">char</span>* image = (size == 32)? image32 : image16;
<a name="l04975"></a>04975 
<a name="l04976"></a>04976 $   POINT sz = { size, size };
<a name="l04977"></a>04977 $   HDC dcMask  = _txBuffer_Create (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), &amp;sz); <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (dcMask);
<a name="l04978"></a>04978 $   HDC dcColor = _txBuffer_Create (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), &amp;sz); <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (dcColor);
<a name="l04979"></a>04979 
<a name="l04980"></a>04980 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size*size; i++)
<a name="l04981"></a>04981         {
<a name="l04982"></a>04982         <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (<a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (image[i], <span class="charliteral">&#39;0&#39;</span>, <span class="charliteral">&#39;9&#39;</span>) || <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (image[i], <span class="charliteral">&#39;A&#39;</span>, <span class="charliteral">&#39;F&#39;</span>));
<a name="l04983"></a>04983 
<a name="l04984"></a>04984         Win32::SetPixel (dcColor, i % size, i / size, pal [image[i] - <span class="charliteral">&#39;0&#39;</span>]);
<a name="l04985"></a>04985         }
<a name="l04986"></a>04986 
<a name="l04987"></a>04987 $   ICONINFO info = { <span class="keyword">true</span>, 0, 0, (HBITMAP) Win32::GetCurrentObject (dcMask,  OBJ_BITMAP),
<a name="l04988"></a>04988                                   (HBITMAP) Win32::GetCurrentObject (dcColor, OBJ_BITMAP) };
<a name="l04989"></a>04989 
<a name="l04990"></a>04990 $   HICON icon = CreateIconIndirect (&amp;info);
<a name="l04991"></a>04991 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (icon);
<a name="l04992"></a>04992 
<a name="l04993"></a>04993 $   _txBuffer_Delete (&amp;dcMask)  asserted;
<a name="l04994"></a>04994 $   _txBuffer_Delete (&amp;dcColor) asserted;
<a name="l04995"></a>04995 
<a name="l04996"></a>04996 $   return icon;
<a name="l04997"></a>04997     }
<a name="l04998"></a>04998 
<a name="l05000"></a>05000 <span class="comment">//}</span>
<a name="l05001"></a>05001 <span class="comment">//============================================================================================</span>
<a name="l05002"></a>05002 
<a name="l05003"></a>05003 <span class="comment">//============================================================================================</span>
<a name="l05004"></a>05004 <span class="comment">//{          [Internal] Main window event handlers (_txCanvas_On...)</span>
<a name="l05006"></a>05006 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l05008"></a>05008 <span class="comment"></span>
<a name="l05009"></a>05009 <span class="keywordtype">bool</span> _txCanvas_OnCREATE (HWND wnd)
<a name="l05010"></a>05010     {
<a name="l05011"></a>05011 $1  _TX_IF_ARGUMENT_FAILED (wnd) return false;
<a name="l05012"></a>05012 
<a name="l05013"></a>05013 $   _txCanvas_BackBuf[0] = _txBuffer_Create (wnd); <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (_txCanvas_BackBuf[0]);
<a name="l05014"></a>05014 $   _txCanvas_BackBuf[1] = _txBuffer_Create (wnd); <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (_txCanvas_BackBuf[1]);
<a name="l05015"></a>05015 
<a name="l05016"></a>05016 $   SetTimer (wnd, _txCanvas_RefreshTimer, <a class="code" href="a00034.htm#gafcc9bd44fad6700bbbf2ee1646d2482d" title="Интервал обновления холста (мс)">_TX_WINDOW_UPDATE_INTERVAL</a>, NULL) asserted;
<a name="l05017"></a>05017 
<a name="l05018"></a>05018 $   _txCanvas_Window = wnd;
<a name="l05019"></a>05019 
<a name="l05020"></a>05020 $   <a class="code" href="a00029.htm#gae05b7bb52b782b86796201f9f96d0f58" title="Установка параметров рисования по умолчанию.">txSetDefaults</a>();
<a name="l05021"></a>05021 
<a name="l05022"></a>05022 $   return true;
<a name="l05023"></a>05023     }
<a name="l05024"></a>05024 
<a name="l05025"></a>05025 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05026"></a>05026 
<a name="l05027"></a>05027 <span class="keywordtype">bool</span> _txCanvas_OnDESTROY (HWND wnd)
<a name="l05028"></a>05028     {
<a name="l05029"></a>05029 $1  _TX_IF_ARGUMENT_FAILED (wnd) return false;
<a name="l05030"></a>05030 
<a name="l05031"></a>05031     <span class="comment">// Инициируем остановку цикла сообщений</span>
<a name="l05032"></a>05032 
<a name="l05033"></a>05033 $   PostQuitMessage (_txRunning? WM_DESTROY : EXIT_SUCCESS);
<a name="l05034"></a>05034 
<a name="l05035"></a>05035 $   if (!_txCanvas_Window) return false;
<a name="l05036"></a>05036 
<a name="l05037"></a>05037     <span class="comment">// Indicate that we are about to manually terminate</span>
<a name="l05038"></a>05038 
<a name="l05039"></a>05039 $   _txExit = true;
<a name="l05040"></a>05040 
<a name="l05041"></a>05041     <span class="comment">// Lock GDI resources</span>
<a name="l05042"></a>05042 
<a name="l05043"></a>05043 $   <span class="keywordtype">bool</span> locked = false;
<a name="l05044"></a>05044 $   _txWaitFor ((locked = <a class="code" href="a00033.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock</a> (false), locked));
<a name="l05045"></a>05045 $   if (!locked) <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (&quot;Cannot lock GDI to free resources&quot;);
<a name="l05046"></a>05046 
<a name="l05047"></a>05047     <span class="comment">// Освобождаем пользовательские ресурсы</span>
<a name="l05048"></a>05048 
<a name="l05049"></a>05049 $   std::vector &lt;HDC&gt;&amp; dcs = _txCanvas_UserDCs;
<a name="l05050"></a>05050 $   if (dcs.size()) _txNotifyIcon (NIIF_ERROR, NULL, &quot;Вы забыли освободить %d HDC.&quot;, dcs.size());
<a name="l05051"></a>05051 
<a name="l05052"></a>05052     struct _txBuffer_Delete_Wrapper { <span class="keyword">static</span> <span class="keywordtype">bool</span> func (HDC dc)
<a name="l05053"></a>05053         {
<a name="l05054"></a>05054 $       <span class="keywordflow">return</span> _txBuffer_Delete (&amp;dc);
<a name="l05055"></a>05055         }};
<a name="l05056"></a>05056 
<a name="l05057"></a>05057 $   std::for_each (dcs.begin(), dcs.end(), _txBuffer_Delete_Wrapper::func);
<a name="l05058"></a>05058 $   dcs.clear();
<a name="l05059"></a>05059 
<a name="l05060"></a>05060     <span class="comment">// Освобождаем ресурсы, связанные с окном</span>
<a name="l05061"></a>05061 
<a name="l05062"></a>05062 $   <span class="keywordflow">if</span> (_txCanvas_RefreshTimer) KillTimer (wnd, _txCanvas_RefreshTimer) asserted;
<a name="l05063"></a>05063 
<a name="l05064"></a>05064 $   if (_txCanvas_BackBuf[1]) _txBuffer_Delete (&amp;_txCanvas_BackBuf[1])  asserted;
<a name="l05065"></a>05065 $   if (_txCanvas_BackBuf[0]) _txBuffer_Delete (&amp;_txCanvas_BackBuf[0])  asserted;
<a name="l05066"></a>05066 
<a name="l05067"></a>05067 $   <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>();
<a name="l05068"></a>05068 
<a name="l05069"></a>05069     <span class="comment">// Indicate that we are destroyed</span>
<a name="l05070"></a>05070 
<a name="l05071"></a>05071 $   _txCanvas_Window = NULL;
<a name="l05072"></a>05072 
<a name="l05073"></a>05073 $   return true;
<a name="l05074"></a>05074     }
<a name="l05075"></a>05075 
<a name="l05076"></a>05076 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05077"></a>05077 
<a name="l05078"></a>05078 <span class="keywordtype">bool</span> _txCanvas_OnCLOSE (HWND wnd)
<a name="l05079"></a>05079     {
<a name="l05080"></a>05080 $1  _TX_IF_ARGUMENT_FAILED (wnd &amp;&amp; _txCanvas_OK()) return false;
<a name="l05081"></a>05081 
<a name="l05082"></a>05082 $   if (_txRunning &amp;&amp;
<a name="l05083"></a>05083         MessageBox (wnd, &quot;Функция main() не завершена. Программа все еще работает. Прервать ее аварийно?    \n\n&quot;
<a name="l05084"></a>05084                          &quot;Внимание: ресурсы не будут освобождены, это может нарушить работу Windows.\n&quot;
<a name="l05085"></a>05085                          &quot;Лучше подождать, когда main() завершится - это отображается в заголовке окна.&quot;,
<a name="l05086"></a>05086                     <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (false), MB_OKCANCEL | MB_ICONSTOP) != IDOK) return false;
<a name="l05087"></a>05087 $   return true;
<a name="l05088"></a>05088     }
<a name="l05089"></a>05089 
<a name="l05090"></a>05090 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05091"></a>05091 
<a name="l05092"></a>05092 <span class="keywordtype">bool</span> _txCanvas_OnPAINT (HWND wnd)
<a name="l05093"></a>05093     {
<a name="l05094"></a>05094 $1  _TX_IF_ARGUMENT_FAILED (wnd &amp;&amp; _txCanvas_OK()) return false;
<a name="l05095"></a>05095 
<a name="l05096"></a>05096 $   PAINTSTRUCT ps = {0};
<a name="l05097"></a>05097 $   HDC dc = BeginPaint (wnd, &amp;ps);
<a name="l05098"></a>05098 $   <span class="keywordflow">if</span> (!dc) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05099"></a>05099 
<a name="l05100"></a>05100 $   RECT r = {0};
<a name="l05101"></a>05101 $   GetClientRect (wnd, &amp;r) asserted;
<a name="l05102"></a>05102 $   POINT size = { r.right - r.left, r.bottom - r.top };
<a name="l05103"></a>05103 
<a name="l05104"></a>05104 $   <span class="keywordflow">if</span> (_txCanvas_RefreshLock &lt;= 0 &amp;&amp;
<a name="l05105"></a>05105         <a class="code" href="a00033.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock</a> (<span class="keyword">false</span>))
<a name="l05106"></a>05106         {
<a name="l05107"></a>05107 $       Win32::BitBlt (_txCanvas_BackBuf[1], 0, 0, size.x, size.y, <a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), 0, 0, SRCCOPY);
<a name="l05108"></a>05108 
<a name="l05109"></a>05109 $       <span class="keywordflow">if</span> (!IsWindowVisible (Win32::GetConsoleWindow()))
<a name="l05110"></a>05110             {
<a name="l05111"></a>05111 $           _txConsole_Draw (_txCanvas_BackBuf[1]);
<a name="l05112"></a>05112             }
<a name="l05113"></a>05113 
<a name="l05114"></a>05114 $       <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>();
<a name="l05115"></a>05115         }
<a name="l05116"></a>05116 
<a name="l05117"></a>05117     <span class="comment">// Magic 100500 value is used to completely block screen refresh.</span>
<a name="l05118"></a>05118     <span class="comment">// Since no value can be 100500 or above, this condition is always true and</span>
<a name="l05119"></a>05119     <span class="comment">// the refresh cannot be blocked IRL. Do not use 100501 because it may lead</span>
<a name="l05120"></a>05120     <span class="comment">// to errors on some compilers and possible may crash the compilers themselves.</span>
<a name="l05121"></a>05121     <span class="comment">// Yes guys, with all your software installed.</span>
<a name="l05122"></a>05122 
<a name="l05123"></a>05123 $   <span class="keywordflow">if</span> (_txCanvas_RefreshLock != 100500)
<a name="l05124"></a>05124         { $ Win32::BitBlt (dc, 0, 0, size.x, size.y, _txCanvas_BackBuf[1], 0, 0, SRCCOPY); }
<a name="l05125"></a>05125 
<a name="l05126"></a>05126 $   EndPaint (wnd, &amp;ps) asserted;
<a name="l05127"></a>05127 
<a name="l05128"></a>05128 $   return true;
<a name="l05129"></a>05129     }
<a name="l05130"></a>05130 
<a name="l05131"></a>05131 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05132"></a>05132 
<a name="l05133"></a>05133 <span class="keywordtype">bool</span> _txCanvas_OnCHAR (HWND, WPARAM ch)
<a name="l05134"></a>05134     {
<a name="l05135"></a>05135 $1  INPUT_RECORD evt = {0};
<a name="l05136"></a>05136 
<a name="l05137"></a>05137 $   evt.EventType                        = KEY_EVENT;
<a name="l05138"></a>05138 $   evt.Event.KeyEvent.bKeyDown          = <span class="keyword">true</span>;
<a name="l05139"></a>05139 $   evt.Event.KeyEvent.wRepeatCount      = 1;
<a name="l05140"></a>05140 $   evt.Event.KeyEvent.wVirtualKeyCode   = 0;
<a name="l05141"></a>05141 $   evt.Event.KeyEvent.wVirtualScanCode  = 0;
<a name="l05142"></a>05142 $   evt.Event.KeyEvent.uChar.AsciiChar   = (<span class="keywordtype">unsigned</span> char) ch;
<a name="l05143"></a>05143 $   evt.Event.KeyEvent.dwControlKeyState = 0;
<a name="l05144"></a>05144 
<a name="l05145"></a>05145 $   DWORD written = 0;
<a name="l05146"></a>05146 $   WriteConsoleInput (GetStdHandle (STD_INPUT_HANDLE), &amp;evt, 1, &amp;written);
<a name="l05147"></a>05147 
<a name="l05148"></a>05148 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l05149"></a>05149     }
<a name="l05150"></a>05150 
<a name="l05151"></a>05151 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05152"></a>05152 
<a name="l05153"></a>05153 <span class="keywordtype">bool</span> _txCanvas_OnMOUSEMOVE (HWND, WPARAM buttons, LPARAM coords)
<a name="l05154"></a>05154     {
<a name="l05155"></a>05155 $1  _TX_IF_ARGUMENT_FAILED (_txCanvas_OK()) return false;
<a name="l05156"></a>05156 
<a name="l05157"></a>05157 $   _txMousePos.x   = LOWORD (coords);
<a name="l05158"></a>05158 $   _txMousePos.y   = HIWORD (coords);
<a name="l05159"></a>05159 $   _txMouseButtons = (<span class="keywordtype">int</span>) buttons;
<a name="l05160"></a>05160 
<a name="l05161"></a>05161 $   return true;
<a name="l05162"></a>05162     }
<a name="l05163"></a>05163 
<a name="l05164"></a>05164 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05165"></a>05165 
<a name="l05166"></a>05166 <span class="keywordtype">bool</span> _txCanvas_OnTIMER (HWND wnd, WPARAM)
<a name="l05167"></a>05167     {
<a name="l05168"></a>05168 $1  _TX_IF_ARGUMENT_FAILED (wnd) return false;
<a name="l05169"></a>05169 
<a name="l05170"></a>05170 $   if (_txCanvas_RefreshLock &gt; 0) return false;
<a name="l05171"></a>05171 
<a name="l05172"></a>05172 $   InvalidateRect (wnd, NULL, false) asserted;
<a name="l05173"></a>05173 $   UpdateWindow   (wnd)              asserted;
<a name="l05174"></a>05174 
<a name="l05175"></a>05175 $   return true;
<a name="l05176"></a>05176     }
<a name="l05177"></a>05177 
<a name="l05178"></a>05178 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05179"></a>05179 
<a name="l05180"></a>05180 <span class="keywordtype">bool</span> _txCanvas_OnCmdCONSOLE (HWND wnd, WPARAM cmd)
<a name="l05181"></a>05181     {
<a name="l05182"></a>05182 $1  _TX_IF_ARGUMENT_FAILED (wnd) return false;
<a name="l05183"></a>05183 
<a name="l05184"></a>05184 $   HWND console = Win32::GetConsoleWindow();
<a name="l05185"></a>05185 $   if (!console) return false;
<a name="l05186"></a>05186 
<a name="l05187"></a>05187 $   <span class="keywordtype">bool</span> visible = !!IsWindowVisible (console);
<a name="l05188"></a>05188 
<a name="l05189"></a>05189 $   ShowWindow (console, visible? SW_HIDE : SW_SHOW);
<a name="l05190"></a>05190 
<a name="l05191"></a>05191 $   visible = !!IsWindowVisible (console);
<a name="l05192"></a>05192 $   CheckMenuItem (GetSystemMenu (wnd, false), (<span class="keywordtype">int</span>)cmd, visible? MF_CHECKED : MF_UNCHECKED);
<a name="l05193"></a>05193 
<a name="l05194"></a>05194 $   return true;
<a name="l05195"></a>05195     }
<a name="l05196"></a>05196 
<a name="l05197"></a>05197 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05198"></a>05198 
<a name="l05199"></a>05199 <span class="keywordtype">bool</span> _txCanvas_OnCmdABOUT (HWND, WPARAM)
<a name="l05200"></a>05200     {
<a name="l05201"></a>05201 $1  <span class="comment">//{ Overriding the missing names, if the set is uncomplete</span>
<a name="l05202"></a>05202 
<a name="l05203"></a>05203 <span class="preprocessor">    #if defined (__MODULE)</span>
<a name="l05204"></a>05204 <span class="preprocessor"></span><span class="preprocessor">        #define ABOUT_NAME_    __MODULE</span>
<a name="l05205"></a>05205 <span class="preprocessor"></span><span class="preprocessor">    #else</span>
<a name="l05206"></a>05206 <span class="preprocessor"></span><span class="preprocessor">        #define ABOUT_NAME_    &quot;TXLib&quot;</span>
<a name="l05207"></a>05207 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05208"></a>05208 <span class="preprocessor"></span>
<a name="l05209"></a>05209 <span class="preprocessor">    #if defined (__MODULE) || defined (__VERSION) || defined (__DESCRIPTION) || defined (__AUTHOR)</span>
<a name="l05210"></a>05210 <span class="preprocessor"></span>
<a name="l05211"></a>05211 <span class="preprocessor">        #ifndef __MODULE</span>
<a name="l05212"></a>05212 <span class="preprocessor"></span><span class="preprocessor">        #define __MODULE       &quot;TXLib&quot;                       &quot; \t\t&quot;  &quot;#define __MODULE to set the name.&quot;</span>
<a name="l05213"></a>05213 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l05214"></a>05214 <span class="preprocessor"></span>
<a name="l05215"></a>05215 <span class="preprocessor">        #ifndef __VERSION</span>
<a name="l05216"></a>05216 <span class="preprocessor"></span><span class="preprocessor">        #define __VERSION      &quot;(0.000000000).&quot;              &quot; \t\t&quot; &quot;#define __VERSION to set the string value.&quot;</span>
<a name="l05217"></a>05217 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l05218"></a>05218 <span class="preprocessor"></span>
<a name="l05219"></a>05219 <span class="preprocessor">        #ifndef __DESCRIPTION</span>
<a name="l05220"></a>05220 <span class="preprocessor"></span><span class="preprocessor">        #define __DESCRIPTION  &quot;(Мне лень задать описание).&quot; &quot; \t\t&quot; &quot;#define __DESCRIPTION to override project role.&quot;</span>
<a name="l05221"></a>05221 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l05222"></a>05222 <span class="preprocessor"></span>
<a name="l05223"></a>05223 <span class="preprocessor">        #ifndef __AUTHOR</span>
<a name="l05224"></a>05224 <span class="preprocessor"></span><span class="preprocessor">        #define __AUTHOR       &quot;(Непонятно кто).&quot;            &quot; \t\t&quot; &quot;#define __AUTHOR to override this name.&quot;</span>
<a name="l05225"></a>05225 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l05226"></a>05226 <span class="preprocessor"></span>
<a name="l05227"></a>05227 <span class="preprocessor">    #endif</span>
<a name="l05228"></a>05228 <span class="preprocessor"></span>    <span class="comment">//}</span>
<a name="l05229"></a>05229 
<a name="l05230"></a>05230 $   time_t timeT     = time (NULL) - clock()/CLOCKS_PER_SEC;
<a name="l05231"></a>05231 $   <span class="keywordtype">char</span>   timeS[32] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05232"></a>05232 $   ctime_s (timeS, <span class="keyword">sizeof</span> (timeS), &amp;timeT);
<a name="l05233"></a>05233 
<a name="l05234"></a>05234 $   <span class="keyword">static</span> <span class="keywordtype">char</span> text[<a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05235"></a>05235 $   <span class="keywordtype">char</span> cwd [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05236"></a>05236 
<a name="l05237"></a>05237 <span class="preprocessor">    #define EOL_ &quot;    \n&quot;</span>
<a name="l05238"></a>05238 <span class="preprocessor"></span>
<a name="l05239"></a>05239 $   _snprintf_s (text, <span class="keyword">sizeof</span> (text) - 1 _TX_TRUNCATE,
<a name="l05240"></a>05240 
<a name="l05241"></a>05241                  <span class="stringliteral">&quot;Application:&quot;</span> EOL_ <span class="stringliteral">&quot;\n&quot;</span>
<a name="l05242"></a>05242 
<a name="l05243"></a>05243                  #<span class="keywordflow">if</span> defined (__MODULE) || defined (__VERSION) || defined (__DESCRIPTION) || defined (__PROGRAMMER)
<a name="l05244"></a>05244                      __MODULE <span class="stringliteral">&quot; version &quot;</span> __VERSION EOL_
<a name="l05245"></a>05245                      __DESCRIPTION EOL_
<a name="l05246"></a>05246                      <span class="stringliteral">&quot;Copyright (c) &quot;</span> __AUTHOR EOL_
<a name="l05247"></a>05247                  #<span class="keywordflow">else</span>
<a name="l05248"></a>05248                      <span class="stringliteral">&quot;Здесь могла бы быть Ваша реклама:)&quot;</span> EOL_
<a name="l05249"></a>05249                      <span class="stringliteral">&quot;#define __MODULE to \&quot;your program name\&quot; before including TXLib.h to use this billboard...&quot;</span> EOL_
<a name="l05250"></a>05250                  #endif
<a name="l05251"></a>05251 
<a name="l05252"></a>05252                  <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;Developed with:&quot;</span> EOL_ <span class="stringliteral">&quot;\n&quot;</span>
<a name="l05253"></a>05253                  <span class="stringliteral">&quot;The Dumb Artist Library (TX Library) - &quot;</span> <a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> EOL_
<a name="l05254"></a>05254                  _TX_AUTHOR <span class="stringliteral">&quot;, see license on: http://ded32.net.ru/index/0-6&quot;</span> EOL_ <span class="stringliteral">&quot;\n&quot;</span>
<a name="l05255"></a>05255 
<a name="l05256"></a>05256                  <span class="stringliteral">&quot;TXLib file:&quot;</span> <span class="stringliteral">&quot;\t&quot;</span> __FILE__ _TX_NAME EOL_
<a name="l05257"></a>05257                  <span class="stringliteral">&quot;Compiled:&quot;</span>   <span class="stringliteral">&quot;\t&quot;</span> __DATE__ <span class="stringliteral">&quot; &quot;</span> __TIME__ <span class="stringliteral">&quot;, &quot;</span> <a class="code" href="a00032.htm#ga3e287c38947fea870d01588fbd2a5fc9" title="Имя режима сборки">_TX_BUILDMODE</a> <span class="stringliteral">&quot; mode, by &quot;</span> <a class="code" href="a00032.htm#gadd1c9ccd036228402b807abaea14f7ee" title="Имя и версия текущего компилятора">__TX_COMPILER__</a> EOL_
<a name="l05258"></a>05258                  <span class="stringliteral">&quot;Started:&quot;</span>    <span class="stringliteral">&quot;\t&quot;</span> <span class="stringliteral">&quot;%.6s %.4s %.8s&quot;</span> EOL_ <span class="stringliteral">&quot;\n&quot;</span>
<a name="l05259"></a>05259 
<a name="l05260"></a>05260                  <span class="stringliteral">&quot;Running:&quot;</span>    <span class="stringliteral">&quot;\t&quot;</span> <span class="stringliteral">&quot;%s&quot;</span> EOL_
<a name="l05261"></a>05261                  <span class="stringliteral">&quot;Directory:&quot;</span>  <span class="stringliteral">&quot;\t&quot;</span> <span class="stringliteral">&quot;%s&quot;</span>,
<a name="l05262"></a>05262 
<a name="l05263"></a>05263                  timeS + 4, timeS + 20, timeS + 11,  <span class="comment">// These offsets are ANSI standardized</span>
<a name="l05264"></a>05264                  <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a>(),
<a name="l05265"></a>05265                  _getcwd (cwd, <span class="keyword">sizeof</span> (cwd) - 1));
<a name="l05266"></a>05266 <span class="preprocessor">    #undef EOL_</span>
<a name="l05267"></a>05267 <span class="preprocessor"></span>
<a name="l05268"></a>05268 $   MessageBox (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), text, <span class="stringliteral">&quot;About &quot;</span> ABOUT_NAME_, MB_ICONINFORMATION);
<a name="l05269"></a>05269 
<a name="l05270"></a>05270     <span class="comment">// And a bit of HTTP-code in C++ function:</span>
<a name="l05271"></a>05271 
<a name="l05272"></a>05272     <span class="keywordflow">goto</span> http;
<a name="l05273"></a>05273     http:<span class="comment">//ded32.net.ru                               // See valuable refs here :)</span>
<a name="l05274"></a>05274 
<a name="l05275"></a>05275 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l05276"></a>05276 
<a name="l05277"></a>05277 <span class="preprocessor">    #undef ABOUT_NAME_</span>
<a name="l05278"></a>05278 <span class="preprocessor"></span>    }
<a name="l05279"></a>05279 
<a name="l05280"></a>05280 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05281"></a>05281 
<a name="l05282"></a>05282 LRESULT CALLBACK _txCanvas_WndProc (HWND wnd, UINT msg, WPARAM wpar, LPARAM lpar)
<a name="l05283"></a>05283     {
<a name="l05284"></a>05284     <span class="keywordflow">if</span> (msg == WM_KEYDOWN &amp;&amp; wpar == VK_F12 &amp;&amp;
<a name="l05285"></a>05285         GetKeyState (VK_SHIFT) &amp;&amp; GetKeyState (VK_CONTROL) &amp;&amp; GetKeyState (VK_MENU))
<a name="l05286"></a>05286         {
<a name="l05287"></a>05287 $       _txCanvas_OnCmdABOUT (wnd,      wpar);
<a name="l05288"></a>05288 $       <span class="keywordflow">return</span> DefWindowProc (wnd, msg, wpar, lpar);
<a name="l05289"></a>05289         }
<a name="l05290"></a>05290 
<a name="l05291"></a>05291     WNDPROC altWndProc = _txAltWndProc;
<a name="l05292"></a>05292     <span class="keywordflow">if</span> (altWndProc)
<a name="l05293"></a>05293         {
<a name="l05294"></a>05294 $       LRESULT res = altWndProc (wnd, msg, wpar, lpar);
<a name="l05295"></a>05295 $       <span class="keywordflow">if</span> (res) <span class="keywordflow">return</span> res;
<a name="l05296"></a>05296         }
<a name="l05297"></a>05297 
<a name="l05298"></a>05298     <span class="keywordflow">switch</span> (msg)
<a name="l05299"></a>05299         {
<a name="l05300"></a>05300         <span class="keywordflow">case</span> WM_CREATE:  $      _txCanvas_OnCREATE     (wnd);             <span class="keywordflow">break</span>;
<a name="l05301"></a>05301 
<a name="l05302"></a>05302         <span class="keywordflow">case</span> WM_CLOSE:   $ <span class="keywordflow">if</span> (!_txCanvas_OnCLOSE      (wnd)) <span class="keywordflow">return</span> 0;   <span class="keywordflow">break</span>;
<a name="l05303"></a>05303         <span class="keywordflow">case</span> WM_DESTROY: $      _txCanvas_OnDESTROY    (wnd);             <span class="keywordflow">break</span>;
<a name="l05304"></a>05304 
<a name="l05305"></a>05305         <span class="keywordflow">case</span> WM_PAINT:   $      _txCanvas_OnPAINT      (wnd);             <span class="keywordflow">break</span>;
<a name="l05306"></a>05306         <span class="keywordflow">case</span> WM_CHAR:    $      _txCanvas_OnCHAR       (wnd, wpar);       <span class="keywordflow">break</span>;
<a name="l05307"></a>05307         <span class="keywordflow">case</span> WM_TIMER:   $      _txCanvas_OnTIMER      (wnd, wpar);       <span class="keywordflow">break</span>;
<a name="l05308"></a>05308 
<a name="l05309"></a>05309         <span class="keywordflow">case</span> WM_LBUTTONUP:
<a name="l05310"></a>05310         <span class="keywordflow">case</span> WM_LBUTTONDOWN:
<a name="l05311"></a>05311         <span class="keywordflow">case</span> WM_RBUTTONUP:
<a name="l05312"></a>05312         <span class="keywordflow">case</span> WM_RBUTTONDOWN:
<a name="l05313"></a>05313         <span class="keywordflow">case</span> WM_MBUTTONUP:
<a name="l05314"></a>05314         <span class="keywordflow">case</span> WM_MBUTTONDOWN:
<a name="l05315"></a>05315         <span class="keywordflow">case</span> WM_MOUSEMOVE:    $ _txCanvas_OnMOUSEMOVE  (wnd, wpar, lpar); <span class="keywordflow">break</span>;
<a name="l05316"></a>05316         <span class="keywordflow">default</span>:              $ <span class="keywordflow">break</span>;
<a name="l05317"></a>05317         }
<a name="l05318"></a>05318 
<a name="l05319"></a>05319     <span class="keywordflow">if</span> (msg == WM_SYSCOMMAND) <span class="keywordflow">switch</span> (wpar)
<a name="l05320"></a>05320         {
<a name="l05321"></a>05321         <span class="keywordflow">case</span> _TX_IDM_ABOUT:   $ _txCanvas_OnCmdABOUT   (wnd, wpar);       <span class="keywordflow">break</span>;
<a name="l05322"></a>05322         <span class="keywordflow">case</span> _TX_IDM_CONSOLE: $ _txCanvas_OnCmdCONSOLE (wnd, wpar);       <span class="keywordflow">break</span>;
<a name="l05323"></a>05323         <span class="keywordflow">default</span>:              $ <span class="keywordflow">break</span>;
<a name="l05324"></a>05324         }
<a name="l05325"></a>05325 
<a name="l05326"></a>05326     <span class="keywordflow">return</span> DefWindowProc (wnd, msg, wpar, lpar);
<a name="l05327"></a>05327 
<a name="l05328"></a>05328 <span class="preprocessor">    #undef IS_TXLIB_HOTKEY_</span>
<a name="l05329"></a>05329 <span class="preprocessor"></span>    }
<a name="l05330"></a>05330 
<a name="l05332"></a>05332 <span class="comment">//}</span>
<a name="l05333"></a>05333 <span class="comment">//============================================================================================</span>
<a name="l05334"></a>05334 
<a name="l05335"></a>05335 <span class="comment">//============================================================================================</span>
<a name="l05336"></a>05336 <span class="comment">//{          [Internal] Console-support functions  (_txConsole...)</span>
<a name="l05338"></a>05338 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l05340"></a>05340 <span class="comment"></span>
<a name="l05341"></a>05341 HWND _txConsole_Attach()
<a name="l05342"></a>05342     {
<a name="l05343"></a>05343 $1  HWND console = Win32::GetConsoleWindow();
<a name="l05344"></a>05344 
<a name="l05345"></a>05345 $   GetWindowRect (console, &amp;_txConsole_Pos);
<a name="l05346"></a>05346 $   _txConsole_Active = (console &amp;&amp; GetForegroundWindow() == console);
<a name="l05347"></a>05347 
<a name="l05348"></a>05348 $   <span class="keywordflow">if</span> (!console) AllocConsole();
<a name="l05349"></a>05349 
<a name="l05350"></a>05350 $   console = Win32::GetConsoleWindow();
<a name="l05351"></a>05351 $   <span class="keywordflow">if</span> (!console) <span class="keywordflow">return</span> NULL;
<a name="l05352"></a>05352 
<a name="l05353"></a>05353     <span class="comment">// Linux::Wine v1.2.2 compatibility.</span>
<a name="l05354"></a>05354     <span class="comment">// Beer compatibility will be added in future versions.</span>
<a name="l05355"></a>05355     <span class="comment">// Минздрав РФ предупреждает: чрезмерное употребление wine</span>
<a name="l05356"></a>05356     <span class="comment">// вредит Вашему здоровью.</span>
<a name="l05357"></a>05357 
<a name="l05358"></a>05358 $   <span class="keywordflow">if</span> (Win32::wine_get_version)
<a name="l05359"></a>05359         {
<a name="l05360"></a>05360 $       Win32::GetNumberOfConsoleFonts = NULL;
<a name="l05361"></a>05361 $       Win32::GetCurrentConsoleFont   = NULL;
<a name="l05362"></a>05362 $       Win32::SetConsoleFont          = NULL;
<a name="l05363"></a>05363         }
<a name="l05364"></a>05364 
<a name="l05365"></a>05365     <span class="comment">// Устанавливаем русскую кодовую страницу для консоли Windows</span>
<a name="l05366"></a>05366 
<a name="l05367"></a>05367 $   SetConsoleCP       (1251);
<a name="l05368"></a>05368 $   SetConsoleOutputCP (1251);
<a name="l05369"></a>05369 
<a name="l05370"></a>05370     <span class="comment">// Устанавливаем русскую кодовую страницу для стандартной библиотеки,</span>
<a name="l05371"></a>05371     <span class="comment">// иначе не будут работать Unicode-версии функций (wprintf, ...).</span>
<a name="l05372"></a>05372     <span class="comment">// Если компилите с помощью gcc, не забудьте указать опции компилятора:</span>
<a name="l05373"></a>05373     <span class="comment">// -finput-charset=CP1251 -fexec-charset=CP1251</span>
<a name="l05374"></a>05374     <span class="comment">// если собираетесь использовать L&quot;unicode-строки&quot;.</span>
<a name="l05375"></a>05375 
<a name="l05376"></a>05376 $   setlocale (LC_CTYPE, <span class="stringliteral">&quot;Russian&quot;</span>);
<a name="l05377"></a>05377 $   <span class="keywordflow">if</span> (!Win32::wine_get_version) _wsetlocale (LC_CTYPE, L<span class="stringliteral">&quot;Russian_Russia.ACP&quot;</span>);
<a name="l05378"></a>05378 
<a name="l05379"></a>05379 $   <span class="keyword">static</span> <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l05380"></a>05380 $   <span class="keywordflow">if</span> (done) <span class="keywordflow">return</span> console;
<a name="l05381"></a>05381 
<a name="l05382"></a>05382     <span class="comment">// Впечатлительным лучше сюда не смотреть.</span>
<a name="l05383"></a>05383 
<a name="l05384"></a>05384 $   _txConsole_SetUnicodeFont();
<a name="l05385"></a>05385 
<a name="l05386"></a>05386 <span class="preprocessor">#ifndef _CONSOLE</span>
<a name="l05387"></a>05387 <span class="preprocessor"></span>
<a name="l05388"></a>05388     <span class="comment">// Переоткрываем заново &lt;s&gt;Америку&lt;/s&gt; потоки ввода-вывода, если subsystem != console</span>
<a name="l05389"></a>05389 
<a name="l05390"></a>05390 $                    *stdin  = *_fdopen (_open_osfhandle ((DWORD)(ptrdiff_t) GetStdHandle (STD_INPUT_HANDLE),  _O_TEXT), <span class="stringliteral">&quot;r&quot;</span>);
<a name="l05391"></a>05391 $   fflush (stdout); *stdout = *_fdopen (_open_osfhandle ((DWORD)(ptrdiff_t) GetStdHandle (STD_OUTPUT_HANDLE), _O_TEXT), <span class="stringliteral">&quot;w&quot;</span>);
<a name="l05392"></a>05392 $   fflush (stderr); *stderr = *_fdopen (_open_osfhandle ((DWORD)(ptrdiff_t) GetStdHandle (STD_ERROR_HANDLE),  _O_TEXT), <span class="stringliteral">&quot;w&quot;</span>);
<a name="l05393"></a>05393 
<a name="l05394"></a>05394 $   setvbuf (stdin,  NULL, _IONBF, 0);
<a name="l05395"></a>05395 $   setvbuf (stdout, NULL, _IONBF, 0);
<a name="l05396"></a>05396 $   setvbuf (stderr, NULL, _IONBF, 0);
<a name="l05397"></a>05397 
<a name="l05398"></a>05398 $   std::ios::sync_with_stdio();
<a name="l05399"></a>05399 
<a name="l05400"></a>05400 <span class="preprocessor">#endif</span>
<a name="l05401"></a>05401 <span class="preprocessor"></span>
<a name="l05402"></a>05402     <span class="comment">// That&#39;s all, folks</span>
<a name="l05403"></a>05403 
<a name="l05404"></a>05404 $   done = <span class="keyword">true</span>;
<a name="l05405"></a>05405 $   <span class="keywordflow">return</span> console;
<a name="l05406"></a>05406     }
<a name="l05407"></a>05407 
<a name="l05408"></a>05408 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05409"></a>05409 
<a name="l05410"></a>05410 <span class="keywordtype">bool</span> _txConsole_SetUnicodeFont()
<a name="l05411"></a>05411     {
<a name="l05412"></a>05412     <span class="comment">// Начиная с Висты все хорошо...</span>
<a name="l05413"></a>05413 
<a name="l05414"></a>05414 $1  <span class="keywordflow">if</span> (Win32::GetCurrentConsoleFontEx &amp;&amp;
<a name="l05415"></a>05415         Win32::SetCurrentConsoleFontEx)
<a name="l05416"></a>05416         {
<a name="l05417"></a>05417 $       HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l05418"></a>05418 
<a name="l05419"></a>05419 $       Win32::CONSOLE_FONT_INFOEX info = { <span class="keyword">sizeof</span> (info) };
<a name="l05420"></a>05420 $       <span class="keywordflow">if</span> (!Win32::GetCurrentConsoleFontEx (out, <span class="keyword">false</span>, &amp;info)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05421"></a>05421 
<a name="l05422"></a>05422 $       info.FontFamily = 0x36;  <span class="comment">// Unicode fixed-pitch</span>
<a name="l05423"></a>05423 
<a name="l05424"></a>05424 $       <span class="keywordflow">return</span> !!Win32::SetCurrentConsoleFontEx (out, <span class="keyword">false</span>, &amp;info);
<a name="l05425"></a>05425         }
<a name="l05426"></a>05426 
<a name="l05427"></a>05427     <span class="comment">// ...а до этого все не так сладко</span>
<a name="l05428"></a>05428 
<a name="l05429"></a>05429 $   <span class="keyword">const</span> <span class="keywordtype">unsigned</span> uniFont = 10;  <span class="comment">// The Internet and W2K sources know this magic number</span>
<a name="l05430"></a>05430 $   <span class="keyword">const</span> <span class="keywordtype">unsigned</span> uniSize = 20;  <span class="comment">// Size of the font desired, should be &gt; max of Raster Fonts</span>
<a name="l05431"></a>05431 
<a name="l05432"></a>05432     <span class="comment">// Force Windows to use Unicode font by creating and run the console shortcut</span>
<a name="l05433"></a>05433     <span class="comment">// tuned to use that font.</span>
<a name="l05434"></a>05434 
<a name="l05435"></a>05435 $   HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l05436"></a>05436 
<a name="l05437"></a>05437 $   <span class="keywordflow">if</span> (_TX_SAFECALL (Win32::GetNumberOfConsoleFonts)() &lt;= uniFont)
<a name="l05438"></a>05438         {
<a name="l05439"></a>05439 $       HRESULT init = Win32::CoInitialize (NULL);
<a name="l05440"></a>05440 $       <span class="keywordtype">size_t</span> sz = 0;
<a name="l05441"></a>05441 
<a name="l05442"></a>05442 $       <span class="keywordtype">char</span> link [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05443"></a>05443 $       getenv_s (&amp;sz, link, <span class="keyword">sizeof</span> (link), <span class="stringliteral">&quot;TEMP&quot;</span>);
<a name="l05444"></a>05444 $       strncat_s (link, <span class="stringliteral">&quot;\\_txLink.lnk&quot;</span>, <span class="keyword">sizeof</span> (link));
<a name="l05445"></a>05445 
<a name="l05446"></a>05446 $       <span class="keywordtype">char</span> comspec [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05447"></a>05447 $       getenv_s (&amp;sz, comspec, <span class="keyword">sizeof</span> (comspec), <span class="stringliteral">&quot;COMSPEC&quot;</span>);
<a name="l05448"></a>05448 
<a name="l05449"></a>05449 $       _txCreateShortcut (link, comspec, <span class="stringliteral">&quot;/c exit&quot;</span>, NULL, NULL,
<a name="l05450"></a>05450                            SW_SHOWMINNOACTIVE, NULL, 0, uniSize) asserted;
<a name="l05451"></a>05451 
<a name="l05452"></a>05452 $       ShellExecute (NULL, NULL, link, NULL, NULL, SW_SHOWMINNOACTIVE) &gt; (<span class="keywordtype">void</span>*)32 asserted;
<a name="l05453"></a>05453 $       _txWaitFor (FindWindow (NULL, &quot;_txLink&quot;));
<a name="l05454"></a>05454 
<a name="l05455"></a>05455 $       _unlink (link) == 0 asserted;
<a name="l05456"></a>05456 
<a name="l05457"></a>05457 $       if (init == S_OK) Win32::CoUninitialize();
<a name="l05458"></a>05458         }
<a name="l05459"></a>05459 
<a name="l05460"></a>05460     <span class="comment">// If Unicode font is not already set, do set it.</span>
<a name="l05461"></a>05461 
<a name="l05462"></a>05462 $   CONSOLE_FONT_INFO cur = {0};
<a name="l05463"></a>05463 $   _TX_SAFECALL (Win32::GetCurrentConsoleFont) (out, <span class="keyword">false</span>, &amp;cur);
<a name="l05464"></a>05464 
<a name="l05465"></a>05465 $   <span class="keywordtype">bool</span> ok = (cur.nFont &gt;= uniFont) || !!(_TX_SAFECALL (Win32::SetConsoleFont) (out, uniFont));
<a name="l05466"></a>05466 
<a name="l05467"></a>05467 $   HWND console = Win32::GetConsoleWindow();
<a name="l05468"></a>05468 $   InvalidateRect (console, NULL, <span class="keyword">false</span>);
<a name="l05469"></a>05469 $   UpdateWindow   (console);
<a name="l05470"></a>05470 
<a name="l05471"></a>05471 $   <span class="keywordflow">return</span> ok;
<a name="l05472"></a>05472     }
<a name="l05473"></a>05473 
<a name="l05474"></a>05474 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05475"></a>05475 
<a name="l05476"></a>05476 <span class="keyword">inline</span> <span class="keywordtype">bool</span> _txConsole_OK()
<a name="l05477"></a>05477     {
<a name="l05478"></a>05478 $1  <span class="keywordflow">return</span> Win32::GetConsoleWindow() != NULL;
<a name="l05479"></a>05479     }
<a name="l05480"></a>05480 
<a name="l05481"></a>05481 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05482"></a>05482 
<a name="l05483"></a>05483 <span class="keywordtype">bool</span> _txConsole_Detach (<span class="keywordtype">bool</span> restorePos)
<a name="l05484"></a>05484     {
<a name="l05485"></a>05485 $1  HWND console = Win32::GetConsoleWindow();
<a name="l05486"></a>05486 $   <span class="keywordflow">if</span> (!console) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05487"></a>05487 
<a name="l05488"></a>05488 $   <span class="keywordflow">if</span> (restorePos)
<a name="l05489"></a>05489         {
<a name="l05490"></a>05490 $       RECT r = {0};
<a name="l05491"></a>05491 $       GetWindowRect (console, &amp;r);
<a name="l05492"></a>05492 
<a name="l05493"></a>05493 $       MoveWindow (console, _txConsole_Pos.left, _txConsole_Pos.top,
<a name="l05494"></a>05494                     r.right - r.left, r.bottom - r.top, <span class="keyword">true</span>);
<a name="l05495"></a>05495         }
<a name="l05496"></a>05496 
<a name="l05497"></a>05497 $   <span class="keywordflow">if</span> (<a class="code" href="a00034.htm#gab4c131ad86b5b53baf2e8b271876c814" title="Режим отображения консольного окна. Допустимы любые флаги функции SetWindowPos.">_TX_CONSOLE_MODE</a> &amp; SWP_HIDEWINDOW) ShowWindow (console, SW_SHOW);
<a name="l05498"></a>05498 $   <span class="keywordflow">if</span> (_txConsole_Active)                 SetForegroundWindow (console);
<a name="l05499"></a>05499 
<a name="l05500"></a>05500 $   <span class="keywordflow">return</span> !!FreeConsole();
<a name="l05501"></a>05501     }
<a name="l05502"></a>05502 
<a name="l05503"></a>05503 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05504"></a>05504 
<a name="l05505"></a>05505 <span class="keywordtype">bool</span> _txConsole_Draw (HDC dc)
<a name="l05506"></a>05506     {
<a name="l05507"></a>05507 $1  _TX_IF_ARGUMENT_FAILED (dc) return false;
<a name="l05508"></a>05508 
<a name="l05509"></a>05509 $   HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l05510"></a>05510 
<a name="l05511"></a>05511 $   CONSOLE_SCREEN_BUFFER_INFO con = {{0}};
<a name="l05512"></a>05512 $   BOOL ok = GetConsoleScreenBufferInfo (out, &amp;con);
<a name="l05513"></a>05513 $   <span class="keywordflow">if</span> (!ok) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05514"></a>05514 
<a name="l05515"></a>05515 $   SIZE fontSz = { 12, 16 };
<a name="l05516"></a>05516 $   Win32::GetTextExtentPoint32 (dc, <span class="stringliteral">&quot;W&quot;</span>, 1, &amp;fontSz) asserted;
<a name="l05517"></a>05517 
<a name="l05518"></a>05518 $   POINT size = { con.srWindow.Right  - con.srWindow.Left + 1,
<a name="l05519"></a>05519                    con.srWindow.Bottom - con.srWindow.Top  + 1 };
<a name="l05520"></a>05520 
<a name="l05521"></a>05521 $   COLORREF pal [16] = { 0x000000, 0x800000, 0x008000, 0x808000, 0x000080, 0x800080, 0x008080, 0xC0C0C0,
<a name="l05522"></a>05522                           0x808080, 0xFF0000, 0x00FF00, 0xFFFF00, 0x0000FF, 0xFF00FF, 0x00FFFF, 0xFFFFFF };
<a name="l05523"></a>05523 
<a name="l05524"></a>05524 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = 0; y &lt; size.y; y++)
<a name="l05525"></a>05525         {
<a name="l05526"></a>05526         <span class="keyword">static</span> <span class="keywordtype">char</span> chr [_TX_BUFSIZE + 1] = <span class="stringliteral">&quot;&quot;</span>;  <span class="comment">// [con.dwSize.X + 1]</span>
<a name="l05527"></a>05527         <span class="keyword">static</span> WORD atr [_TX_BUFSIZE + 1] = {0}; <span class="comment">// [con.dwSize.X + 1]</span>
<a name="l05528"></a>05528         COORD coord = { (short) (con.srWindow.Left), (short) (y + con.srWindow.Top) };
<a name="l05529"></a>05529         DWORD read  = 0;
<a name="l05530"></a>05530 
<a name="l05531"></a>05531         <span class="keywordflow">if</span> (!ReadConsoleOutputCharacter (out, chr, <a class="code" href="a00032.htm#ga799c47c1a2a151647cd765e1fa4b27b5">sizearr</a> (chr) - 1, coord, &amp;read)) <span class="keywordflow">continue</span>;
<a name="l05532"></a>05532         <span class="keywordflow">if</span> (!ReadConsoleOutputAttribute (out, atr, <a class="code" href="a00032.htm#ga799c47c1a2a151647cd765e1fa4b27b5">sizearr</a> (atr) - 1, coord, &amp;read)) <span class="keywordflow">continue</span>;
<a name="l05533"></a>05533 
<a name="l05534"></a>05534         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = 0, xEnd = size.x; x &lt; size.x; x = xEnd)
<a name="l05535"></a>05535             {
<a name="l05536"></a>05536             Win32::SetTextColor (dc, pal [ atr[x]       &amp; 0x0F]);
<a name="l05537"></a>05537             Win32::SetBkColor   (dc, pal [(atr[x] &gt;&gt; 4) &amp; 0x0F]);
<a name="l05538"></a>05538             Win32::SetBkMode    (dc,      (atr[x]       &amp; 0xF0)? OPAQUE : TRANSPARENT);
<a name="l05539"></a>05539 
<a name="l05540"></a>05540             <span class="keywordflow">for</span> (xEnd = x+1; atr[xEnd] == atr[x] &amp;&amp; xEnd &lt; size.x; xEnd++) ;
<a name="l05541"></a>05541 
<a name="l05542"></a>05542             Win32::TextOut (dc, (x + con.srWindow.Left) * fontSz.cx, y * fontSz.cy,
<a name="l05543"></a>05543                             chr + x, xEnd - x) asserted;
<a name="l05544"></a>05544             }
<a name="l05545"></a>05545         }
<a name="l05546"></a>05546 
<a name="l05547"></a>05547 $   Win32::SetTextColor (dc, pal [ con.wAttributes       &amp; 0x0F]);
<a name="l05548"></a>05548 $   Win32::SetBkColor   (dc, pal [(con.wAttributes &gt;&gt; 4) &amp; 0x0F]);
<a name="l05549"></a>05549 $   Win32::SetBkMode    (dc, TRANSPARENT);
<a name="l05550"></a>05550 
<a name="l05551"></a>05551 $   if (_txConsole_IsBlinking &amp;&amp;
<a name="l05552"></a>05552         <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (con.dwCursorPosition, con.srWindow) &amp;&amp;
<a name="l05553"></a>05553         GetTickCount() % <a class="code" href="a00034.htm#ga2e46adf7525fa0625c9aae3609b3a629" title="Интервал мигания курсора консоли (мс)">_TX_CURSOR_BLINK_INTERVAL</a>*2 &gt; <a class="code" href="a00034.htm#ga2e46adf7525fa0625c9aae3609b3a629" title="Интервал мигания курсора консоли (мс)">_TX_CURSOR_BLINK_INTERVAL</a> &amp;&amp;
<a name="l05554"></a>05554         GetForegroundWindow() == txWindow())
<a name="l05555"></a>05555         {
<a name="l05556"></a>05556 $       Win32::TextOut (dc, (con.dwCursorPosition.X - con.srWindow.Left) * fontSz.cx,
<a name="l05557"></a>05557                             (con.dwCursorPosition.Y - con.srWindow.Top)  * fontSz.cy + 1,
<a name="l05558"></a>05558                             <span class="stringliteral">&quot;_&quot;</span>, 1) asserted;
<a name="l05559"></a>05559         }
<a name="l05560"></a>05560 
<a name="l05561"></a>05561 $   return true;
<a name="l05562"></a>05562     }
<a name="l05563"></a>05563 
<a name="l05564"></a>05564 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05565"></a>05565 
<a name="l05566"></a>05566 <span class="preprocessor">#define      _TX_TRY                { goto __tx_try; } __tx_try: { int __tx_error = S_OK; (void)__tx_error;</span>
<a name="l05567"></a>05567 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_CHECKED( cmd )     { if (FAILED (__tx_error = (cmd))) goto __tx_catch; }</span>
<a name="l05568"></a>05568 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_FAIL               { __tx_error = E_FAIL; goto __tx_catch; }</span>
<a name="l05569"></a>05569 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_RETRY              { __tx_error = S_OK;   goto __tx_try;   }</span>
<a name="l05570"></a>05570 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_OK                 ( SUCCEEDED (__tx_error) )</span>
<a name="l05571"></a>05571 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_CATCH              goto __tx_finally; __tx_catch:</span>
<a name="l05572"></a>05572 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_RETURN             goto __tx_finally;</span>
<a name="l05573"></a>05573 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_FINALLY            __tx_finally:</span>
<a name="l05574"></a>05574 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_ENDTRY             }</span>
<a name="l05575"></a>05575 <span class="preprocessor"></span>
<a name="l05576"></a>05576 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05577"></a>05577 
<a name="l05578"></a>05578 <span class="comment">// Мало не покажется...</span>
<a name="l05579"></a>05579 
<a name="l05580"></a>05580 <span class="keywordtype">bool</span> _txCreateShortcut (<span class="keyword">const</span> <span class="keywordtype">char</span> shortcutName[],
<a name="l05581"></a>05581                         <span class="keyword">const</span> <span class="keywordtype">char</span> fileToLink[], <span class="keyword">const</span> <span class="keywordtype">char</span> args[] <span class="comment">/*= NULL*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> workDir[] <span class="comment">/*= NULL*/</span>,
<a name="l05582"></a>05582                         <span class="keyword">const</span> <span class="keywordtype">char</span> description[] <span class="comment">/*= NULL*/</span>, <span class="keywordtype">int</span> cmdShow <span class="comment">/*= SW_SHOWNORMAL*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> iconFile[] <span class="comment">/*= NULL*/</span>, <span class="keywordtype">int</span> iconIndex <span class="comment">/*= 0*/</span>,
<a name="l05583"></a>05583                         <span class="keywordtype">int</span> fontSize <span class="comment">/*= 0*/</span>, COORD bufSize <span class="comment">/*= ZERO (COORD)*/</span>, COORD wndSize <span class="comment">/*= ZERO (COORD)*/</span>, COORD wndOrg <span class="comment">/*=ZERO (COORD)*/</span>)
<a name="l05584"></a>05584     {
<a name="l05585"></a>05585 $1  _TX_IF_ARGUMENT_FAILED (shortcutName &amp;&amp; *shortcutName) return false;
<a name="l05586"></a>05586 $   _TX_IF_ARGUMENT_FAILED (fileToLink   &amp;&amp; *fileToLink)   return false;
<a name="l05587"></a>05587 
<a name="l05588"></a>05588 $   IShellLink* shellLink = NULL;
<a name="l05589"></a>05589 $   Win32::IShellLinkDataList* dataList = NULL;
<a name="l05590"></a>05590 $   IPersistFile* file = NULL;
<a name="l05591"></a>05591 
<a name="l05592"></a>05592 $   HRESULT init = Win32::CoInitialize (NULL);
<a name="l05593"></a>05593 
<a name="l05594"></a>05594     _TX_TRY
<a name="l05595"></a>05595         {
<a name="l05596"></a>05596 $       _TX_CHECKED (Win32::CoCreateInstance (CLSID_ShellLink, NULL, CLSCTX_INPROC_SERVER, IID_IShellLink, (<span class="keywordtype">void</span>**) &amp;shellLink));
<a name="l05597"></a>05597 $       <span class="keywordflow">if</span> (!shellLink) _TX_FAIL;
<a name="l05598"></a>05598 
<a name="l05599"></a>05599 $       shellLink-&gt;SetPath (fileToLink);
<a name="l05600"></a>05600 $       shellLink-&gt;SetArguments (args);
<a name="l05601"></a>05601 $       shellLink-&gt;SetWorkingDirectory (workDir);
<a name="l05602"></a>05602 $       shellLink-&gt;SetDescription (description);
<a name="l05603"></a>05603 $       shellLink-&gt;SetShowCmd (cmdShow);
<a name="l05604"></a>05604 $       shellLink-&gt;SetIconLocation (iconFile, iconIndex);
<a name="l05605"></a>05605 
<a name="l05606"></a>05606 $       _TX_CHECKED (shellLink-&gt;QueryInterface (Win32::IID_IShellLinkDataList, (<span class="keywordtype">void</span>**) &amp;dataList));
<a name="l05607"></a>05607 $       <span class="keywordflow">if</span> (!dataList) _TX_FAIL;
<a name="l05608"></a>05608 
<a name="l05609"></a>05609 $       Win32::NT_CONSOLE_PROPS props =
<a name="l05610"></a>05610           {{<span class="keyword">sizeof</span> (props), NT_CONSOLE_PROPS_SIG},
<a name="l05611"></a>05611 
<a name="l05612"></a>05612             0x07, 0xF5,                                 <span class="comment">// wFillAttribute, wPopupFillAttribute</span>
<a name="l05613"></a>05613            {bufSize.X, bufSize.Y},                      <span class="comment">// dwScreenBufferSize</span>
<a name="l05614"></a>05614            {wndSize.X, wndSize.Y},                      <span class="comment">// dwWindowSize</span>
<a name="l05615"></a>05615            {wndOrg.X,  wndOrg.Y},                       <span class="comment">// dwWindowOrigin</span>
<a name="l05616"></a>05616             0,                                          <span class="comment">// nFont</span>
<a name="l05617"></a>05617             0,                                          <span class="comment">// nInputBufferSize</span>
<a name="l05618"></a>05618            {0, (short) fontSize},                       <span class="comment">// dwFontSize</span>
<a name="l05619"></a>05619             0x36, 400, L<span class="stringliteral">&quot;Lucida Console&quot;</span>,               <span class="comment">// uFontFamily, uFontWeight, FaceName. We dance for this!</span>
<a name="l05620"></a>05620             15,                                         <span class="comment">// uCursorSize</span>
<a name="l05621"></a>05621             0,  1, 1, 0,                                <span class="comment">// bFullScreen, bQuickEdit, bInsertMode, bAutoPosition</span>
<a name="l05622"></a>05622             50, 4, 0,                                   <span class="comment">// uHistoryBufferSize, uNumberOfHistoryBuffers, bHistoryNoDup</span>
<a name="l05623"></a>05623 
<a name="l05624"></a>05624            {0x000000, 0x800000, 0x008000, 0x808000, 0x000080, 0x800080, 0x008080, 0xC0C0C0,
<a name="l05625"></a>05625             0x808080, 0xFF0000, 0x00FF00, 0xFFFF00, 0x0000FF, 0xFF00FF, 0x00FFFF, 0xFFFFFF}
<a name="l05626"></a>05626             };
<a name="l05627"></a>05627 
<a name="l05628"></a>05628 $       _TX_CHECKED (dataList-&gt;AddDataBlock (&amp;props));
<a name="l05629"></a>05629 
<a name="l05630"></a>05630 $       _TX_CHECKED (shellLink-&gt;QueryInterface (Win32::IID_IPersistFile, (<span class="keywordtype">void</span>**) &amp;file));
<a name="l05631"></a>05631 $       <span class="keywordflow">if</span> (!file) _TX_FAIL;
<a name="l05632"></a>05632 
<a name="l05633"></a>05633 $       <span class="keywordtype">wchar_t</span> wName[MAX_PATH] = L<span class="stringliteral">&quot;&quot;</span>;
<a name="l05634"></a>05634 $       MultiByteToWideChar (CP_ACP, MB_PRECOMPOSED, shortcutName, -1, wName, MAX_PATH);
<a name="l05635"></a>05635 
<a name="l05636"></a>05636 $       _TX_CHECKED (file-&gt;Save (wName, <span class="keyword">true</span>));
<a name="l05637"></a>05637         }
<a name="l05638"></a>05638 
<a name="l05639"></a>05639 $   _TX_CATCH
<a name="l05640"></a>05640 $   _TX_FINALLY
<a name="l05641"></a>05641 
<a name="l05642"></a>05642 $   <span class="keywordflow">if</span> (file)      file     -&gt;Release();
<a name="l05643"></a>05643 $   <span class="keywordflow">if</span> (dataList)  dataList -&gt;Release();
<a name="l05644"></a>05644 $   <span class="keywordflow">if</span> (shellLink) shellLink-&gt;Release();
<a name="l05645"></a>05645 
<a name="l05646"></a>05646 $   <span class="keywordflow">if</span> (init == S_OK) Win32::CoUninitialize();
<a name="l05647"></a>05647 
<a name="l05648"></a>05648 $   <span class="keywordflow">return</span> _TX_OK;
<a name="l05649"></a>05649     _TX_ENDTRY
<a name="l05650"></a>05650     }
<a name="l05651"></a>05651 
<a name="l05653"></a>05653 <span class="comment">//}</span>
<a name="l05654"></a>05654 <span class="comment">//============================================================================================</span>
<a name="l05655"></a>05655 
<a name="l05656"></a>05656 <span class="comment">//============================================================================================</span>
<a name="l05657"></a>05657 <span class="comment">//{          [Internal] Memory DC functions        (_txBuffer...)</span>
<a name="l05659"></a>05659 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l05661"></a>05661 <span class="comment"></span>
<a name="l05662"></a>05662 HDC _txBuffer_Create (HWND wnd, <span class="keyword">const</span> POINT* size, HBITMAP bitmap)
<a name="l05663"></a>05663     {
<a name="l05664"></a>05664 $1  <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l05665"></a>05665 
<a name="l05666"></a>05666 $   HDC wndDC = GetDC (wnd);
<a name="l05667"></a>05667 $   <span class="keywordflow">if</span> (!wndDC) <span class="keywordflow">return</span> NULL;
<a name="l05668"></a>05668 
<a name="l05669"></a>05669 $   <span class="keywordflow">if</span> (!(Win32::GetDeviceCaps (wndDC, RASTERCAPS) &amp; RC_BITBLT)) <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;RC_BITBLT not supported&quot;</span>);
<a name="l05670"></a>05670 
<a name="l05671"></a>05671 $   RECT r = {0};
<a name="l05672"></a>05672 $   <span class="keywordflow">if</span> (wnd) GetClientRect (wnd, &amp;r) asserted;
<a name="l05673"></a>05673 $   POINT sz = { r.right - r.left, r.bottom - r.top };
<a name="l05674"></a>05674 $   <span class="keywordflow">if</span> (!size) size = &amp;sz;
<a name="l05675"></a>05675 
<a name="l05676"></a>05676 $   HDC dc = Win32::CreateCompatibleDC (wndDC);
<a name="l05677"></a>05677 $   <span class="keywordflow">if</span> (!dc) <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Cannot create buffer: CreateCompatibleDC() failed&quot;</span>);
<a name="l05678"></a>05678 
<a name="l05679"></a>05679 $   HBITMAP bmap = bitmap? bitmap : Win32::CreateCompatibleBitmap (wndDC, size-&gt;x, size-&gt;y);
<a name="l05680"></a>05680 $   <span class="keywordflow">if</span> (!bmap) <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Cannot create buffer: CreateCompatibleBitmap() failed&quot;</span>);
<a name="l05681"></a>05681 
<a name="l05682"></a>05682 $   Win32::SelectObject (dc, bmap) asserted;
<a name="l05683"></a>05683 
<a name="l05684"></a>05684 $   if (!bitmap) Win32::PatBlt (dc, 0, 0, size-&gt;x, size-&gt;y, BLACKNESS) asserted;
<a name="l05685"></a>05685 
<a name="l05686"></a>05686 $   ReleaseDC (wnd, wndDC) asserted;
<a name="l05687"></a>05687 
<a name="l05688"></a>05688 $   return dc;
<a name="l05689"></a>05689     }
<a name="l05690"></a>05690 
<a name="l05691"></a>05691 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05692"></a>05692 
<a name="l05693"></a>05693 <span class="keywordtype">bool</span> _txBuffer_Delete (HDC* dc)
<a name="l05694"></a>05694     {
<a name="l05695"></a>05695 $1  _TX_IF_ARGUMENT_FAILED (dc) return false;
<a name="l05696"></a>05696 $   if (!*dc) return false;
<a name="l05697"></a>05697 
<a name="l05698"></a>05698 $   if (!Win32::GetObjectType (Win32::GetCurrentObject (*dc, OBJ_BITMAP))) return false;
<a name="l05699"></a>05699 
<a name="l05700"></a>05700 $   <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l05701"></a>05701 
<a name="l05702"></a>05702 $   _txBuffer_Select (Win32::GetStockObject         (NULL_PEN),    *dc) asserted;
<a name="l05703"></a>05703 $   _txBuffer_Select (Win32::GetStockObject         (NULL_BRUSH),  *dc) asserted;
<a name="l05704"></a>05704 $   _txBuffer_Select (Win32::GetStockObject         (SYSTEM_FONT), *dc) asserted;
<a name="l05705"></a>05705 $   _txBuffer_Select (Win32::CreateCompatibleBitmap (*dc, 0, 0),   *dc) asserted;
<a name="l05706"></a>05706 
<a name="l05707"></a>05707 $   Win32::DeleteObject (Win32::GetCurrentObject (*dc, OBJ_BITMAP)) asserted;
<a name="l05708"></a>05708 
<a name="l05709"></a>05709 $   Win32::DeleteDC (*dc) asserted;
<a name="l05710"></a>05710 
<a name="l05711"></a>05711 $   *dc = NULL;
<a name="l05712"></a>05712 
<a name="l05713"></a>05713 $   return true;
<a name="l05714"></a>05714     }
<a name="l05715"></a>05715 
<a name="l05716"></a>05716 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05717"></a>05717 
<a name="l05718"></a>05718 <span class="keywordtype">bool</span> _txBuffer_Select (HGDIOBJ obj, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l05719"></a>05719     {
<a name="l05720"></a>05720 $1  _TX_IF_ARGUMENT_FAILED (obj) return false;
<a name="l05721"></a>05721 $   _TX_IF_ARGUMENT_FAILED (dc)  return false;
<a name="l05722"></a>05722 
<a name="l05723"></a>05723 $   if (!Win32::GetObjectType (obj)) <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (&quot;Invalid GDI <span class="keywordtype">object</span> type&quot;);
<a name="l05724"></a>05724 
<a name="l05725"></a>05725 $   <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l05726"></a>05726 
<a name="l05727"></a>05727 $   obj = Win32::SelectObject (dc, obj);
<a name="l05728"></a>05728 $   if (obj) Win32::DeleteObject (obj) asserted;
<a name="l05729"></a>05729 
<a name="l05730"></a>05730 $   return obj != NULL;
<a name="l05731"></a>05731     }
<a name="l05732"></a>05732 
<a name="l05734"></a>05734 <span class="comment">//}</span>
<a name="l05735"></a>05735 <span class="comment">//============================================================================================</span>
<a name="l05736"></a>05736 
<a name="l05737"></a>05737 <span class="comment">//============================================================================================</span>
<a name="l05738"></a>05738 <span class="comment">//{          Diagnostics</span>
<a name="l05740"></a>05740 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l05742"></a>05742 <span class="comment"></span>
<a name="l05743"></a>05743 <span class="keywordtype">void</span> _txOnSignal (<span class="keywordtype">int</span> sig<span class="comment">/* = 0*/</span>, <span class="keywordtype">int</span> fpe<span class="comment">/* = 0*/</span>)
<a name="l05744"></a>05744     {
<a name="l05745"></a>05745     <span class="keywordflow">if</span> (!sig &amp;&amp; !fpe)
<a name="l05746"></a>05746         {
<a name="l05747"></a>05747 $1      signal (SIGSEGV, (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))_txOnSignal) != SIG_ERR <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l05748"></a>05748 $       signal (SIGFPE,  (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))_txOnSignal) != SIG_ERR <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l05749"></a>05749 $       signal (SIGABRT, (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))_txOnSignal) != SIG_ERR <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l05750"></a>05750 $       signal (SIGILL,  (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))_txOnSignal) != SIG_ERR <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l05751"></a>05751 $       signal (SIGTERM, (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))_txOnSignal) != SIG_ERR <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l05752"></a>05752 $       <span class="keywordflow">return</span>;
<a name="l05753"></a>05753         }
<a name="l05754"></a>05754 
<a name="l05755"></a>05755     <span class="keyword">const</span> <span class="keywordtype">char</span>* sSig = <span class="stringliteral">&quot;: Неизвестный тип сигнала&quot;</span>;
<a name="l05756"></a>05756     <span class="keyword">const</span> <span class="keywordtype">char</span>* sFPE = <span class="stringliteral">&quot;: Неизвестный тип исключения&quot;</span>;
<a name="l05757"></a>05757 
<a name="l05758"></a>05758 <span class="preprocessor">    #define GET_DESCR_( str, code, descr )  case (code): { (str) = #code &quot;: &quot; descr; break; }</span>
<a name="l05759"></a>05759 <span class="preprocessor"></span>
<a name="l05760"></a>05760     <span class="keywordflow">switch</span> (sig)
<a name="l05761"></a>05761         {
<a name="l05762"></a>05762         GET_DESCR_ (sSig, SIGSEGV, <span class="stringliteral">&quot;Доступ по неверному указателю. Ставьте ассерты!&quot;</span>)
<a name="l05763"></a>05763         GET_DESCR_ (sSig, SIGILL,  &quot;Попытка выполнить недопустимую операцию. Проверьте указатели на функции.&quot;)
<a name="l05764"></a>05764         GET_DESCR_ (sSig, SIGABRT, &quot;Аварийное завершение программы, вызвана функция abort.&quot;)
<a name="l05765"></a>05765         GET_DESCR_ (sSig, SIGTERM, &quot;Получен сигнал принудительного завершения программы&quot;)
<a name="l05766"></a>05766         GET_DESCR_ (sSig, SIGFPE,  &quot;Грубая ошибка в вычислениях, деление на 0 или что-то еще&quot;)
<a name="l05767"></a>05767         default:   break;
<a name="l05768"></a>05768         }
<a name="l05769"></a>05769 
<a name="l05770"></a>05770     if (sig == SIGFPE) switch (fpe)
<a name="l05771"></a>05771         {
<a name="l05772"></a>05772 <span class="preprocessor">        #ifdef _FPE_INVALID</span>
<a name="l05773"></a>05773 <span class="preprocessor"></span>        GET_DESCR_ (sFPE, _FPE_INVALID,        <span class="stringliteral">&quot;Результат неверен&quot;</span>)
<a name="l05774"></a>05774         GET_DESCR_ (sFPE, _FPE_DENORMAL,       &quot;Денормализация&quot;)
<a name="l05775"></a>05775         GET_DESCR_ (sFPE, _FPE_ZERODIVIDE,     &quot;Деление на ноль&quot;)
<a name="l05776"></a>05776         GET_DESCR_ (sFPE, _FPE_OVERFLOW,       &quot;Переполнение результата&quot;)
<a name="l05777"></a>05777         GET_DESCR_ (sFPE, _FPE_UNDERFLOW,      &quot;Антипереполнение результата&quot;)
<a name="l05778"></a>05778         GET_DESCR_ (sFPE, _FPE_INEXACT,        &quot;Неточный результат&quot;)
<a name="l05779"></a>05779         GET_DESCR_ (sFPE, _FPE_UNEMULATED,     &quot;Операция не эмулируется&quot;)
<a name="l05780"></a>05780         GET_DESCR_ (sFPE, _FPE_SQRTNEG,        &quot;Квадратный корень из -1&quot;)
<a name="l05781"></a>05781         GET_DESCR_ (sFPE, _FPE_STACKOVERFLOW,  &quot;Переполнение стека&quot;)
<a name="l05782"></a>05782         GET_DESCR_ (sFPE, _FPE_STACKUNDERFLOW, &quot;Антипереполнение стека&quot;)
<a name="l05783"></a>05783         GET_DESCR_ (sFPE, _FPE_EXPLICITGEN,    &quot;Явный вызов исключения&quot;)
<a name="l05784"></a>05784         <span class="preprocessor">#endif</span>
<a name="l05785"></a>05785 <span class="preprocessor"></span>        <span class="keywordflow">default</span>:   <span class="keywordflow">break</span>;
<a name="l05786"></a>05786         }
<a name="l05787"></a>05787 
<a name="l05788"></a>05788 <span class="preprocessor">    #undef GET_DESCR_</span>
<a name="l05789"></a>05789 <span class="preprocessor"></span>
<a name="l05790"></a>05790     <span class="keywordflow">if</span> (sig == SIGFPE &amp;&amp; fpe)
<a name="l05791"></a>05791         _txError (NULL, 0, NULL, <span class="stringliteral">&quot;signal (%d, 0x%02X): %s, %s.&quot;</span><a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> sig <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> fpe <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> sSig <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> sFPE);
<a name="l05792"></a>05792     <span class="keywordflow">else</span>
<a name="l05793"></a>05793         _txError (NULL, 0, NULL, <span class="stringliteral">&quot;signal (%d): %s.&quot;</span>            <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> sig       <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> sSig);
<a name="l05794"></a>05794 
<a name="l05795"></a>05795     _txCleanup();
<a name="l05796"></a>05796     }
<a name="l05797"></a>05797 
<a name="l05798"></a>05798 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05799"></a>05799 
<a name="l05800"></a>05800 <span class="keywordtype">void</span> _txOnUnexpected()
<a name="l05801"></a>05801     {
<a name="l05802"></a>05802     _txError (NULL, 0, NULL,
<a name="l05803"></a>05803               <span class="stringliteral">&quot;std::unexpected(): Необработанное исключение. Проверьте свои catch-блоки. Перехватите catch (...). &quot;</span>
<a name="l05804"></a>05804               <span class="stringliteral">&quot;Если вы (зря) используете спецификацию исключений для функций, проверьте, не нарушена ли она.&quot;</span>);
<a name="l05805"></a>05805     }
<a name="l05806"></a>05806 
<a name="l05807"></a>05807 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05808"></a>05808 
<a name="l05809"></a>05809 <span class="keywordtype">void</span> _txOnTerminate()
<a name="l05810"></a>05810     {
<a name="l05811"></a>05811     _txError (NULL, 0, NULL,
<a name="l05812"></a>05812               <span class="stringliteral">&quot;std::terminate(): Программа будет завершена из-за неперехваченного исключения в функции main()\v&quot;</span>
<a name="l05813"></a>05813               <span class="stringliteral">&quot;или в деструкторе. Используйте try/catch блоки, перехватывайте catch (...), разбирайтесь, в чем дело.&quot;</span>);
<a name="l05814"></a>05814     }
<a name="l05815"></a>05815 
<a name="l05816"></a>05816 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05817"></a>05817 
<a name="l05818"></a>05818 <span class="keywordtype">int</span> <a class="code" href="a00032.htm#ga4cfbb1150d579322cb533a235050dece" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> format[], ...)
<a name="l05819"></a>05819     {
<a name="l05820"></a>05820     <span class="keywordflow">if</span> (!format) <span class="keywordflow">return</span> 0;
<a name="l05821"></a>05821 
<a name="l05822"></a>05822     <span class="keywordtype">bool</span> msgbox = (*format == <span class="charliteral">&#39;\a&#39;</span>)? (format++, <span class="keyword">true</span>) : <span class="keyword">false</span>;
<a name="l05823"></a>05823     <span class="keywordtype">bool</span> print  = (*format == <span class="charliteral">&#39;\f&#39;</span>)? (format++, <span class="keyword">true</span>) : <span class="keyword">false</span>;
<a name="l05824"></a>05824 
<a name="l05825"></a>05825     <span class="keywordtype">char</span> str[<a class="code" href="a00034.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BIGBUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05826"></a>05826 
<a name="l05827"></a>05827     va_list arg; va_start (arg, format);
<a name="l05828"></a>05828     <span class="keywordtype">int</span> n = _vsnprintf_s (str, <span class="keyword">sizeof</span> (str) - 1 _TX_TRUNCATE, format, arg);
<a name="l05829"></a>05829     va_end (arg);
<a name="l05830"></a>05830 
<a name="l05831"></a>05831     OutputDebugString (str);
<a name="l05832"></a>05832 
<a name="l05833"></a>05833     <span class="keywordflow">if</span> (print)
<a name="l05834"></a>05834         printf (str);
<a name="l05835"></a>05835 
<a name="l05836"></a>05836     <span class="keywordflow">if</span> (msgbox)
<a name="l05837"></a>05837         MessageBox ((<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>()? <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>() : Win32::GetConsoleWindow()),
<a name="l05838"></a>05838                     str, <span class="stringliteral">&quot;Оказывается, что&quot;</span>, MB_ICONEXCLAMATION | MB_TOPMOST);
<a name="l05839"></a>05839 
<a name="l05840"></a>05840     <span class="keywordflow">return</span> n;
<a name="l05841"></a>05841     }
<a name="l05842"></a>05842 
<a name="l05843"></a>05843 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05844"></a>05844 
<a name="l05845"></a>05845 <span class="keywordtype">bool</span> _txNotifyIcon (<span class="keywordtype">unsigned</span> flags, <span class="keyword">const</span> <span class="keywordtype">char</span> title[], <span class="keyword">const</span> <span class="keywordtype">char</span> info[], ...)
<a name="l05846"></a>05846     {
<a name="l05847"></a>05847 $1  _TX_IF_ARGUMENT_FAILED (info) return false;
<a name="l05848"></a>05848 
<a name="l05849"></a>05849 $   va_list arg; va_start (arg, info);
<a name="l05850"></a>05850 $   <span class="keywordtype">bool</span> ok = true;
<a name="l05851"></a>05851 
<a name="l05852"></a>05852     <span class="preprocessor">#if defined (_WIN32_IE) &amp;&amp; (_WIN32_IE &gt;= 0x0500)</span>
<a name="l05853"></a>05853 <span class="preprocessor"></span>
<a name="l05854"></a>05854 $   NOTIFYICONDATA nid = { <span class="keyword">sizeof</span> (nid) };
<a name="l05855"></a>05855 
<a name="l05856"></a>05856 $   nid.uFlags = NIF_ICON | NIF_TIP | NIF_INFO;
<a name="l05857"></a>05857 $   nid.hWnd   = NULL;
<a name="l05858"></a>05858 $   nid.uID    = 1;
<a name="l05859"></a>05859 $   nid.hIcon  = _txCreateTXIcon (16); <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (nid.hIcon);
<a name="l05860"></a>05860 $   strncpy_s    (nid.szTip, <span class="stringliteral">&quot;TXLib Information&quot;</span>, sizeof (nid.szTip));
<a name="l05861"></a>05861 $   strncpy_s    (nid.szInfoTitle, (title? title : <span class="stringliteral">&quot;TXLib сообщает&quot;</span>), sizeof (nid.szInfoTitle));
<a name="l05862"></a>05862 $   _vsnprintf_s (nid.szInfo, sizeof (nid.szInfo) _TX_TRUNCATE, info, arg);
<a name="l05863"></a>05863 $   nid.dwInfoFlags = flags;
<a name="l05864"></a>05864 
<a name="l05865"></a>05865 $   <a class="code" href="a00032.htm#ga4cfbb1150d579322cb533a235050dece" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> _TX_NAME <span class="stringliteral">&quot;- Icon notification: %s\n&quot;</span>, nid.szInfo);
<a name="l05866"></a>05866 
<a name="l05867"></a>05867 $   ok &amp;= !!Shell_NotifyIcon (NIM_ADD,    (::NOTIFYICONDATA*) &amp;nid);
<a name="l05868"></a>05868 $   ok &amp;= !!Shell_NotifyIcon (NIM_MODIFY, (::NOTIFYICONDATA*) &amp;nid);
<a name="l05869"></a>05869 
<a name="l05870"></a>05870 $   <span class="keywordflow">if</span> (nid.hIcon) DestroyIcon (nid.hIcon) asserted;
<a name="l05871"></a>05871 
<a name="l05872"></a>05872     <span class="preprocessor">#else</span>
<a name="l05873"></a>05873 <span class="preprocessor"></span>
<a name="l05874"></a>05874 $   <span class="keywordtype">char</span> nid_szInfo[<a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05875"></a>05875 $   _vsnprintf_s (nid_szInfo, <span class="keyword">sizeof</span> (nid_szInfo) _TX_TRUNCATE, info, arg);
<a name="l05876"></a>05876 $   <a class="code" href="a00032.htm#ga4cfbb1150d579322cb533a235050dece" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> _TX_NAME <span class="stringliteral">&quot;- Icon notification (NOT displayed): %s\n&quot;</span>, nid_szInfo);
<a name="l05877"></a>05877 $   ok = <span class="keyword">false</span>;
<a name="l05878"></a>05878 
<a name="l05879"></a>05879 $   (void)flags; (void)title;
<a name="l05880"></a>05880 
<a name="l05881"></a>05881 <span class="preprocessor">    #endif</span>
<a name="l05882"></a>05882 <span class="preprocessor"></span>
<a name="l05883"></a>05883 $   va_end (arg);
<a name="l05884"></a>05884 $   <span class="keywordflow">return</span> ok;
<a name="l05885"></a>05885     }
<a name="l05886"></a>05886 
<a name="l05887"></a>05887 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l05888"></a>05888 
<a name="l05889"></a>05889 <span class="keyword">const</span> <span class="keywordtype">char</span>* _txError (<span class="keyword">const</span> <span class="keywordtype">char</span> file[] <span class="comment">/*= NULL*/</span>, <span class="keywordtype">int</span> line <span class="comment">/*= 0*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> func[] <span class="comment">/*= NULL*/</span>,
<a name="l05890"></a>05890                       <span class="keyword">const</span> <span class="keywordtype">char</span> msg [] <span class="comment">/*= NULL*/</span>, ...)
<a name="l05891"></a>05891     {
<a name="l05892"></a>05892     va_list arg; va_start (arg, msg);
<a name="l05893"></a>05893 
<a name="l05894"></a>05894     <span class="keyword">static</span> <span class="keywordtype">int</span> nCalls = 0; nCalls++;
<a name="l05895"></a>05895 
<a name="l05896"></a>05896     DWORD    winerr   = GetLastError();
<a name="l05897"></a>05897     <span class="keywordtype">int</span>      crterr   = errno;
<a name="l05898"></a>05898     <span class="keywordtype">int</span>      doserr   = _doserrno;
<a name="l05899"></a>05899     <span class="keywordtype">unsigned</span> threadId = GetCurrentThreadId();
<a name="l05900"></a>05900 
<a name="l05901"></a>05901     <span class="keywordtype">bool</span> isFatal = (msg &amp;&amp; *msg == <span class="charliteral">&#39;\a&#39;</span>)? (msg++, <span class="keyword">true</span>) : <span class="keyword">false</span>;
<a name="l05902"></a>05902     <span class="keywordtype">bool</span> fmtOnly = (msg &amp;&amp; *msg == <span class="charliteral">&#39;\f&#39;</span>)? (msg++, <span class="keyword">true</span>) : <span class="keyword">false</span>;
<a name="l05903"></a>05903 
<a name="l05904"></a>05904     <span class="keyword">static</span> <span class="keywordtype">char</span> what[<a class="code" href="a00034.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BIGBUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05905"></a>05905     <span class="keyword">static</span> <span class="keywordtype">char</span> str [<a class="code" href="a00034.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BIGBUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05906"></a>05906     <span class="keywordtype">char</span> *s = what;
<a name="l05907"></a>05907 
<a name="l05908"></a>05908 <span class="preprocessor">    #define SZARG_(n)  sizeof (what) - 1 - (n) - (s-what) _TX_TRUNCATE</span>
<a name="l05909"></a>05909 <span class="preprocessor"></span>
<a name="l05910"></a>05910                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;TXLib сообщает:&quot;</span> <span class="stringliteral">&quot;\n\n&quot;</span>);
<a name="l05911"></a>05911 
<a name="l05912"></a>05912                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;Программа: %s, &quot;</span>, <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a>());
<a name="l05913"></a>05913     <span class="keywordflow">if</span> (file)   s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;файл: %s,&quot;</span> _TX_NAME, file);
<a name="l05914"></a>05914     <span class="keywordflow">if</span> (line)   s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;строка: %d, &quot;</span>,       line);
<a name="l05915"></a>05915     <span class="keywordflow">if</span> (func)   s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;функция: %s&quot;</span> <span class="stringliteral">&quot;\n\n&quot;</span>, func);
<a name="l05916"></a>05916 
<a name="l05917"></a>05917     <span class="keywordflow">if</span> (msg)    s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;%s: &quot;</span>, (file || line || func)? <span class="stringliteral">&quot;Сообщение&quot;</span> : <span class="stringliteral">&quot;ВНЕЗАПНО&quot;</span>),
<a name="l05918"></a>05918                 s += _vsnprintf_s  (s, SZARG_(1), msg, arg),
<a name="l05919"></a>05919                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;\n\n&quot;</span>);
<a name="l05920"></a>05920 
<a name="l05921"></a>05921                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;#%d: %s: Thread: 0x%08X%s&quot;</span>,
<a name="l05922"></a>05922                                                   nCalls, <a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a>, threadId,
<a name="l05923"></a>05923                                                   (threadId == _txMainThreadId)?    <span class="stringliteral">&quot; (Main)&quot;</span>   :
<a name="l05924"></a>05924                                                   (threadId == _txCanvas_ThreadId)? <span class="stringliteral">&quot; (Canvas)&quot;</span> : <span class="stringliteral">&quot;&quot;</span>);
<a name="l05925"></a>05925 
<a name="l05926"></a>05926     <span class="keywordflow">if</span> (winerr) s +=  _snprintf_s  (s, SZARG_(0), <span class="stringliteral">&quot;, GetLastError(): %lu (&quot;</span>, winerr),
<a name="l05927"></a>05927                 s += FormatMessage (FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
<a name="l05928"></a>05928                                     NULL, winerr, MAKELANGID (LANG_NEUTRAL, SUBLANG_DEFAULT),
<a name="l05929"></a>05929                                     s, (DWORD) (<span class="keyword">sizeof</span> (what) - (s-what)), NULL) - 3,
<a name="l05930"></a>05930                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;)&quot;</span>);
<a name="l05931"></a>05931 
<a name="l05932"></a>05932     <span class="keywordflow">if</span> (crterr) s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;, errno: %d (%s)&quot;</span>,
<a name="l05933"></a>05933                                     crterr, (strerror_s (str, crterr), str));
<a name="l05934"></a>05934 
<a name="l05935"></a>05935     <span class="keywordflow">if</span> (doserr) s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;, _doserrno: %d (%s)&quot;</span>,
<a name="l05936"></a>05936                                     doserr, (strerror_s (str, doserr), str));
<a name="l05937"></a>05937 
<a name="l05938"></a>05938                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;. %s\n&quot;</span>,
<a name="l05939"></a>05939                                     std::uncaught_exception()? <span class="stringliteral">&quot;std::uncaught_exception(): true.&quot;</span> : <span class="stringliteral">&quot;&quot;</span>);
<a name="l05940"></a>05940 
<a name="l05941"></a>05941     <span class="keywordflow">if</span> (_txInTX &gt; 0 &amp;&amp; !(_txLine == line &amp;&amp; _stricmp (_txFile, file) == 0))
<a name="l05942"></a>05942                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;From: %s (%d) %s.\n&quot;</span>, _txFile, _txLine, _txFunc);
<a name="l05943"></a>05943 
<a name="l05944"></a>05944 <span class="preprocessor">    #undef SZARG_</span>
<a name="l05945"></a>05945 <span class="preprocessor"></span>    va_end (arg);
<a name="l05946"></a>05946 
<a name="l05947"></a>05947     <span class="keyword">struct </span>tools
<a name="l05948"></a>05948         {
<a name="l05949"></a>05949         <span class="keyword">static</span> <span class="keywordtype">char</span>* compressSpaces (<span class="keywordtype">char</span>* dest, <span class="keywordtype">char</span>* src)
<a name="l05950"></a>05950             {
<a name="l05951"></a>05951             <span class="keywordtype">char</span>* dst = dest;
<a name="l05952"></a>05952 
<a name="l05953"></a>05953             <span class="keywordflow">for</span> (<span class="keywordtype">char</span> last = <span class="charliteral">&#39; &#39;</span>; *src; src++)
<a name="l05954"></a>05954                 <span class="keywordflow">if</span> (isspace ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)(*src))) { <span class="keywordflow">if</span> (last != <span class="charliteral">&#39; &#39;</span>) *dst++ = last = <span class="charliteral">&#39; &#39;</span>; }
<a name="l05955"></a>05955                 <span class="keywordflow">else</span>                                                    *dst++ = last = *src;
<a name="l05956"></a>05956 
<a name="l05957"></a>05957             <span class="keywordflow">if</span> (dst &gt; dest &amp;&amp; dst[-1] == <span class="charliteral">&#39; &#39;</span>) dst--;
<a name="l05958"></a>05958             *dst++ = <span class="charliteral">&#39;\n&#39;</span>; *dst++ = 0;
<a name="l05959"></a>05959 
<a name="l05960"></a>05960             <span class="keywordflow">return</span> dest;
<a name="l05961"></a>05961             }
<a name="l05962"></a>05962 
<a name="l05963"></a>05963         <span class="keyword">static</span> <span class="keywordtype">char</span>* replace (<span class="keywordtype">char</span>* dest, <span class="keywordtype">char</span>* src, <span class="keywordtype">char</span> find, <span class="keywordtype">char</span> repl)
<a name="l05964"></a>05964             {
<a name="l05965"></a>05965             <span class="keywordtype">int</span> i = 0;
<a name="l05966"></a>05966             <span class="keywordflow">for</span> (; src[i]; i++) dest[i] = (src[i] == find)? repl : src[i];
<a name="l05967"></a>05967             dest[i] = 0;
<a name="l05968"></a>05968 
<a name="l05969"></a>05969             <span class="keywordflow">return</span> dest;
<a name="l05970"></a>05970             }
<a name="l05971"></a>05971         };
<a name="l05972"></a>05972 
<a name="l05973"></a>05973     <a class="code" href="a00032.htm#ga4cfbb1150d579322cb533a235050dece" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s%s- %s&quot;</span> <span class="stringliteral">&quot;\n&quot;</span>, <a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a>, _TX_NAME, tools::compressSpaces (str, what));
<a name="l05974"></a>05974 
<a name="l05975"></a>05975     <span class="keywordflow">if</span> (fmtOnly) <span class="keywordflow">return</span> what;
<a name="l05976"></a>05976 
<a name="l05977"></a>05977     tools::replace (str, what, <span class="charliteral">&#39;\v&#39;</span>, <span class="charliteral">&#39; &#39;</span>);
<a name="l05978"></a>05978     printf (<span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;--------------------------------------------------&quot;</span> <span class="stringliteral">&quot;\n&quot;</span>
<a name="l05979"></a>05979                  <span class="stringliteral">&quot;%s&quot;</span>
<a name="l05980"></a>05980                  <span class="stringliteral">&quot;--------------------------------------------------&quot;</span> <span class="stringliteral">&quot;\n&quot;</span>, str);
<a name="l05981"></a>05981 
<a name="l05982"></a>05982     tools::replace (str, what, <span class="charliteral">&#39;\v&#39;</span>, <span class="charliteral">&#39;\n&#39;</span>);
<a name="l05983"></a>05983     MessageBox (NULL, str, isFatal? <span class="stringliteral">&quot;Фатальная ошибка&quot;</span> : <span class="stringliteral">&quot;Ошибка в программе&quot;</span>,
<a name="l05984"></a>05984                 MB_ICONSTOP | MB_TOPMOST | MB_SYSTEMMODAL);
<a name="l05985"></a>05985 
<a name="l05986"></a>05986     <span class="keywordflow">if</span> (!isFatal) <span class="keywordflow">return</span> what;
<a name="l05987"></a>05987 
<a name="l05988"></a>05988     <span class="keywordflow">if</span> (!IsDebuggerPresent()) exit (EXIT_FAILURE);
<a name="l05989"></a>05989 
<a name="l05990"></a>05990     DebugBreak();  <span class="comment">// &gt;&gt;&gt; Вы в отладчике, есть шанс посмотреть переменные и разобраться.</span>
<a name="l05991"></a>05991     <span class="keywordflow">return</span> what;   <span class="comment">//     Выходите из функции пошаговой отладкой. Смотрите на стек вызовов.</span>
<a name="l05992"></a>05992     }
<a name="l05993"></a>05993 
<a name="l05995"></a>05995 <span class="comment">//}</span>
<a name="l05996"></a>05996 <span class="comment">//============================================================================================</span>
<a name="l05997"></a>05997 
<a name="l05998"></a>05998 <span class="comment">//============================================================================================</span>
<a name="l05999"></a>05999 <span class="comment">//{          TXLib API implementation</span>
<a name="l06000"></a>06000 <span class="comment">//           Реализация TXLib API</span>
<a name="l06001"></a>06001 <span class="comment">//============================================================================================</span>
<a name="l06002"></a>06002 
<a name="l06003"></a>06003 <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00029.htm#ga732d4db1467f11a4b569b9d6f2383749" title="Возвращает строку с информацией о текущей версии библиотеки.">txVersion</a>()
<a name="l06004"></a>06004     {
<a name="l06005"></a>06005     <span class="keywordflow">return</span> <a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a>;
<a name="l06006"></a>06006     }
<a name="l06007"></a>06007 
<a name="l06008"></a>06008 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06009"></a>06009 
<a name="l06010"></a>06010 <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="a00029.htm#gacd2416cd6b89106ab6700d0c75922bee" title="Возвращает номер версии библиотеки.">txVersionNumber</a>()
<a name="l06011"></a>06011     {
<a name="l06012"></a>06012     <span class="keywordflow">return</span> <a class="code" href="a00034.htm#ga6b76c63cd895c2be63ac8e690028623b" title="Версия библиотеки в целочисленном формате.">_TX_VER</a>;
<a name="l06013"></a>06013     }
<a name="l06014"></a>06014 
<a name="l06015"></a>06015 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06016"></a>06016 
<a name="l06017"></a>06017 POINT <a class="code" href="a00029.htm#ga69be92455ac555cb03470cb4ef4ac67c" title="Возвращает размер окна рисования в виде структуры POINT.">txGetExtent</a>()
<a name="l06018"></a>06018     {
<a name="l06019"></a>06019 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (POINT);
<a name="l06020"></a>06020 
<a name="l06021"></a>06021 $   RECT r = {0};
<a name="l06022"></a>06022 $   GetClientRect (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), &amp;r);
<a name="l06023"></a>06023 
<a name="l06024"></a>06024 $   POINT size = { r.right - r.left, r.bottom - r.top };
<a name="l06025"></a>06025 $   <span class="keywordflow">return</span> size;
<a name="l06026"></a>06026     }
<a name="l06027"></a>06027 
<a name="l06028"></a>06028 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06029"></a>06029 
<a name="l06030"></a>06030 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gaed186909e8de1f9a6e5f78c362d9b607" title="Возвращает ширину окна рисования.">txGetExtentX</a>()
<a name="l06031"></a>06031     {
<a name="l06032"></a>06032 $1  <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga69be92455ac555cb03470cb4ef4ac67c" title="Возвращает размер окна рисования в виде структуры POINT.">txGetExtent</a>().x;
<a name="l06033"></a>06033     }
<a name="l06034"></a>06034 
<a name="l06035"></a>06035 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06036"></a>06036 
<a name="l06037"></a>06037 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#ga1838cd6a438d4bea5f26bfa47a103a0d" title="Возвращает высоту окна рисования.">txGetExtentY</a>()
<a name="l06038"></a>06038     {
<a name="l06039"></a>06039 $1  <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga69be92455ac555cb03470cb4ef4ac67c" title="Возвращает размер окна рисования в виде структуры POINT.">txGetExtent</a>().y;
<a name="l06040"></a>06040     }
<a name="l06041"></a>06041 
<a name="l06042"></a>06042 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06043"></a>06043 
<a name="l06044"></a>06044 <span class="keyword">inline</span> HDC&amp; <a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>()
<a name="l06045"></a>06045     {
<a name="l06046"></a>06046 $1  <span class="keywordflow">return</span> _txCanvas_BackBuf[0];
<a name="l06047"></a>06047     }
<a name="l06048"></a>06048 
<a name="l06049"></a>06049 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06050"></a>06050 
<a name="l06051"></a>06051 <span class="keyword">inline</span> HWND <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>()
<a name="l06052"></a>06052     {
<a name="l06053"></a>06053 $1  <span class="keywordflow">return</span> _txCanvas_Window;
<a name="l06054"></a>06054     }
<a name="l06055"></a>06055 
<a name="l06056"></a>06056 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06057"></a>06057 
<a name="l06058"></a>06058 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gac9d8435ced05ddc5c29a1a5c9f58f752" title="Уничтожает окно TXlib.">txDestroyWindow</a>()
<a name="l06059"></a>06059     {
<a name="l06060"></a>06060 $1  <span class="keywordflow">if</span> (!<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06061"></a>06061 
<a name="l06062"></a>06062 $   <span class="keywordflow">if</span> (SendNotifyMessage (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), WM_DESTROY, 0, 0) == 0) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06063"></a>06063 
<a name="l06064"></a>06064 $   _txWaitFor (!_txCanvas_Window);
<a name="l06065"></a>06065 
<a name="l06066"></a>06066 $   <span class="keywordflow">return</span> _txCanvas_Window == NULL;
<a name="l06067"></a>06067     }
<a name="l06068"></a>06068 
<a name="l06069"></a>06069 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06070"></a>06070 
<a name="l06071"></a>06071 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga4006aaa9b91b25f81bfd88587842531a" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (COLORREF color, <span class="keywordtype">int</span> thickness <span class="comment">/*= 1*/</span>)
<a name="l06072"></a>06072     {
<a name="l06073"></a>06073 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06074"></a>06074 
<a name="l06075"></a>06075 $   <span class="keywordflow">return</span> _txBuffer_Select (Win32::CreatePen ((color == <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>? PS_NULL : PS_SOLID), thickness, color)) &amp;&amp;
<a name="l06076"></a>06076             <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a>          ((Win32::SetTextColor (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), color)));
<a name="l06077"></a>06077     }
<a name="l06078"></a>06078 
<a name="l06079"></a>06079 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06080"></a>06080 
<a name="l06081"></a>06081 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga977c584db1ecfba20898615a948ab675" title="Устанавливает текущий цвет линий и текста.">txColor</a> (<span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue)
<a name="l06082"></a>06082     {
<a name="l06083"></a>06083 $1  <span class="keywordflow">if</span> (red   &gt; 1) red   = 1; <span class="keywordflow">if</span> (red   &lt; 0) red   = 0;
<a name="l06084"></a>06084 $   <span class="keywordflow">if</span> (green &gt; 1) green = 1; <span class="keywordflow">if</span> (green &lt; 0) green = 0;
<a name="l06085"></a>06085 $   <span class="keywordflow">if</span> (blue  &gt; 1) blue  = 1; <span class="keywordflow">if</span> (blue  &lt; 0) blue  = 0;
<a name="l06086"></a>06086 
<a name="l06087"></a>06087 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga4006aaa9b91b25f81bfd88587842531a" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (<a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (red * 255 + 0.5, green * 255 + 0.5, blue * 255 + 0.5));
<a name="l06088"></a>06088     }
<a name="l06089"></a>06089 
<a name="l06090"></a>06090 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06091"></a>06091 
<a name="l06092"></a>06092 COLORREF <a class="code" href="a00029.htm#ga4894075399ec8e8747177f90c15fb35d" title="Возвращает текущий цвет линий и текста.">txGetColor</a>()
<a name="l06093"></a>06093     {
<a name="l06094"></a>06094 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> CLR_INVALID;
<a name="l06095"></a>06095 
<a name="l06096"></a>06096 $   HGDIOBJ obj = <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetCurrentObject (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), OBJ_PEN)));
<a name="l06097"></a>06097 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (obj); <span class="keywordflow">if</span> (!obj) <span class="keywordflow">return</span> CLR_INVALID;
<a name="l06098"></a>06098 
<a name="l06099"></a>06099 $   <span class="keyword">union </span>{ EXTLOGPEN extLogPen; LOGPEN LogPen; } buf = {{0}};
<a name="l06100"></a>06100 
<a name="l06101"></a>06101 $   <span class="keywordtype">int</span> size = Win32::GetObject (obj, 0, NULL);
<a name="l06102"></a>06102 $   Win32::GetObject (obj, <span class="keyword">sizeof</span> (buf), &amp;buf) asserted;
<a name="l06103"></a>06103 
<a name="l06104"></a>06104 $   return (size == sizeof (LOGPEN))? buf.LogPen.lopnColor : buf.extLogPen.elpColor;
<a name="l06105"></a>06105     }
<a name="l06106"></a>06106 
<a name="l06107"></a>06107 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06108"></a>06108 
<a name="l06109"></a>06109 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gafb1459949ebb32b199d07f5464205baf" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (COLORREF color)
<a name="l06110"></a>06110     {
<a name="l06111"></a>06111 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06112"></a>06112 
<a name="l06113"></a>06113 $   <span class="keywordflow">return</span> _txBuffer_Select ((color == <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>)? Win32::GetStockObject   (HOLLOW_BRUSH) :
<a name="l06114"></a>06114                                                         Win32::CreateSolidBrush (color));
<a name="l06115"></a>06115     }
<a name="l06116"></a>06116 
<a name="l06117"></a>06117 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06118"></a>06118 
<a name="l06119"></a>06119 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga385a6f84e8f1447a33047fa0f3be972b" title="Устанавливает текущий цвет заполнения фигур.">txFillColor</a> (<span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue)
<a name="l06120"></a>06120     {
<a name="l06121"></a>06121 $1  <span class="keywordflow">if</span> (red   &gt; 1) red   = 1; <span class="keywordflow">if</span> (red   &lt; 0) red   = 0;
<a name="l06122"></a>06122 $   <span class="keywordflow">if</span> (green &gt; 1) green = 1; <span class="keywordflow">if</span> (green &lt; 0) green = 0;
<a name="l06123"></a>06123 $   <span class="keywordflow">if</span> (blue  &gt; 1) blue  = 1; <span class="keywordflow">if</span> (blue  &lt; 0) blue  = 0;
<a name="l06124"></a>06124 
<a name="l06125"></a>06125 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#gafb1459949ebb32b199d07f5464205baf" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (red * 255 + 0.5, green * 255 + 0.5, blue * 255 + 0.5));
<a name="l06126"></a>06126     }
<a name="l06127"></a>06127 
<a name="l06128"></a>06128 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06129"></a>06129 
<a name="l06130"></a>06130 COLORREF <a class="code" href="a00029.htm#ga1a65fa9ddfd07bda8ab3e95873991b76" title="Возвращает текущий цвет заполнения фигур.">txGetFillColor</a>()
<a name="l06131"></a>06131     {
<a name="l06132"></a>06132 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> CLR_INVALID;
<a name="l06133"></a>06133 
<a name="l06134"></a>06134 $   HGDIOBJ obj = <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetCurrentObject (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), OBJ_BRUSH)));
<a name="l06135"></a>06135 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (obj); <span class="keywordflow">if</span> (!obj) <span class="keywordflow">return</span> CLR_INVALID;
<a name="l06136"></a>06136 
<a name="l06137"></a>06137 $   LOGBRUSH buf = {0};
<a name="l06138"></a>06138 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetObject (obj, <span class="keyword">sizeof</span> (buf), &amp;buf))) asserted;
<a name="l06139"></a>06139 
<a name="l06140"></a>06140 $   return buf.lbColor;
<a name="l06141"></a>06141     }
<a name="l06142"></a>06142 
<a name="l06143"></a>06143 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06144"></a>06144 
<a name="l06145"></a>06145 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga3ddd148ec8af2d1f722b398ee7e17a71" title="Устанавливает режим взаимодействия цветов при рисовании.">txSetROP2</a> (<span class="keywordtype">int</span> mode <span class="comment">/*= R2_COPYPEN*/</span>)
<a name="l06146"></a>06146     {
<a name="l06147"></a>06147 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06148"></a>06148 
<a name="l06149"></a>06149 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::SetROP2 (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), mode)));
<a name="l06150"></a>06150     }
<a name="l06151"></a>06151 
<a name="l06152"></a>06152 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06153"></a>06153 
<a name="l06154"></a>06154 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga2a3940b99d02c630364d4b74e7d08a23" title="Стирает холст текущим цветом заполнения.">txClear</a>()
<a name="l06155"></a>06155     {
<a name="l06156"></a>06156 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06157"></a>06157 
<a name="l06158"></a>06158 $   POINT size = <a class="code" href="a00029.htm#ga69be92455ac555cb03470cb4ef4ac67c" title="Возвращает размер окна рисования в виде структуры POINT.">txGetExtent</a>();
<a name="l06159"></a>06159 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::PatBlt (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), 0, 0, size.x, size.y, PATCOPY)));
<a name="l06160"></a>06160     }
<a name="l06161"></a>06161 
<a name="l06162"></a>06162 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06163"></a>06163 
<a name="l06164"></a>06164 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga8f2821365f3a6addfcd8c19dd8971ce2" title="Рисует пиксель (точку на экране).">txSetPixel</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, COLORREF color)
<a name="l06165"></a>06165     {
<a name="l06166"></a>06166 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06167"></a>06167 
<a name="l06168"></a>06168 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::SetPixel (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), x, y, color)));
<a name="l06169"></a>06169 
<a name="l06170"></a>06170 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l06171"></a>06171     }
<a name="l06172"></a>06172 
<a name="l06173"></a>06173 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06174"></a>06174 
<a name="l06175"></a>06175 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gada8f6502237b02eaf8759df026630c74" title="Рисует пиксель (точку на экране).">txPixel</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue)
<a name="l06176"></a>06176     {
<a name="l06177"></a>06177 $1  <span class="keywordflow">if</span> (red   &gt; 1) red   = 1; <span class="keywordflow">if</span> (red   &lt; 0) red   = 0;
<a name="l06178"></a>06178 $   <span class="keywordflow">if</span> (green &gt; 1) green = 1; <span class="keywordflow">if</span> (green &lt; 0) green = 0;
<a name="l06179"></a>06179 $   <span class="keywordflow">if</span> (blue  &gt; 1) blue  = 1; <span class="keywordflow">if</span> (blue  &lt; 0) blue  = 0;
<a name="l06180"></a>06180 
<a name="l06181"></a>06181 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga8f2821365f3a6addfcd8c19dd8971ce2" title="Рисует пиксель (точку на экране).">txSetPixel</a> (x, y, <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (red * 255 + 0.5, green * 255 + 0.5, blue * 255 + 0.5));
<a name="l06182"></a>06182     }
<a name="l06183"></a>06183 
<a name="l06184"></a>06184 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06185"></a>06185 
<a name="l06186"></a>06186 <span class="keyword">inline</span> COLORREF <a class="code" href="a00029.htm#ga8e07f7bdb1c6a3d461960f14813a3425" title="Возвращает текущий цвет точки (пикселя) на экране.">txGetPixel</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y)
<a name="l06187"></a>06187     {
<a name="l06188"></a>06188 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> CLR_INVALID;
<a name="l06189"></a>06189 
<a name="l06190"></a>06190 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetPixel (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), x, y)));
<a name="l06191"></a>06191     }
<a name="l06192"></a>06192 
<a name="l06193"></a>06193 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06194"></a>06194 
<a name="l06195"></a>06195 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga21a12a1077b09af8bdc59e147ca15d46" title="Рисует линию.">txLine</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1)
<a name="l06196"></a>06196     {
<a name="l06197"></a>06197 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06198"></a>06198 
<a name="l06199"></a>06199 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::MoveToEx (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), x0, y0, NULL))) asserted;
<a name="l06200"></a>06200 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::LineTo   (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), x1, y1      ))) asserted;
<a name="l06201"></a>06201 
<a name="l06202"></a>06202 $   return true;
<a name="l06203"></a>06203     }
<a name="l06204"></a>06204 
<a name="l06205"></a>06205 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06206"></a>06206 
<a name="l06207"></a>06207 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga48ebe804bb14c53276f0b334ea7761a2" title="Рисует прямоугольник.">txRectangle</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1)
<a name="l06208"></a>06208     {
<a name="l06209"></a>06209 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06210"></a>06210 
<a name="l06211"></a>06211 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::Rectangle (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), x0, y0, x1, y1))) asserted;
<a name="l06212"></a>06212 
<a name="l06213"></a>06213 $   return true;
<a name="l06214"></a>06214     }
<a name="l06215"></a>06215 
<a name="l06216"></a>06216 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06217"></a>06217 
<a name="l06218"></a>06218 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga4e872a3d71ac242bd40d614b9c03f86e" title="Рисует ломаную линию или многоугольник.">txPolygon</a> (const POINT points[], <span class="keywordtype">int</span> numPoints)
<a name="l06219"></a>06219     {
<a name="l06220"></a>06220 $1  _TX_IF_TXWINDOW_FAILED          <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06221"></a>06221 $   _TX_IF_ARGUMENT_FAILED (points) return false;
<a name="l06222"></a>06222 
<a name="l06223"></a>06223 $   return <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::Polygon (txDC(), points, numPoints)));
<a name="l06224"></a>06224     }
<a name="l06225"></a>06225 
<a name="l06226"></a>06226 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06227"></a>06227 
<a name="l06228"></a>06228 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gaf4e90f66d74b812afcd17203cf95b8b5" title="Рисует эллипс.">txEllipse</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1)
<a name="l06229"></a>06229     {
<a name="l06230"></a>06230 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06231"></a>06231 
<a name="l06232"></a>06232 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::Ellipse (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), x0, y0, x1, y1))) asserted;
<a name="l06233"></a>06233 
<a name="l06234"></a>06234 $   return true;
<a name="l06235"></a>06235     }
<a name="l06236"></a>06236 
<a name="l06237"></a>06237 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06238"></a>06238 
<a name="l06239"></a>06239 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga6870267a8cb62bddbe80ac2483b120a3" title="Рисует окружность или круг.">txCircle</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> r)
<a name="l06240"></a>06240     {
<a name="l06241"></a>06241 $1  <span class="keywordflow">return</span> <a class="code" href="a00029.htm#gaf4e90f66d74b812afcd17203cf95b8b5" title="Рисует эллипс.">txEllipse</a> (x-r, y-r, x+r, y+r);
<a name="l06242"></a>06242     }
<a name="l06243"></a>06243 
<a name="l06244"></a>06244 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06245"></a>06245 
<a name="l06246"></a>06246 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gaadb118d9b8ae81cc60d43300326e52a3" title="Рисует дугу эллипса.">txArc</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1, <span class="keywordtype">int</span> startAngle, <span class="keywordtype">int</span> totalAngle)
<a name="l06247"></a>06247     {
<a name="l06248"></a>06248 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06249"></a>06249 
<a name="l06250"></a>06250 $   POINT center = { (x0 + x1) /2, (y0 + y1) /2 };
<a name="l06251"></a>06251 
<a name="l06252"></a>06252 $   <span class="keywordtype">double</span> start =  startAngle               * <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180,
<a name="l06253"></a>06253            end   = (startAngle + totalAngle) * <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180;
<a name="l06254"></a>06254 
<a name="l06255"></a>06255 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::Arc (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), x0, y0, x1, y1,
<a name="l06256"></a>06256                                 (<span class="keywordtype">int</span>) (center.x + 100 * cos (start) + 0.5),
<a name="l06257"></a>06257                                 (<span class="keywordtype">int</span>) (center.y - 100 * sin (start) + 0.5),
<a name="l06258"></a>06258                                 (<span class="keywordtype">int</span>) (center.x + 100 * cos (end)   + 0.5),
<a name="l06259"></a>06259                                 (<span class="keywordtype">int</span>) (center.y - 100 * sin (end)   + 0.5))));
<a name="l06260"></a>06260     }
<a name="l06261"></a>06261 
<a name="l06262"></a>06262 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06263"></a>06263 
<a name="l06264"></a>06264 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga732885ecfaf47b4051f278473724f44b" title="Рисует сектор эллипса.">txPie</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1, <span class="keywordtype">int</span> startAngle, <span class="keywordtype">int</span> totalAngle)
<a name="l06265"></a>06265     {
<a name="l06266"></a>06266 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06267"></a>06267 
<a name="l06268"></a>06268 $   POINT center = { (x0 + x1) /2, (y0 + y1) /2 };
<a name="l06269"></a>06269 
<a name="l06270"></a>06270 $   <span class="keywordtype">double</span> start =  startAngle               * <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180,
<a name="l06271"></a>06271            end   = (startAngle + totalAngle) * <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180;
<a name="l06272"></a>06272 
<a name="l06273"></a>06273 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::Pie (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), x0, y0, x1, y1,
<a name="l06274"></a>06274                                 (<span class="keywordtype">int</span>) (center.x + 100 * cos (start) + 0.5),
<a name="l06275"></a>06275                                 (<span class="keywordtype">int</span>) (center.y - 100 * sin (start) + 0.5),
<a name="l06276"></a>06276                                 (<span class="keywordtype">int</span>) (center.x + 100 * cos (end)   + 0.5),
<a name="l06277"></a>06277                                 (<span class="keywordtype">int</span>) (center.y - 100 * sin (end)   + 0.5))));
<a name="l06278"></a>06278     }
<a name="l06279"></a>06279 
<a name="l06280"></a>06280 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06281"></a>06281 
<a name="l06282"></a>06282 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga5ee97b4f6688ff24da8a494dc1c15daa" title="Рисует хорду эллипса.">txChord</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1, <span class="keywordtype">int</span> startAngle, <span class="keywordtype">int</span> totalAngle)
<a name="l06283"></a>06283     {
<a name="l06284"></a>06284 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06285"></a>06285 
<a name="l06286"></a>06286 $   POINT center = { (x0 + x1) /2, (y0 + y1) /2 };
<a name="l06287"></a>06287 
<a name="l06288"></a>06288 $   <span class="keywordtype">double</span> start =  startAngle               * <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180,
<a name="l06289"></a>06289            end   = (startAngle + totalAngle) * <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180;
<a name="l06290"></a>06290 
<a name="l06291"></a>06291 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::Chord (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), x0, y0, x1, y1,
<a name="l06292"></a>06292                                   (<span class="keywordtype">int</span>) (center.x + 100 * cos (start) + 0.5),
<a name="l06293"></a>06293                                   (<span class="keywordtype">int</span>) (center.y - 100 * sin (start) + 0.5),
<a name="l06294"></a>06294                                   (<span class="keywordtype">int</span>) (center.x + 100 * cos (end)   + 0.5),
<a name="l06295"></a>06295                                   (<span class="keywordtype">int</span>) (center.y - 100 * sin (end)   + 0.5))));
<a name="l06296"></a>06296     }
<a name="l06297"></a>06297 
<a name="l06298"></a>06298 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06299"></a>06299 
<a name="l06300"></a>06300 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga2a51480e07b3e31eb4e74ea29a8a480a" title="Заливает произвольный контур текущим цветом заполнения.">txFloodFill</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y,
<a name="l06301"></a>06301                   COLORREF color <span class="comment">/*= TX_TRANSPARENT*/</span>, DWORD mode <span class="comment">/*= FLOODFILLSURFACE*/</span>)
<a name="l06302"></a>06302     {
<a name="l06303"></a>06303 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06304"></a>06304 
<a name="l06305"></a>06305 $   <span class="keywordflow">if</span> (color == <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>) color = <a class="code" href="a00029.htm#ga8e07f7bdb1c6a3d461960f14813a3425" title="Возвращает текущий цвет точки (пикселя) на экране.">txGetPixel</a> (x, y);
<a name="l06306"></a>06306 
<a name="l06307"></a>06307 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::ExtFloodFill (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), x, y, color, mode)));
<a name="l06308"></a>06308     }
<a name="l06309"></a>06309 
<a name="l06310"></a>06310 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06311"></a>06311 
<a name="l06312"></a>06312 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga3b57379a564dd459d1573a9c8db0c692" title="Рисует текст.">txTextOut</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keyword">const</span> <span class="keywordtype">char</span> text[])
<a name="l06313"></a>06313     {
<a name="l06314"></a>06314 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06315"></a>06315 $   _TX_IF_ARGUMENT_FAILED (text) return false;
<a name="l06316"></a>06316 
<a name="l06317"></a>06317 $   <span class="keywordtype">int</span> len = (<span class="keywordtype">int</span>) strlen (text);
<a name="l06318"></a>06318 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::TextOut (txDC(), x, y, text, len))) asserted;
<a name="l06319"></a>06319 
<a name="l06320"></a>06320 $   SIZE size = {0};
<a name="l06321"></a>06321 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetTextExtentPoint32 (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), text, len, &amp;size))) asserted;
<a name="l06322"></a>06322 
<a name="l06323"></a>06323 $   RECT r = { x, y, x + size.cx, y + size.cy };
<a name="l06324"></a>06324 $   InvalidateRect (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), &amp;r, <span class="keyword">false</span>) asserted;
<a name="l06325"></a>06325 
<a name="l06326"></a>06326 $   return true;
<a name="l06327"></a>06327     }
<a name="l06328"></a>06328 
<a name="l06329"></a>06329 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06330"></a>06330 
<a name="l06331"></a>06331 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga5b3f03bfb0444ac3b7ec74128d878a3f" title="Рисует текст, размещенный в прямоугольной области.">txDrawText</a> (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1, const <span class="keywordtype">char</span> text[],
<a name="l06332"></a>06332                  <span class="keywordtype">unsigned</span> format <span class="comment">/*= DT_CENTER | DT_VCENTER | DT_WORDBREAK | DT_WORD_ELLIPSIS*/</span>)
<a name="l06333"></a>06333 {
<a name="l06334"></a>06334 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06335"></a>06335 $   _TX_IF_ARGUMENT_FAILED (text) return false;
<a name="l06336"></a>06336 
<a name="l06337"></a>06337 $   RECT r = { x0, y0, x1, y1 };
<a name="l06338"></a>06338 
<a name="l06339"></a>06339 $   <span class="keywordflow">if</span> (!strchr (text, <span class="charliteral">&#39;\n&#39;</span>)) format |= DT_SINGLELINE;
<a name="l06340"></a>06340 
<a name="l06341"></a>06341 $   <span class="keywordtype">unsigned</span> prev = <a class="code" href="a00029.htm#ga5a3cef04fcf688a051a9eafd6c8338a7" title="Устанавливает текущее выравнивание текста.">txSetTextAlign</a> (TA_LEFT | TA_TOP | TA_NOUPDATECP);
<a name="l06342"></a>06342 $   <span class="keywordflow">if</span> (Win32::DrawText) <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::DrawText (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), text, -1, &amp;r, format))) asserted;
<a name="l06343"></a>06343 $   <a class="code" href="a00029.htm#ga5a3cef04fcf688a051a9eafd6c8338a7" title="Устанавливает текущее выравнивание текста.">txSetTextAlign</a> (prev);
<a name="l06344"></a>06344 
<a name="l06345"></a>06345 $   return true;
<a name="l06346"></a>06346 }
<a name="l06347"></a>06347 
<a name="l06348"></a>06348 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06349"></a>06349 
<a name="l06350"></a>06350 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga7726bc7f942c2540b172f83c3c1d5adf" title="Выбирает текущий шрифт.">txSelectFont</a> (const <span class="keywordtype">char</span> name[], <span class="keywordtype">int</span> sizeY,
<a name="l06351"></a>06351                    <span class="keywordtype">int</span> sizeX      <span class="comment">/*= -1*/</span>,
<a name="l06352"></a>06352                    <span class="keywordtype">int</span>  bold      <span class="comment">/*= FW_DONTCARE*/</span>,
<a name="l06353"></a>06353                    <span class="keywordtype">bool</span> italic    <span class="comment">/*= false*/</span>,
<a name="l06354"></a>06354                    <span class="keywordtype">bool</span> underline <span class="comment">/*= false*/</span>,
<a name="l06355"></a>06355                    <span class="keywordtype">bool</span> strikeout <span class="comment">/*= false*/</span>)
<a name="l06356"></a>06356     {
<a name="l06357"></a>06357 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06358"></a>06358 $   _TX_IF_ARGUMENT_FAILED (name) return false;
<a name="l06359"></a>06359 
<a name="l06360"></a>06360 $   _txBuffer_Select (<a class="code" href="a00029.htm#gaf147a93f96fadeb7a6a0b6d7f1320bcb" title="Ищет шрифт по его названию.">txFontExist</a> (name)?
<a name="l06361"></a>06361                           Win32::CreateFont (sizeY, (<span class="keywordtype">int</span>) ((sizeX != -1)? sizeX : sizeY/3), 0, 0,
<a name="l06362"></a>06362                                              bold, italic, underline, strikeout, RUSSIAN_CHARSET,
<a name="l06363"></a>06363                                              OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
<a name="l06364"></a>06364                                              DEFAULT_QUALITY, FIXED_PITCH, name)
<a name="l06365"></a>06365                           :
<a name="l06366"></a>06366                           Win32::GetStockObject (SYSTEM_FIXED_FONT));
<a name="l06367"></a>06367 $   return true;
<a name="l06368"></a>06368     }
<a name="l06369"></a>06369 
<a name="l06370"></a>06370 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06371"></a>06371 
<a name="l06372"></a>06372 SIZE <a class="code" href="a00029.htm#ga356c475609cf282310fc336821adf71f" title="Вычисляет размеры текстовой надписи.">txGetTextExtent</a> (const <span class="keywordtype">char</span> text[])
<a name="l06373"></a>06373     {
<a name="l06374"></a>06374 $1  SIZE size = {0};
<a name="l06375"></a>06375 
<a name="l06376"></a>06376 $   _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> size;
<a name="l06377"></a>06377 $   _TX_IF_ARGUMENT_FAILED (text) return size;
<a name="l06378"></a>06378 
<a name="l06379"></a>06379 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetTextExtentPoint32 (txDC(), text, (<span class="keywordtype">int</span>) strlen (text), &amp;size))) asserted;
<a name="l06380"></a>06380 
<a name="l06381"></a>06381 $   return size;
<a name="l06382"></a>06382     }
<a name="l06383"></a>06383 
<a name="l06384"></a>06384 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06385"></a>06385 
<a name="l06386"></a>06386 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gaad385937fb3526c8f4054ae288d285c6" title="Вычисляет ширину текстовой надписи.">txGetTextExtentX</a> (const <span class="keywordtype">char</span> text[])
<a name="l06387"></a>06387     {
<a name="l06388"></a>06388 $1  <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga356c475609cf282310fc336821adf71f" title="Вычисляет размеры текстовой надписи.">txGetTextExtent</a> (text) .cx;
<a name="l06389"></a>06389     }
<a name="l06390"></a>06390 
<a name="l06391"></a>06391 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06392"></a>06392 
<a name="l06393"></a>06393 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#ga3a34e3baf660b310f6ca0d373f36c024" title="Вычисляет высоту текстовой надписи.">txGetTextExtentY</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> text[])
<a name="l06394"></a>06394     {
<a name="l06395"></a>06395 $1  <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga356c475609cf282310fc336821adf71f" title="Вычисляет размеры текстовой надписи.">txGetTextExtent</a> (text) .cy;
<a name="l06396"></a>06396     }
<a name="l06397"></a>06397 
<a name="l06398"></a>06398 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06399"></a>06399 
<a name="l06400"></a>06400 <span class="keywordtype">unsigned</span> <a class="code" href="a00029.htm#ga5a3cef04fcf688a051a9eafd6c8338a7" title="Устанавливает текущее выравнивание текста.">txSetTextAlign</a> (<span class="keywordtype">unsigned</span> align <span class="comment">/*= TA_CENTER | TA_BASELINE*/</span>)
<a name="l06401"></a>06401     {
<a name="l06402"></a>06402 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> 0;
<a name="l06403"></a>06403 
<a name="l06404"></a>06404 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::SetTextAlign (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), align)));
<a name="l06405"></a>06405     }
<a name="l06406"></a>06406 
<a name="l06407"></a>06407 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06408"></a>06408 
<a name="l06409"></a>06409 LOGFONT* <a class="code" href="a00029.htm#gaf147a93f96fadeb7a6a0b6d7f1320bcb" title="Ищет шрифт по его названию.">txFontExist</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> name[])
<a name="l06410"></a>06410     {
<a name="l06411"></a>06411 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> NULL;
<a name="l06412"></a>06412 $   _TX_IF_ARGUMENT_FAILED (name) return NULL;
<a name="l06413"></a>06413 
<a name="l06414"></a>06414 $   static LOGFONT font = {0};
<a name="l06415"></a>06415 $   font.lfCharSet = DEFAULT_CHARSET;
<a name="l06416"></a>06416 $   strncpy_s (font.lfFaceName, name, sizeof (font.lfFaceName) - 1);
<a name="l06417"></a>06417 
<a name="l06418"></a>06418     <span class="keyword">struct </span>enumFonts
<a name="l06419"></a>06419         {
<a name="l06420"></a>06420         <span class="keyword">static</span> <span class="keywordtype">int</span> CALLBACK Proc (<span class="keyword">const</span> LOGFONT* fnt, <span class="keyword">const</span> TEXTMETRIC*, DWORD, LPARAM data)
<a name="l06421"></a>06421             {
<a name="l06422"></a>06422 $           <span class="keywordflow">if</span> (!data || !fnt) <span class="keywordflow">return</span> 0;
<a name="l06423"></a>06423 
<a name="l06424"></a>06424 <span class="preprocessor">            #ifndef __STRICT_ANSI__</span>
<a name="l06425"></a>06425 <span class="preprocessor"></span>$           <span class="keywordflow">return</span> _strnicmp (fnt-&gt;lfFaceName, ((LOGFONT*)data)-&gt;lfFaceName, LF_FACESIZE);
<a name="l06426"></a>06426 <span class="preprocessor">            #else</span>
<a name="l06427"></a>06427 <span class="preprocessor"></span>$           <span class="keywordflow">return</span>  strncmp  (fnt-&gt;lfFaceName, ((LOGFONT*)data)-&gt;lfFaceName, LF_FACESIZE);
<a name="l06428"></a>06428 <span class="preprocessor">            #endif</span>
<a name="l06429"></a>06429 <span class="preprocessor"></span>            }
<a name="l06430"></a>06430         };
<a name="l06431"></a>06431 
<a name="l06432"></a>06432 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::EnumFontFamiliesEx (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), &amp;font, enumFonts::Proc,
<a name="l06433"></a>06433                                              (LPARAM)&amp;font, 0) == 0? &amp;font : NULL));
<a name="l06434"></a>06434     }
<a name="l06435"></a>06435 
<a name="l06436"></a>06436 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06437"></a>06437 
<a name="l06438"></a>06438 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gad4ee4d2a16f8f38412e0e7b1c380bf4d" title="Устанавливает текущий объект GDI.">txSelectObject</a> (HGDIOBJ obj)
<a name="l06439"></a>06439     {
<a name="l06440"></a>06440 $1  _TX_IF_TXWINDOW_FAILED       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06441"></a>06441 $   _TX_IF_ARGUMENT_FAILED (obj) return false;
<a name="l06442"></a>06442 
<a name="l06443"></a>06443 $   return _txBuffer_Select (obj);
<a name="l06444"></a>06444     }
<a name="l06445"></a>06445 
<a name="l06446"></a>06446 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06447"></a>06447 
<a name="l06448"></a>06448 HDC <a class="code" href="a00029.htm#gac41928e50c6374843e95c270a8c27119" title="Создает дополнительный холст (контекст рисования, Device Context, DC) в памяти.">txCreateCompatibleDC</a> (<span class="keywordtype">int</span> sizeX, <span class="keywordtype">int</span> sizeY, HBITMAP bitmap <span class="comment">/*= NULL*/</span>)
<a name="l06449"></a>06449     {
<a name="l06450"></a>06450 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> NULL;
<a name="l06451"></a>06451 
<a name="l06452"></a>06452 $   POINT size = { sizeX, sizeY };
<a name="l06453"></a>06453 $   HDC dc = _txBuffer_Create (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), &amp;size, bitmap);
<a name="l06454"></a>06454 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (dc); <span class="keywordflow">if</span> (!dc) <span class="keywordflow">return</span> NULL;
<a name="l06455"></a>06455 
<a name="l06456"></a>06456 $   std::vector &lt;HDC&gt;&amp; dcs = _txCanvas_UserDCs;
<a name="l06457"></a>06457 
<a name="l06458"></a>06458 $   <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l06459"></a>06459 $   dcs.push_back (dc);
<a name="l06460"></a>06460 
<a name="l06461"></a>06461 $   <span class="keywordflow">if</span> (dcs.size() &gt;= <a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>)
<a name="l06462"></a>06462         { $ _txNotifyIcon (NIIF_WARNING, NULL, <span class="stringliteral">&quot;Вы загрузили уже %d HDC, системе может стать плохо.&quot;</span>, dcs.size()); }
<a name="l06463"></a>06463 
<a name="l06464"></a>06464 $   <span class="keywordflow">return</span> dc;
<a name="l06465"></a>06465     }
<a name="l06466"></a>06466 
<a name="l06467"></a>06467 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06468"></a>06468 
<a name="l06469"></a>06469 HDC <a class="code" href="a00029.htm#ga2b4df3ccb139bccaf3f7163986cf9b59" title="Загружает из файла изображение в формате BMP. Делает это довольно медленно.">txLoadImage</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> filename[])
<a name="l06470"></a>06470     {
<a name="l06471"></a>06471 $1  _TX_IF_TXWINDOW_FAILED                         <span class="keywordflow">return</span> NULL;
<a name="l06472"></a>06472 $   _TX_IF_ARGUMENT_FAILED (filename &amp;&amp; *filename) return NULL;
<a name="l06473"></a>06473 
<a name="l06474"></a>06474 $   HBITMAP image = (HBITMAP) Win32::LoadImage (NULL, filename, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE);
<a name="l06475"></a>06475 $   if (!image) return NULL;
<a name="l06476"></a>06476 
<a name="l06477"></a>06477 $   HDC dc = <a class="code" href="a00029.htm#gac41928e50c6374843e95c270a8c27119" title="Создает дополнительный холст (контекст рисования, Device Context, DC) в памяти.">txCreateCompatibleDC</a> (0, 0, image);
<a name="l06478"></a>06478 
<a name="l06479"></a>06479 $   return dc;
<a name="l06480"></a>06480     }
<a name="l06481"></a>06481 
<a name="l06482"></a>06482 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06483"></a>06483 
<a name="l06484"></a>06484 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (HDC* pdc)
<a name="l06485"></a>06485     {
<a name="l06486"></a>06486 $1  _TX_IF_TXWINDOW_FAILED       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06487"></a>06487 $   _TX_IF_ARGUMENT_FAILED (pdc) return false;
<a name="l06488"></a>06488 
<a name="l06489"></a>06489 $   HDC  dc = *pdc;
<a name="l06490"></a>06490 $   <span class="keywordtype">bool</span> ok = _txBuffer_Delete (pdc);
<a name="l06491"></a>06491 $   if (!ok) return false;
<a name="l06492"></a>06492 
<a name="l06493"></a>06493 $   <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l06494"></a>06494 $   std::vector &lt;HDC&gt;&amp; dcs = _txCanvas_UserDCs;
<a name="l06495"></a>06495 $   std::vector &lt;HDC&gt; ::iterator i = std::find (dcs.begin(), dcs.end(), dc);
<a name="l06496"></a>06496 $   if (i != dcs.end()) { std::swap (*i, dcs.back()); dcs.resize (dcs.size()-1); }
<a name="l06497"></a>06497 
<a name="l06498"></a>06498 $   <span class="keywordflow">return</span> ok;
<a name="l06499"></a>06499     }
<a name="l06500"></a>06500 
<a name="l06501"></a>06501 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06502"></a>06502 
<a name="l06503"></a>06503 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (HDC dc)
<a name="l06504"></a>06504     {
<a name="l06505"></a>06505 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06506"></a>06506 
<a name="l06507"></a>06507 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (&amp;dc);
<a name="l06508"></a>06508     }
<a name="l06509"></a>06509 
<a name="l06510"></a>06510 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06511"></a>06511 
<a name="l06512"></a>06512 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gadf16aed8a30951ff3239fffd440a8c76" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (HDC dest, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height,
<a name="l06513"></a>06513                HDC src,  <span class="keywordtype">int</span> xSrc,  <span class="keywordtype">int</span> ySrc,  DWORD rOp <span class="comment">/*= SRCCOPY*/</span>)
<a name="l06514"></a>06514     {
<a name="l06515"></a>06515 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06516"></a>06516 $   _TX_IF_ARGUMENT_FAILED (dest) return false;
<a name="l06517"></a>06517 $   _TX_IF_ARGUMENT_FAILED (src)  return false;
<a name="l06518"></a>06518 
<a name="l06519"></a>06519 $   return <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::BitBlt (dest, xDest, yDest, width, height, src, xSrc, ySrc, rOp)));
<a name="l06520"></a>06520     }
<a name="l06521"></a>06521 
<a name="l06522"></a>06522 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06523"></a>06523 
<a name="l06524"></a>06524 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga22dc1561bd086c35575bc296d2b379e6" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом прозрачности...">txTransparentBlt</a> (HDC dest, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height,
<a name="l06525"></a>06525                        HDC src,  <span class="keywordtype">int</span> xSrc,  <span class="keywordtype">int</span> ySrc,  COLORREF transColor <span class="comment">/*= TX_BLACK*/</span>)
<a name="l06526"></a>06526     {
<a name="l06527"></a>06527 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06528"></a>06528 $   _TX_IF_ARGUMENT_FAILED (dest) return false;
<a name="l06529"></a>06529 $   _TX_IF_ARGUMENT_FAILED (src)  return false;
<a name="l06530"></a>06530 
<a name="l06531"></a>06531 $   return (Win32::TransparentBlt)?
<a name="l06532"></a>06532         <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::TransparentBlt (dest, xDest, yDest, width, height, src, xSrc, ySrc, width, height, transColor)))
<a name="l06533"></a>06533     :
<a name="l06534"></a>06534         <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::BitBlt         (dest, xDest, yDest, width, height, src, xSrc, ySrc, SRCCOPY))), false;
<a name="l06535"></a>06535     }
<a name="l06536"></a>06536 
<a name="l06537"></a>06537 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06538"></a>06538 
<a name="l06539"></a>06539 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gac56527a904e9f996fc388e96dd086f45" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом прозрачности...">txAlphaBlend</a> (HDC dest, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height,
<a name="l06540"></a>06540                    HDC src,  <span class="keywordtype">int</span> xSrc,  <span class="keywordtype">int</span> ySrc,  <span class="keywordtype">double</span> alpha <span class="comment">/*= 1.0*/</span>)
<a name="l06541"></a>06541     {
<a name="l06542"></a>06542 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06543"></a>06543 $   _TX_IF_ARGUMENT_FAILED (dest) return false;
<a name="l06544"></a>06544 $   _TX_IF_ARGUMENT_FAILED (src)  return false;
<a name="l06545"></a>06545 
<a name="l06546"></a>06546 $   if (alpha &lt; 0) alpha = 0;
<a name="l06547"></a>06547 $   if (alpha &gt; 1) alpha = 1;
<a name="l06548"></a>06548 
<a name="l06549"></a>06549 $   BLENDFUNCTION blend = { AC_SRC_OVER, 0, (BYTE) (alpha * 255 + 0.5), AC_SRC_ALPHA };
<a name="l06550"></a>06550 
<a name="l06551"></a>06551 $   <span class="keywordflow">return</span> (Win32::AlphaBlend)?
<a name="l06552"></a>06552         <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::AlphaBlend (dest, xDest, yDest, width, height, src, xSrc, ySrc, width, height, blend)))
<a name="l06553"></a>06553     :
<a name="l06554"></a>06554         <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::BitBlt     (dest, xDest, yDest, width, height, src, xSrc, ySrc, SRCCOPY))), false;
<a name="l06555"></a>06555     }
<a name="l06556"></a>06556 
<a name="l06557"></a>06557 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06558"></a>06558 
<a name="l06559"></a>06559 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a> (<span class="keywordtype">int</span> update <span class="comment">/*= true*/</span>)
<a name="l06560"></a>06560     {
<a name="l06561"></a>06561 $1  <span class="keywordflow">return</span> _txCanvas_SetRefreshLock (update &gt;= 0? !update : -update);
<a name="l06562"></a>06562     }
<a name="l06563"></a>06563 
<a name="l06564"></a>06564 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06565"></a>06565 
<a name="l06566"></a>06566 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gae92e621aaed81f90e4d142356e38762a" title="Блокирует обновление изображения окна, во избежание мигания.">txBegin</a>()
<a name="l06567"></a>06567     {
<a name="l06568"></a>06568 $1  _txCanvas_SetRefreshLock (_txCanvas_RefreshLock + 1);
<a name="l06569"></a>06569 
<a name="l06570"></a>06570 $   <span class="keywordflow">return</span> _txCanvas_RefreshLock;
<a name="l06571"></a>06571     }
<a name="l06572"></a>06572 
<a name="l06573"></a>06573 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06574"></a>06574 
<a name="l06575"></a>06575 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00029.htm#ga809dc04afd5348247846ee01ce9a06e6" title="Разблокирует обновление окна, заблокированное функцией txBegin().">txEnd</a>()
<a name="l06576"></a>06576     {
<a name="l06577"></a>06577 $1  _txCanvas_SetRefreshLock (_txCanvas_RefreshLock - 1);
<a name="l06578"></a>06578 
<a name="l06579"></a>06579 $   <span class="keywordflow">return</span> _txCanvas_RefreshLock;
<a name="l06580"></a>06580     }
<a name="l06581"></a>06581 
<a name="l06582"></a>06582 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06583"></a>06583 
<a name="l06584"></a>06584 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga483686b1ddea3a3de72ff5117f17ea30" title="Задерживает выполнение программы на определенное время.">txSleep</a> (<span class="keywordtype">int</span> time)
<a name="l06585"></a>06585     {
<a name="l06586"></a>06586 $1  <span class="keywordtype">bool</span> ok = <a class="code" href="a00029.htm#ga6971b22d5486b242e20a8dea1f21422a" title="Проверка правильности работы библиотеки">txOK</a>();
<a name="l06587"></a>06587 
<a name="l06588"></a>06588 $   <span class="keywordtype">int</span> old = (ok)? _txCanvas_SetRefreshLock (0) : 0;
<a name="l06589"></a>06589 
<a name="l06590"></a>06590 $   Sleep (time);
<a name="l06591"></a>06591 
<a name="l06592"></a>06592 $   <span class="keywordflow">if</span> (ok) _txCanvas_SetRefreshLock (old);
<a name="l06593"></a>06593 
<a name="l06594"></a>06594 $   <span class="keywordflow">return</span> old != 0;
<a name="l06595"></a>06595     }
<a name="l06596"></a>06596 
<a name="l06597"></a>06597 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06598"></a>06598 
<a name="l06599"></a>06599 <span class="keywordtype">bool</span> <a class="code" href="a00033.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock</a> (<span class="keywordtype">bool</span> wait <span class="comment">/*= true*/</span>)
<a name="l06600"></a>06600     {
<a name="l06601"></a>06601 $1  <span class="keywordflow">if</span> (_txCanvas_RefreshLock &lt;= 0 || _txExit) Sleep (0);
<a name="l06602"></a>06602 
<a name="l06603"></a>06603 $   <span class="keywordflow">if</span> (wait) { $ <span class="keywordflow">return</span>      EnterCriticalSection (&amp;_txCanvas_LockBackBuf), <span class="keyword">true</span>; }
<a name="l06604"></a>06604     <span class="keywordflow">else</span>      { $ <span class="keywordflow">return</span> !!TryEnterCriticalSection (&amp;_txCanvas_LockBackBuf);       }
<a name="l06605"></a>06605     }
<a name="l06606"></a>06606 
<a name="l06607"></a>06607 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06608"></a>06608 
<a name="l06609"></a>06609 <span class="keywordtype">bool</span> <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>()
<a name="l06610"></a>06610     {
<a name="l06611"></a>06611 $1  LeaveCriticalSection (&amp;_txCanvas_LockBackBuf);
<a name="l06612"></a>06612 
<a name="l06613"></a>06613 $   <span class="keywordflow">if</span> (_txCanvas_RefreshLock &lt;= 0 || _txExit) Sleep (0);
<a name="l06614"></a>06614 $   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06615"></a>06615     }
<a name="l06616"></a>06616 
<a name="l06617"></a>06617 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06618"></a>06618 
<a name="l06619"></a>06619 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l06620"></a>06620 <span class="keyword">inline</span> T <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a> (T value)
<a name="l06621"></a>06621     {
<a name="l06622"></a>06622 $1  <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>();
<a name="l06623"></a>06623 $   <span class="keywordflow">return</span> value;
<a name="l06624"></a>06624     }
<a name="l06625"></a>06625 
<a name="l06626"></a>06626 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06627"></a>06627 
<a name="l06628"></a>06628 <span class="keyword">inline</span> POINT <a class="code" href="a00030.htm#ga452a1a7dc5d3f467c8b79b9db3ea053e" title="Возвращает позицию Мыши!">txMousePos</a>()
<a name="l06629"></a>06629     {
<a name="l06630"></a>06630 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (POINT);
<a name="l06631"></a>06631 
<a name="l06632"></a>06632 $   <span class="keywordflow">return</span> _txMousePos;
<a name="l06633"></a>06633     }
<a name="l06634"></a>06634 
<a name="l06635"></a>06635 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06636"></a>06636 
<a name="l06637"></a>06637 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00030.htm#ga6adbdb491a8eec2a4209c54874ae7b7d" title="Возвращает Х-Координату Мыши!">txMouseX</a>()
<a name="l06638"></a>06638     {
<a name="l06639"></a>06639 $1  <span class="keywordflow">return</span> _txMousePos.x;
<a name="l06640"></a>06640     }
<a name="l06641"></a>06641 
<a name="l06642"></a>06642 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06643"></a>06643 
<a name="l06644"></a>06644 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00030.htm#ga572acf2310d35defaa9a37a2ec260576" title="Возвращает Y-Координату Мыши!">txMouseY</a>()
<a name="l06645"></a>06645     {
<a name="l06646"></a>06646 $1  <span class="keywordflow">return</span> _txMousePos.y;
<a name="l06647"></a>06647     }
<a name="l06648"></a>06648 
<a name="l06649"></a>06649 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06650"></a>06650 
<a name="l06651"></a>06651 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00030.htm#gab814b21d8f52c3efd0d7175d30a4fa73" title="Возвращает состояние Кнопок Мыши!">txMouseButtons</a>()
<a name="l06652"></a>06652     {
<a name="l06653"></a>06653 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> 0;
<a name="l06654"></a>06654 
<a name="l06655"></a>06655 $   <span class="keywordflow">return</span> _txMouseButtons;
<a name="l06656"></a>06656     }
<a name="l06657"></a>06657 
<a name="l06658"></a>06658 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06659"></a>06659 
<a name="l06660"></a>06660 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gad993cf2d466cf203a1365e117b937d7f" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (WORD color <span class="comment">/*= 0x07*/</span>)
<a name="l06661"></a>06661     {
<a name="l06662"></a>06662 $1  <span class="keywordflow">return</span> !!SetConsoleTextAttribute (GetStdHandle (STD_OUTPUT_HANDLE), color);
<a name="l06663"></a>06663     }
<a name="l06664"></a>06664 
<a name="l06665"></a>06665 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06666"></a>06666 
<a name="l06667"></a>06667 WORD <a class="code" href="a00029.htm#ga09e52cdcd5a3fc97015a4ddbd3a0a0c2" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a>()
<a name="l06668"></a>06668     {
<a name="l06669"></a>06669 $1  CONSOLE_SCREEN_BUFFER_INFO con = {{0}};
<a name="l06670"></a>06670 $   GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &amp;con);
<a name="l06671"></a>06671 
<a name="l06672"></a>06672 $   <span class="keywordflow">return</span> con.wAttributes;
<a name="l06673"></a>06673     }
<a name="l06674"></a>06674 
<a name="l06675"></a>06675 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06676"></a>06676 
<a name="l06677"></a>06677 POINT <a class="code" href="a00029.htm#ga01d08fd56e2e727a76c8ed724a735326" title="Устанавливает позицию мигающего курсора консоли.">txSetConsoleCursorPos</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y)
<a name="l06678"></a>06678     {
<a name="l06679"></a>06679 $1  POINT fontSz = <a class="code" href="a00029.htm#ga56faf7c36cf0112165fb705fedf6ec8e" title="Возвращает размеры шрифта консоли.">txGetConsoleFontSize</a>();
<a name="l06680"></a>06680 
<a name="l06681"></a>06681 $   CONSOLE_SCREEN_BUFFER_INFO con = {{0}};
<a name="l06682"></a>06682 $   GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &amp;con) asserted;
<a name="l06683"></a>06683 
<a name="l06684"></a>06684 $   COORD pos = { (short) (1.0 * x / fontSz.x + 0.5 + con.srWindow.Left),
<a name="l06685"></a>06685                   (short) (1.0 * y / fontSz.y + 0.5 + con.srWindow.Top) };
<a name="l06686"></a>06686 
<a name="l06687"></a>06687 $   SetConsoleCursorPosition (GetStdHandle (STD_OUTPUT_HANDLE), pos) asserted;
<a name="l06688"></a>06688 
<a name="l06689"></a>06689 $   POINT prev = { (int) (1.0 * (con.dwCursorPosition.X - con.srWindow.Left) / fontSz.x + 0.5),
<a name="l06690"></a>06690                    (int) (1.0 * (con.dwCursorPosition.Y - con.srWindow.Top ) / fontSz.y + 0.5) };
<a name="l06691"></a>06691 $   <span class="keywordflow">return</span> prev;
<a name="l06692"></a>06692     }
<a name="l06693"></a>06693 
<a name="l06694"></a>06694 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06695"></a>06695 
<a name="l06696"></a>06696 POINT <a class="code" href="a00029.htm#ga3227242c57eef33049cdaee655f4faee" title="Возвращает позицию мигающего курсора консоли.">txGetConsoleCursorPos</a>()
<a name="l06697"></a>06697     {
<a name="l06698"></a>06698 $1  POINT fontSz = <a class="code" href="a00029.htm#ga56faf7c36cf0112165fb705fedf6ec8e" title="Возвращает размеры шрифта консоли.">txGetConsoleFontSize</a>();
<a name="l06699"></a>06699 
<a name="l06700"></a>06700 $   CONSOLE_SCREEN_BUFFER_INFO con = {{0}};
<a name="l06701"></a>06701 $   GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &amp;con) asserted;
<a name="l06702"></a>06702 
<a name="l06703"></a>06703 $   POINT pos = { (int) (1.0 * (con.dwCursorPosition.X - con.srWindow.Left) / fontSz.x + 0.5),
<a name="l06704"></a>06704                   (int) (1.0 * (con.dwCursorPosition.Y - con.srWindow.Top ) / fontSz.y + 0.5) };
<a name="l06705"></a>06705 $   <span class="keywordflow">return</span> pos;
<a name="l06706"></a>06706     }
<a name="l06707"></a>06707 
<a name="l06708"></a>06708 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06709"></a>06709 
<a name="l06710"></a>06710 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga2cb63c12d9206e9ed2b2c83c9a08f68e" title="Стирает текст консоли.">txClearConsole</a>()
<a name="l06711"></a>06711     {
<a name="l06712"></a>06712 $1  HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l06713"></a>06713 
<a name="l06714"></a>06714 $   CONSOLE_SCREEN_BUFFER_INFO con = {{0}};
<a name="l06715"></a>06715 $   GetConsoleScreenBufferInfo (out, &amp;con) asserted;
<a name="l06716"></a>06716 
<a name="l06717"></a>06717 $   COORD start = {con.srWindow.Left, con.srWindow.Top};
<a name="l06718"></a>06718 
<a name="l06719"></a>06719 $   DWORD len   = (con.srWindow.Right  - con.srWindow.Left + 1) *
<a name="l06720"></a>06720                   (con.srWindow.Bottom - con.srWindow.Top  + 1);
<a name="l06721"></a>06721 
<a name="l06722"></a>06722 $   DWORD written = 0;
<a name="l06723"></a>06723 $   FillConsoleOutputCharacter (out, 0x20 <span class="comment">/*&#39; &#39;*/</span>,    len, start, &amp;written) asserted;
<a name="l06724"></a>06724 $   FillConsoleOutputAttribute (out, con.wAttributes, len, start, &amp;written) asserted;
<a name="l06725"></a>06725 
<a name="l06726"></a>06726 $   SetConsoleCursorPosition (GetStdHandle (STD_OUTPUT_HANDLE), start) asserted;
<a name="l06727"></a>06727 
<a name="l06728"></a>06728 $   return written == len;
<a name="l06729"></a>06729     }
<a name="l06730"></a>06730 
<a name="l06731"></a>06731 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06732"></a>06732 
<a name="l06733"></a>06733 POINT <a class="code" href="a00029.htm#ga56faf7c36cf0112165fb705fedf6ec8e" title="Возвращает размеры шрифта консоли.">txGetConsoleFontSize</a>()
<a name="l06734"></a>06734     {
<a name="l06735"></a>06735 $1  CONSOLE_FONT_INFO font = {0, {8, 16}};
<a name="l06736"></a>06736 
<a name="l06737"></a>06737 $   (_TX_SAFECALL (Win32::GetCurrentConsoleFont) (GetStdHandle (STD_OUTPUT_HANDLE), <span class="keyword">false</span>, &amp;font)) <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l06738"></a>06738 
<a name="l06739"></a>06739 $   SIZE size = { font.dwFontSize.X, font.dwFontSize.Y };
<a name="l06740"></a>06740 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (Win32::GetTextExtentPoint32 (_txCanvas_BackBuf[1], <span class="stringliteral">&quot;W&quot;</span>, 1, &amp;size));
<a name="l06741"></a>06741 
<a name="l06742"></a>06742 $   POINT sizeFont = { size.cx, size.cy };
<a name="l06743"></a>06743 $   <span class="keywordflow">return</span> sizeFont;
<a name="l06744"></a>06744     }
<a name="l06745"></a>06745 
<a name="l06746"></a>06746 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06747"></a>06747 
<a name="l06748"></a>06748 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gaa148d2040d20ed74cf46ab186c35f9ed" title="Запрещает или разрешает рисование мигающего курсора в окне.">txTextCursor</a> (<span class="keywordtype">bool</span> blink <span class="comment">/*= true*/</span>)
<a name="l06749"></a>06749     {
<a name="l06750"></a>06750 $1  <span class="keywordtype">bool</span> old = _txConsole_IsBlinking;
<a name="l06751"></a>06751 
<a name="l06752"></a>06752 $   _txConsole_IsBlinking = blink;
<a name="l06753"></a>06753 
<a name="l06754"></a>06754 $   <span class="keywordflow">return</span> old;
<a name="l06755"></a>06755     }
<a name="l06756"></a>06756 
<a name="l06757"></a>06757 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06758"></a>06758 
<a name="l06759"></a>06759 <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#ga177f8bcb7544821ea4b5bd0571fe7196" title="Воспроизводит звуковой файл.">txPlaySound</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> filename[] <span class="comment">/*= NULL*/</span>, DWORD mode <span class="comment">/*= SND_ASYNC*/</span>)
<a name="l06760"></a>06760     {
<a name="l06761"></a>06761 $1  _TX_IF_ARGUMENT_FAILED (!(filename &amp;&amp; !*filename)) return false;
<a name="l06762"></a>06762 
<a name="l06763"></a>06763 $   mode |= SND_FILENAME | SND_NODEFAULT | SND_NOWAIT;
<a name="l06764"></a>06764 $   if (mode &amp; SND_LOOP) mode = (mode &amp; ~SND_SYNC) | SND_ASYNC;
<a name="l06765"></a>06765 
<a name="l06766"></a>06766 $   if (!filename) mode = SND_PURGE;
<a name="l06767"></a>06767 
<a name="l06768"></a>06768 $   return !!Win32::PlaySound (filename, NULL, mode);
<a name="l06769"></a>06769     }
<a name="l06770"></a>06770 
<a name="l06771"></a>06771 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06772"></a>06772 
<a name="l06773"></a>06773 WNDPROC <a class="code" href="a00033.htm#ga5a127fc3e1eeb4ab9241ee61a0ff2938" title="Устанавливает дополнительный обработчик оконных сообщений Windows.">txSetWindowHandler</a> (WNDPROC handler <span class="comment">/*= NULL*/</span>)
<a name="l06774"></a>06774     {
<a name="l06775"></a>06775 $1  WNDPROC old = _txAltWndProc; _txAltWndProc = handler;
<a name="l06776"></a>06776 $   <span class="keywordflow">return</span>  old;
<a name="l06777"></a>06777     }
<a name="l06778"></a>06778 
<a name="l06779"></a>06779 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06780"></a>06780 
<a name="l06781"></a>06781 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga478e37d200950e3e5ad78779e803387e" title="Делает нечто иногда удобное. См. название функции.">txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillCloseAndIWillNotBeAskingWhereIsMyPicture</a>()
<a name="l06782"></a>06782     {
<a name="l06783"></a>06783 $1  MessageBox (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(),
<a name="l06784"></a>06784                 <span class="stringliteral">&quot;Это запланированная ошибка. Такое бывает. Вы хотели вызвать:&quot;</span> <span class="stringliteral">&quot;\n\n&quot;</span>
<a name="l06785"></a>06785                 <span class="stringliteral">&quot;txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillCloseAndIWillNotBeAskingWhereIsMyPicture()&quot;</span> <span class="stringliteral">&quot;\n\n&quot;</span>
<a name="l06786"></a>06786                 <span class="stringliteral">&quot;Хоть вы долго [копировали]набирали это имя, на самом деле эта функция не работает.&quot;</span> <span class="stringliteral">&quot;\n&quot;</span>
<a name="l06787"></a>06787                 <span class="stringliteral">&quot;Но для нее есть работающий синоним. См. определение этой функции в исходных текстах библиотеки.&quot;</span>    <span class="stringliteral">&quot;\n\n&quot;</span>,
<a name="l06788"></a>06788                 <span class="stringliteral">&quot;Не получилось&quot;</span>, MB_ICONSTOP);
<a name="l06789"></a>06789 
<a name="l06790"></a>06790     <span class="comment">// The truth is out there...</span>
<a name="l06791"></a>06791 
<a name="l06792"></a>06792 $   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06793"></a>06793     }
<a name="l06794"></a>06794 
<a name="l06795"></a>06795 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06796"></a>06796 
<a name="l06797"></a>06797 <span class="comment">// Bingo! Now you are learned to use the Sources, Luke. And may the Source be with you.</span>
<a name="l06798"></a>06798 
<a name="l06799"></a>06799 <span class="keyword">inline</span> <span class="keywordtype">bool</span> txDisableAutoPause()
<a name="l06800"></a>06800     {
<a name="l06801"></a>06801 $1  _txExit = <span class="keyword">true</span>;
<a name="l06802"></a>06802 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l06803"></a>06803     }
<a name="l06804"></a>06804 
<a name="l06805"></a>06805 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06806"></a>06806 
<a name="l06807"></a>06807 <span class="keywordtype">double</span> <a class="code" href="a00032.htm#gaebe0b0f6b1324031ee6b9461ba5b0ab3" title="Оценивает скорость работы компьютера.">txQueryPerformance</a>()
<a name="l06808"></a>06808     {
<a name="l06809"></a>06809 $1  <span class="keywordtype">int</span> maxTime    =  500;
<a name="l06810"></a>06810 $   <span class="keywordtype">int</span> maxSamples =  100;
<a name="l06811"></a>06811 $   POINT size     = {500, 500};
<a name="l06812"></a>06812 
<a name="l06813"></a>06813 $   HDC dc = _txBuffer_Create (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), &amp;size, NULL);
<a name="l06814"></a>06814 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (dc); <span class="keywordflow">if</span> (!dc) <span class="keywordflow">return</span> -1;
<a name="l06815"></a>06815 
<a name="l06816"></a>06816 $   DWORD mask = (DWORD) SetThreadAffinityMask (GetCurrentThread(), 1);
<a name="l06817"></a>06817 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (mask);
<a name="l06818"></a>06818 
<a name="l06819"></a>06819 $   LARGE_INTEGER freq = {{0}};
<a name="l06820"></a>06820 $   QueryPerformanceFrequency (&amp;freq) asserted;
<a name="l06821"></a>06821 
<a name="l06822"></a>06822 $   LARGE_INTEGER start = {{0}};
<a name="l06823"></a>06823 $   QueryPerformanceCounter (&amp;start) asserted;
<a name="l06824"></a>06824 
<a name="l06825"></a>06825 $   <span class="keywordtype">int</span> samples = 0;
<a name="l06826"></a>06826 $   while (samples++ &lt; maxSamples)
<a name="l06827"></a>06827         {
<a name="l06828"></a>06828 $       LARGE_INTEGER cur = {{0}};
<a name="l06829"></a>06829 $       QueryPerformanceCounter (&amp;cur) asserted;
<a name="l06830"></a>06830 
<a name="l06831"></a>06831 $       <span class="keywordtype">double</span> t = 1000.0 * (cur.QuadPart - start.QuadPart) / freq.QuadPart;
<a name="l06832"></a>06832 $       if (t &gt; maxTime) break;
<a name="l06833"></a>06833 
<a name="l06834"></a>06834         <span class="comment">// Draw test scene</span>
<a name="l06835"></a>06835 
<a name="l06836"></a>06836 $       for (<span class="keywordtype">int</span> y = 0; y &lt; size.y; y += 10)
<a name="l06837"></a>06837         for (<span class="keywordtype">int</span> x = 0; x &lt; size.x; x += 10)
<a name="l06838"></a>06838            Win32::TextOut (dc, x, y, &quot;*&quot;, 1);
<a name="l06839"></a>06839 
<a name="l06840"></a>06840 $       Win32::Ellipse (dc, 0, 0, size.x, size.y);
<a name="l06841"></a>06841 $       Win32::ExtFloodFill (dc, size.x/2, size.y/2, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>, FLOODFILLSURFACE);
<a name="l06842"></a>06842 
<a name="l06843"></a>06843 $       <a class="code" href="a00029.htm#gadf16aed8a30951ff3239fffd440a8c76" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (dc, size.x/2,        0, size.x/2, size.y/2, dc,        0,        0) asserted;
<a name="l06844"></a>06844 $       <a class="code" href="a00029.htm#gadf16aed8a30951ff3239fffd440a8c76" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (dc, size.x/2, size.y/2, size.x/2, size.y/2, dc,        0, size.y/2) asserted;
<a name="l06845"></a>06845 $       <a class="code" href="a00029.htm#gadf16aed8a30951ff3239fffd440a8c76" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (dc,        0, size.y/2, size.x/2, size.y/2, dc,        0,        0) asserted;
<a name="l06846"></a>06846 $       <a class="code" href="a00029.htm#gadf16aed8a30951ff3239fffd440a8c76" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (dc, size.x/2, size.y/2, size.x/2, size.y/2, dc, size.x/2,        0) asserted;
<a name="l06847"></a>06847         }
<a name="l06848"></a>06848 
<a name="l06849"></a>06849 $   mask = (DWORD) SetThreadAffinityMask (GetCurrentThread(), mask);
<a name="l06850"></a>06850 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через MessageBox(), консоль и OutputDebugSt...">assert</a> (mask);
<a name="l06851"></a>06851 
<a name="l06852"></a>06852 $   _txBuffer_Delete (&amp;dc);
<a name="l06853"></a>06853 
<a name="l06854"></a>06854 $   return 15.0 * samples / sqrt (1.0 * size.x * size.y);
<a name="l06855"></a>06855     }
<a name="l06856"></a>06856 
<a name="l06857"></a>06857 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06858"></a>06858 
<a name="l06859"></a>06859 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (COLORREF color, COLORREF component)
<a name="l06860"></a>06860     {
<a name="l06861"></a>06861 $1  <span class="keywordflow">switch</span> (component)
<a name="l06862"></a>06862         {
<a name="l06863"></a>06863         <span class="keywordflow">case</span> <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927" title="Темно-красный цвет.">TX_RED</a>:
<a name="l06864"></a>06864         <span class="keywordflow">case</span> <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aba144158f057694f9f08189c0b6a7d65" title="Цветовой тон цвета в модели HSL.">TX_HUE</a>:        $ <span class="keywordflow">return</span> (color &gt;&gt;  0) &amp; 0xFF;
<a name="l06865"></a>06865 
<a name="l06866"></a>06866         <span class="keywordflow">case</span> <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aa13a0e0eb4587540bd06cb5d55083032" title="Зеленый цвет.">TX_GREEN</a>:
<a name="l06867"></a>06867         <span class="keywordflow">case</span> <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a18419bb9192c947fb25d517765dd04cc" title="Насыщенность цвета в модели HSL.">TX_SATURATION</a>: $ <span class="keywordflow">return</span> (color &gt;&gt;  8) &amp; 0xFF;
<a name="l06868"></a>06868 
<a name="l06869"></a>06869         <span class="keywordflow">case</span> <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aac23422a0b96bfc917484ba1fb0990de" title="Темно-синий цвет.">TX_BLUE</a>:
<a name="l06870"></a>06870         <span class="keywordflow">case</span> <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5acc91e717a52d475213f0201bfae5341e" title="Светлота цвета в модели HSL.">TX_LIGHTNESS</a>:  $ <span class="keywordflow">return</span> (color &gt;&gt; 16) &amp; 0xFF;
<a name="l06871"></a>06871 
<a name="l06872"></a>06872         <span class="keywordflow">default</span>:            $ <span class="keywordflow">return</span> CLR_INVALID;
<a name="l06873"></a>06873         }
<a name="l06874"></a>06874     }
<a name="l06875"></a>06875 
<a name="l06876"></a>06876 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06877"></a>06877 
<a name="l06878"></a>06878 COLORREF <a class="code" href="a00029.htm#ga0dc8953591b63696392ec581c6b25f7c" title="Преобразует цвет из формата RGB в формат HSL.">txRGB2HSL</a> (COLORREF rgbColor)
<a name="l06879"></a>06879     {
<a name="l06880"></a>06880 $1  <span class="keywordtype">int</span> r = <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (rgbColor, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927" title="Темно-красный цвет.">TX_RED</a>),
<a name="l06881"></a>06881         g = <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (rgbColor, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aa13a0e0eb4587540bd06cb5d55083032" title="Зеленый цвет.">TX_GREEN</a>),
<a name="l06882"></a>06882         b = <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (rgbColor, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aac23422a0b96bfc917484ba1fb0990de" title="Темно-синий цвет.">TX_BLUE</a>);
<a name="l06883"></a>06883 
<a name="l06884"></a>06884 $   <span class="keywordtype">double</span> m1 = <a class="code" href="a00032.htm#gafa99ec4acc4ecb2dc3c2d05da15d0e3f" title="Возвращает максимальное из двух чисел">MAX</a> (<a class="code" href="a00032.htm#gafa99ec4acc4ecb2dc3c2d05da15d0e3f" title="Возвращает максимальное из двух чисел">MAX</a> (r, g), b) / 255.0,
<a name="l06885"></a>06885            m2 = <a class="code" href="a00032.htm#ga3acffbd305ee72dcd4593c0d8af64a4f" title="Возвращает минимальное из двух чисел">MIN</a> (<a class="code" href="a00032.htm#ga3acffbd305ee72dcd4593c0d8af64a4f" title="Возвращает минимальное из двух чисел">MIN</a> (r, g), b) / 255.0,
<a name="l06886"></a>06886            dm = m1 - m2,
<a name="l06887"></a>06887            sm = m1 + m2,
<a name="l06888"></a>06888 
<a name="l06889"></a>06889            ir = r / 255.0,
<a name="l06890"></a>06890            ig = g / 255.0,
<a name="l06891"></a>06891            ib = b / 255.0,
<a name="l06892"></a>06892 
<a name="l06893"></a>06893            ih = 0,
<a name="l06894"></a>06894            is = 0,
<a name="l06895"></a>06895            il = sm / 2;
<a name="l06896"></a>06896 
<a name="l06897"></a>06897 $   <span class="keyword">const</span> <span class="keywordtype">double</span> prec = 0.001;
<a name="l06898"></a>06898 
<a name="l06899"></a>06899 $   <span class="keywordflow">if</span> (fabs (dm) &lt; prec)
<a name="l06900"></a>06900         {
<a name="l06901"></a>06901 $       is = dm / ((sm &lt;= 1)? sm : (2-sm));
<a name="l06902"></a>06902 
<a name="l06903"></a>06903 $       <span class="keywordtype">double</span> cr = (m1 - ir) / dm,
<a name="l06904"></a>06904                cg = (m1 - ig) / dm,
<a name="l06905"></a>06905                cb = (m1 - ib) / dm;
<a name="l06906"></a>06906 
<a name="l06907"></a>06907 $       <span class="keywordflow">if</span> (fabs (ir - m1) &lt; prec) ih =     cb - cg;
<a name="l06908"></a>06908 $       <span class="keywordflow">if</span> (fabs (ig - m1) &lt; prec) ih = 2 + cr - cb;
<a name="l06909"></a>06909 $       <span class="keywordflow">if</span> (fabs (ib - m1) &lt; prec) ih = 4 + cg - cr;
<a name="l06910"></a>06910         }
<a name="l06911"></a>06911 
<a name="l06912"></a>06912 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (((ih &gt;= 0)? ih*60 : ih*60 + 360) *255/360 + 0.5, is*255 + 0.5, il*255 + 0.5);
<a name="l06913"></a>06913     }
<a name="l06914"></a>06914 
<a name="l06915"></a>06915 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06916"></a>06916 
<a name="l06917"></a>06917 COLORREF <a class="code" href="a00029.htm#ga1a87b7cd3e5a74e4dc6828d42d03fffa" title="Преобразует цвет из формата HSL в формат RGB.">txHSL2RGB</a> (COLORREF hslColor)
<a name="l06918"></a>06918     {
<a name="l06919"></a>06919 $1  <span class="keyword">struct </span>xRGB
<a name="l06920"></a>06920         {
<a name="l06921"></a>06921         <span class="keyword">static</span> <span class="keywordtype">double</span> calc (<span class="keywordtype">double</span> h, <span class="keywordtype">double</span> m1, <span class="keywordtype">double</span> m2)
<a name="l06922"></a>06922             {
<a name="l06923"></a>06923 $           <span class="keywordflow">if</span> (h &lt; 0)   h += 360;
<a name="l06924"></a>06924 $           <span class="keywordflow">if</span> (h &gt; 360) h -= 360;
<a name="l06925"></a>06925 
<a name="l06926"></a>06926 $           <span class="keywordflow">return</span> (h &lt;  60)? m1 + (m2-m1) *      h  / 60 :
<a name="l06927"></a>06927                    (h &lt; 180)? m2 :
<a name="l06928"></a>06928                    (h &lt; 240)? m1 + (m2-m1) * (240-h) / 60 :
<a name="l06929"></a>06929                               m1;
<a name="l06930"></a>06930             }
<a name="l06931"></a>06931         };
<a name="l06932"></a>06932 
<a name="l06933"></a>06933 $   <span class="keywordtype">int</span> h = <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (hslColor, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aba144158f057694f9f08189c0b6a7d65" title="Цветовой тон цвета в модели HSL.">TX_HUE</a>),
<a name="l06934"></a>06934         s = <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (hslColor, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a18419bb9192c947fb25d517765dd04cc" title="Насыщенность цвета в модели HSL.">TX_SATURATION</a>),
<a name="l06935"></a>06935         l = <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (hslColor, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5acc91e717a52d475213f0201bfae5341e" title="Светлота цвета в модели HSL.">TX_LIGHTNESS</a>);
<a name="l06936"></a>06936 
<a name="l06937"></a>06937 $   <span class="keywordtype">double</span> ih = h / 255.0 * 360,
<a name="l06938"></a>06938            il = l / 100.0,
<a name="l06939"></a>06939            is = s / 100.0,
<a name="l06940"></a>06940 
<a name="l06941"></a>06941            m2 = (il &lt;= 0.5)? il * (1 + is) : il + is - il * is,
<a name="l06942"></a>06942            m1 = 2 * il - m2,
<a name="l06943"></a>06943 
<a name="l06944"></a>06944            ir = s? xRGB::calc (ih + 120, m1, m2) : il,
<a name="l06945"></a>06945            ig = s? xRGB::calc (ih,       m1, m2) : il,
<a name="l06946"></a>06946            ib = s? xRGB::calc (ih - 120, m1, m2) : il;
<a name="l06947"></a>06947 
<a name="l06948"></a>06948 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (ir * 255 + 0.5, ig * 255 + 0.5, ib * 255 + 0.5);
<a name="l06949"></a>06949     }
<a name="l06950"></a>06950 
<a name="l06951"></a>06951 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06952"></a>06952 
<a name="l06953"></a>06953 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l06954"></a>06954 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (T x, T a, T b)
<a name="l06955"></a>06955     {
<a name="l06956"></a>06956     <span class="keywordflow">return</span> a &lt;= x &amp;&amp; x &lt;= b;
<a name="l06957"></a>06957     }
<a name="l06958"></a>06958 
<a name="l06959"></a>06959 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06960"></a>06960 
<a name="l06961"></a>06961 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (<span class="keyword">const</span> POINT&amp; pt, <span class="keyword">const</span> RECT&amp; rect)
<a name="l06962"></a>06962     {
<a name="l06963"></a>06963     _TX_IF_ARGUMENT_FAILED (&amp;pt)   return 0;
<a name="l06964"></a>06964     _TX_IF_ARGUMENT_FAILED (&amp;rect) return 0;
<a name="l06965"></a>06965 
<a name="l06966"></a>06966     return <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (pt.x, rect.left, rect.right) &amp;&amp;
<a name="l06967"></a>06967            <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (pt.y, rect.top,  rect.bottom);
<a name="l06968"></a>06968     }
<a name="l06969"></a>06969 
<a name="l06970"></a>06970 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06971"></a>06971 
<a name="l06972"></a>06972 inline <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (const COORD&amp; pt, const SMALL_RECT&amp; rect)
<a name="l06973"></a>06973     {
<a name="l06974"></a>06974     _TX_IF_ARGUMENT_FAILED (&amp;pt)   return 0;
<a name="l06975"></a>06975     _TX_IF_ARGUMENT_FAILED (&amp;rect) return 0;
<a name="l06976"></a>06976 
<a name="l06977"></a>06977     return <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (pt.X, rect.Left, rect.Right) &amp;&amp;
<a name="l06978"></a>06978            <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (pt.Y, rect.Top,  rect.Bottom);
<a name="l06979"></a>06979     }
<a name="l06980"></a>06980 
<a name="l06981"></a>06981 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06982"></a>06982 
<a name="l06983"></a>06983 inline <span class="keywordtype">int</span> <a class="code" href="a00032.htm#gaa4558a3bf2a126a9e19c5a3655520787" title="Генератор случайных чисел">random</a> (<span class="keywordtype">int</span> range)
<a name="l06984"></a>06984     {
<a name="l06985"></a>06985     <span class="keywordflow">return</span> rand() % range;
<a name="l06986"></a>06986     }
<a name="l06987"></a>06987 
<a name="l06988"></a>06988 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06989"></a>06989 
<a name="l06990"></a>06990 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="a00032.htm#gaa4558a3bf2a126a9e19c5a3655520787" title="Генератор случайных чисел">random</a> (<span class="keywordtype">double</span> left, <span class="keywordtype">double</span> right)
<a name="l06991"></a>06991     {
<a name="l06992"></a>06992     <span class="keywordflow">return</span> left + (right - left) * ((<span class="keywordtype">double</span>) rand() / RAND_MAX);
<a name="l06993"></a>06993     }
<a name="l06994"></a>06994 
<a name="l06995"></a>06995 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l06996"></a>06996 
<a name="l06997"></a>06997 template &lt;typename T&gt;
<a name="l06998"></a>06998 inline T zero()
<a name="l06999"></a>06999 <span class="preprocessor">#ifdef _MSC_VER_6</span>
<a name="l07000"></a>07000 <span class="preprocessor"></span>    { T z = {0}; <span class="keywordflow">return</span> z; }
<a name="l07001"></a>07001 
<a name="l07002"></a>07002 <span class="preprocessor">#else</span>
<a name="l07003"></a>07003 <span class="preprocessor"></span>    { T z = { }; <span class="keywordflow">return</span> z; }
<a name="l07004"></a>07004 
<a name="l07005"></a>07005 <span class="preprocessor">#endif</span>
<a name="l07006"></a>07006 <span class="preprocessor"></span>
<a name="l07007"></a>07007 <span class="comment">//}</span>
<a name="l07008"></a>07008 <span class="comment">//============================================================================================</span>
<a name="l07009"></a>07009 
<a name="l07010"></a>07010 <span class="comment">//============================================================================================</span>
<a name="l07011"></a>07011 <span class="comment">//{          txDialog methods implementation</span>
<a name="l07012"></a>07012 <span class="comment">//           Реализация методов класса txDialog</span>
<a name="l07013"></a>07013 <span class="comment">//============================================================================================</span>
<a name="l07014"></a>07014 
<a name="l07015"></a>07015 <a class="code" href="a00009.htm#a2c09320a023bef21f6857d2dae75931b" title="Конструктор.">txDialog::txDialog</a> () :
<a name="l07016"></a>07016     layout_ (NULL)
<a name="l07017"></a>07017     {$1}
<a name="l07018"></a>07018 
<a name="l07019"></a>07019 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07020"></a>07020 
<a name="l07021"></a>07021 <a class="code" href="a00009.htm#a2c09320a023bef21f6857d2dae75931b" title="Конструктор.">txDialog::txDialog</a> (<span class="keyword">const</span> Layout* layout) :
<a name="l07022"></a>07022     layout_ (layout)
<a name="l07023"></a>07023     {$1}
<a name="l07024"></a>07024 
<a name="l07025"></a>07025 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07026"></a>07026 
<a name="l07027"></a>07027 <span class="keyword">const</span> <a class="code" href="a00007.htm" title="Класс для описания элемента диалогового окна (контрола)">txDialog::Layout</a>* <a class="code" href="a00009.htm#a963d3281c5a4cf4989fa63552f9b52de" title="Устанавливает текущий макет диалогового окна.">txDialog::setLayout</a> (<span class="keyword">const</span> Layout* layout)
<a name="l07028"></a>07028     {
<a name="l07029"></a>07029 $1  <span class="keywordflow">return</span> std::swap (<a class="code" href="a00009.htm#a20f23d5aad5b4e3cc8ad8d7c49ac4fb7" title="Текущий макет диалога.">layout_</a>, layout), layout;
<a name="l07030"></a>07030     }
<a name="l07031"></a>07031 
<a name="l07032"></a>07032 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07033"></a>07033 
<a name="l07034"></a>07034 INT_PTR <a class="code" href="a00009.htm#ab7ce59b17cd589692664cd115addf99b" title="Запускает диалоговое окно.">txDialog::dialogBox</a> (WORD resourceID)
<a name="l07035"></a>07035     {
<a name="l07036"></a>07036 $1  <span class="keyword">const</span> <span class="keywordtype">char</span>* resName = (<span class="keywordtype">char</span>*)(ptrdiff_t) resourceID;
<a name="l07037"></a>07037 
<a name="l07038"></a>07038 $   <span class="keywordflow">if</span> (!FindResource (NULL, resName, RT_DIALOG)) <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Не найден ресурс диалога %d&quot;</span> <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a>
<a name="l07039"></a>07039                                                                           resourceID), 0;
<a name="l07040"></a>07040 $   <span class="keywordflow">return</span> DialogBoxParam (NULL, resName, NULL, <a class="code" href="a00009.htm#a5c3da5362871b4f7910044f9dfea2395" title="Настоящая диалоговая функция (не txDialog::dialogProc(), т.к. функция окна Win32 должна быть статичес...">dialogProc__</a>, (LPARAM) <span class="keyword">this</span>);
<a name="l07041"></a>07041     }
<a name="l07042"></a>07042 
<a name="l07043"></a>07043 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07044"></a>07044 
<a name="l07045"></a>07045 INT_PTR <a class="code" href="a00009.htm#ab7ce59b17cd589692664cd115addf99b" title="Запускает диалоговое окно.">txDialog::dialogBox</a> (<span class="keyword">const</span> <a class="code" href="a00007.htm" title="Класс для описания элемента диалогового окна (контрола)">txDialog::Layout</a>* layout <span class="comment">/*= NULL*/</span>, <span class="keywordtype">size_t</span> bufsize <span class="comment">/*= 0*/</span>)
<a name="l07046"></a>07046     {
<a name="l07047"></a>07047 $1  <span class="keywordflow">if</span> (!layout)  layout = <a class="code" href="a00009.htm#a20f23d5aad5b4e3cc8ad8d7c49ac4fb7" title="Текущий макет диалога.">layout_</a>;
<a name="l07048"></a>07048 $   <span class="keywordflow">if</span> (!layout)  <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Не установлен динамический шаблон диалога&quot;</span>), 0;
<a name="l07049"></a>07049 
<a name="l07050"></a>07050 $   <span class="keywordflow">if</span> (!bufsize) bufsize = 1024;
<a name="l07051"></a>07051 
<a name="l07052"></a>07052 $   DLGTEMPLATE* tmpl = (DLGTEMPLATE*) GlobalAlloc (GPTR, bufsize);
<a name="l07053"></a>07053 $   <span class="keywordflow">if</span> (!tmpl) <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;GlobalAlloc(): Нет памяти для шаблона диалога&quot;</span>), 0;
<a name="l07054"></a>07054 
<a name="l07055"></a>07055 $   <span class="keyword">const</span> Layout* dlg = &amp;layout[0];
<a name="l07056"></a>07056 
<a name="l07057"></a>07057 $   <span class="keyword">const</span> Layout  def = { <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a4c775f01785801b0b11ec0cd5bdd7230" title="Начало описания диалога">DIALOG</a>, NULL, 0,    0, 0, 0, 0,
<a name="l07058"></a>07058                                   WS_CAPTION | WS_SYSMENU | DS_MODALFRAME | DS_CENTER,
<a name="l07059"></a>07059                                   <span class="stringliteral">&quot;MS Shell Dlg&quot;</span>, 8 };
<a name="l07060"></a>07060 
<a name="l07061"></a>07061 $   <span class="keywordtype">void</span>* ptr = _tx_DLGTEMPLATE_Create (tmpl, bufsize,
<a name="l07062"></a>07062                                        (dlg-&gt;style? dlg-&gt;style : def.style) | DS_SETFONT, 0, 0,
<a name="l07063"></a>07063                                         dlg-&gt;x, dlg-&gt;y, dlg-&gt;sx, dlg-&gt;sy,
<a name="l07064"></a>07064                                         dlg-&gt;caption?  dlg-&gt;caption  : def.caption,
<a name="l07065"></a>07065                                         dlg-&gt;font?     dlg-&gt;font     : def.font,
<a name="l07066"></a>07066                                         dlg-&gt;fontsize? dlg-&gt;fontsize : def.fontsize, NULL);
<a name="l07067"></a>07067 $   WORD i = 0;
<a name="l07068"></a>07068 $   <span class="keywordflow">for</span> (i = 1; layout[i].<a class="code" href="a00007.htm#aef0e185c3b1c26598c04af6fc185afd2" title="Тип контрола">wndclass</a> != <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674adc6f24fd6915a3f2786a1b7045406924" title="Конец описания диалога">END</a>; ++i)
<a name="l07069"></a>07069         {
<a name="l07070"></a>07070 $       <span class="keyword">const</span> Layout* item = &amp;layout[i];
<a name="l07071"></a>07071 
<a name="l07072"></a>07072 $       ptr = _tx_DLGTEMPLATE_Add (ptr, bufsize - ((<span class="keywordtype">char</span>*)ptr - (<span class="keywordtype">char</span>*)tmpl),
<a name="l07073"></a>07073                                    item-&gt;style | WS_VISIBLE, 0,
<a name="l07074"></a>07074                                    item-&gt;x, item-&gt;y, item-&gt;sx, item-&gt;sy,
<a name="l07075"></a>07075                                    item-&gt;id, (<span class="keyword">const</span> <span class="keywordtype">char</span>*)item-&gt;wndclass,
<a name="l07076"></a>07076                                    item-&gt;caption);
<a name="l07077"></a>07077         }
<a name="l07078"></a>07078 
<a name="l07079"></a>07079 $   tmpl-&gt;cdit = (<span class="keywordtype">unsigned</span> short) (i-1);
<a name="l07080"></a>07080 $   INT_PTR res = DialogBoxIndirectParam (NULL, tmpl, NULL, <a class="code" href="a00009.htm#a5c3da5362871b4f7910044f9dfea2395" title="Настоящая диалоговая функция (не txDialog::dialogProc(), т.к. функция окна Win32 должна быть статичес...">dialogProc__</a>, (LPARAM) <span class="keyword">this</span>);
<a name="l07081"></a>07081 
<a name="l07082"></a>07082 $   GlobalFree (tmpl);
<a name="l07083"></a>07083 
<a name="l07084"></a>07084 $   <span class="keywordflow">return</span> res;
<a name="l07085"></a>07085     }
<a name="l07086"></a>07086 
<a name="l07087"></a>07087 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07088"></a>07088 
<a name="l07089"></a>07089 <span class="keywordtype">int</span> <a class="code" href="a00009.htm#ad25c6de764a1157b6bc7a0738794f906" title="Функция обработки сообщений диалогового окна.">txDialog::dialogProc</a> (HWND, UINT, WPARAM, LPARAM)
<a name="l07090"></a>07090     {
<a name="l07091"></a>07091 $1  <span class="keywordflow">return</span> FALSE;
<a name="l07092"></a>07092     }
<a name="l07093"></a>07093 
<a name="l07094"></a>07094 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07095"></a>07095 
<a name="l07096"></a>07096 <span class="keywordtype">int</span> CALLBACK <a class="code" href="a00009.htm#a5c3da5362871b4f7910044f9dfea2395" title="Настоящая диалоговая функция (не txDialog::dialogProc(), т.к. функция окна Win32 должна быть статичес...">txDialog::dialogProc__</a> (HWND wnd, UINT msg, WPARAM wParam, LPARAM lParam)
<a name="l07097"></a>07097     {
<a name="l07098"></a>07098 $1  <span class="keyword">static</span> <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>* this__ = NULL;
<a name="l07099"></a>07099 
<a name="l07100"></a>07100 $   <span class="keywordflow">if</span> (msg == WM_INITDIALOG) this__ = (<a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>*) lParam;
<a name="l07101"></a>07101 $   <span class="keywordflow">if</span> (!this__) <span class="keywordflow">return</span> FALSE;
<a name="l07102"></a>07102 
<a name="l07103"></a>07103 $   <span class="keywordflow">switch</span> (msg)
<a name="l07104"></a>07104         {
<a name="l07105"></a>07105         <span class="keywordflow">case</span> WM_INITDIALOG: $ SetForegroundWindow (wnd);         <span class="keywordflow">break</span>;
<a name="l07106"></a>07106 
<a name="l07107"></a>07107         <span class="keywordflow">case</span> WM_COMMAND:    $ <span class="keywordflow">switch</span> (LOWORD (wParam))
<a name="l07108"></a>07108             {
<a name="l07109"></a>07109             <span class="keywordflow">case</span> IDOK:
<a name="l07110"></a>07110             <span class="keywordflow">case</span> IDCANCEL:  $ SetForegroundWindow (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>());
<a name="l07111"></a>07111                             $ EndDialog (wnd, (INT_PTR) this__); <span class="keywordflow">break</span>;
<a name="l07112"></a>07112             <span class="keywordflow">default</span>:        $ <span class="keywordflow">break</span>;
<a name="l07113"></a>07113             }
<a name="l07114"></a>07114 
<a name="l07115"></a>07115         <span class="keywordflow">default</span>:            $ <span class="keywordflow">break</span>;
<a name="l07116"></a>07116         }
<a name="l07117"></a>07117 
<a name="l07118"></a>07118 $   <span class="keywordflow">return</span> this__-&gt; <a class="code" href="a00009.htm#ad25c6de764a1157b6bc7a0738794f906" title="Функция обработки сообщений диалогового окна.">dialogProc</a> (wnd, msg, wParam, lParam);
<a name="l07119"></a>07119     }
<a name="l07120"></a>07120 
<a name="l07121"></a>07121 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07122"></a>07122 
<a name="l07123"></a>07123 <span class="keywordtype">void</span>* _tx_DLGTEMPLATE_Create (<span class="keywordtype">void</span>* globalMem, <span class="keywordtype">size_t</span> bufsize, DWORD style, DWORD exStyle,
<a name="l07124"></a>07124                               WORD controls, <span class="keywordtype">short</span> x, <span class="keywordtype">short</span> y, <span class="keywordtype">short</span> cx, <span class="keywordtype">short</span> cy,
<a name="l07125"></a>07125                               <span class="keyword">const</span> <span class="keywordtype">char</span> caption[], <span class="keyword">const</span> <span class="keywordtype">char</span> font[], WORD fontsize,
<a name="l07126"></a>07126                               HANDLE menu)
<a name="l07127"></a>07127     {
<a name="l07128"></a>07128 $1  _TX_IF_ARGUMENT_FAILED (globalMem) return NULL;
<a name="l07129"></a>07129 
<a name="l07130"></a>07130 $   WORD* pw = (WORD*) globalMem;
<a name="l07131"></a>07131 
<a name="l07132"></a>07132 $   DLGTEMPLATE* tmpl = ((DLGTEMPLATE*&amp;) pw)++;
<a name="l07133"></a>07133 
<a name="l07134"></a>07134 $   tmpl-&gt;style = style;
<a name="l07135"></a>07135 $   tmpl-&gt;dwExtendedStyle = exStyle;
<a name="l07136"></a>07136 $   tmpl-&gt;cdit  = controls;
<a name="l07137"></a>07137 $   tmpl-&gt;x     = x;
<a name="l07138"></a>07138 $   tmpl-&gt;y     = y;
<a name="l07139"></a>07139 $   tmpl-&gt;cx    = cx;
<a name="l07140"></a>07140 $   tmpl-&gt;cy    = cy;
<a name="l07141"></a>07141 
<a name="l07142"></a>07142 $   *pw++ = (WORD)(ptrdiff_t) NULL;
<a name="l07143"></a>07143 $   *pw++ = (WORD)(ptrdiff_t) menu;
<a name="l07144"></a>07144 
<a name="l07145"></a>07145 $   if (caption)
<a name="l07146"></a>07146         {
<a name="l07147"></a>07147 $       pw  += MultiByteToWideChar (CP_ACP, 0, caption? caption : <span class="stringliteral">&quot;&quot;</span>, -1, (<span class="keywordtype">wchar_t</span>*) pw,
<a name="l07148"></a>07148                                    (<span class="keywordtype">int</span>) (bufsize? bufsize - ((<span class="keywordtype">char</span>*)pw - (<span class="keywordtype">char</span>*)globalMem) : 0xFFFF));
<a name="l07149"></a>07149         }
<a name="l07150"></a>07150 
<a name="l07151"></a>07151 $   <span class="keywordflow">if</span> (style &amp; DS_SETFONT)
<a name="l07152"></a>07152          {
<a name="l07153"></a>07153 $        *pw++ = fontsize;
<a name="l07154"></a>07154 $         pw  += MultiByteToWideChar (CP_ACP, 0, font?    font    : <span class="stringliteral">&quot;&quot;</span>, -1, (<span class="keywordtype">wchar_t</span>*) pw,
<a name="l07155"></a>07155                                      (<span class="keywordtype">int</span>) (bufsize? bufsize - ((<span class="keywordtype">char</span>*)pw - (<span class="keywordtype">char</span>*)globalMem) : 0xFFFF));
<a name="l07156"></a>07156          }
<a name="l07157"></a>07157 
<a name="l07158"></a>07158 $   <span class="keywordflow">return</span> pw;
<a name="l07159"></a>07159     }
<a name="l07160"></a>07160 
<a name="l07161"></a>07161 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07162"></a>07162 
<a name="l07163"></a>07163 <span class="keywordtype">void</span>* _tx_DLGTEMPLATE_Add (<span class="keywordtype">void</span>* dlgTemplatePtr, <span class="keywordtype">size_t</span> bufsize, DWORD style, DWORD exStyle,
<a name="l07164"></a>07164                            <span class="keywordtype">short</span> x, <span class="keywordtype">short</span> y, <span class="keywordtype">short</span> cx, <span class="keywordtype">short</span> cy,
<a name="l07165"></a>07165                            WORD <span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> wclass[], <span class="keyword">const</span> <span class="keywordtype">char</span> caption[])
<a name="l07166"></a>07166     {
<a name="l07167"></a>07167 $1  _TX_IF_ARGUMENT_FAILED (dlgTemplatePtr) return NULL;
<a name="l07168"></a>07168 
<a name="l07169"></a>07169 $   WORD* pw = (LPWORD) dlgTemplatePtr;  <span class="comment">// Force align at word boundary</span>
<a name="l07170"></a>07170 $   (ULONG&amp;) pw  += 3;
<a name="l07171"></a>07171 $   (ULONG&amp;) pw &gt;&gt;= 2;
<a name="l07172"></a>07172 $   (ULONG&amp;) pw &lt;&lt;= 2;
<a name="l07173"></a>07173 
<a name="l07174"></a>07174 $   DLGITEMTEMPLATE* tmpl = ((DLGITEMTEMPLATE*&amp;) pw)++;
<a name="l07175"></a>07175 
<a name="l07176"></a>07176 $   tmpl-&gt;style = style;
<a name="l07177"></a>07177 $   tmpl-&gt;dwExtendedStyle = exStyle;
<a name="l07178"></a>07178 $   tmpl-&gt;x     = x;
<a name="l07179"></a>07179 $   tmpl-&gt;y     = y;
<a name="l07180"></a>07180 $   tmpl-&gt;cx    = cx;
<a name="l07181"></a>07181 $   tmpl-&gt;cy    = cy;
<a name="l07182"></a>07182 $   tmpl-&gt;<span class="keywordtype">id</span>    = <span class="keywordtype">id</span>;
<a name="l07183"></a>07183 
<a name="l07184"></a>07184 $   if (HIWORD (wclass) == 0xFFFF)
<a name="l07185"></a>07185         {
<a name="l07186"></a>07186 $       *pw++ = (WORD) (HIWORD ((ptrdiff_t) wclass));
<a name="l07187"></a>07187 $       *pw++ = (WORD) (LOWORD ((ptrdiff_t) wclass));
<a name="l07188"></a>07188         }
<a name="l07189"></a>07189     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (wclass)
<a name="l07190"></a>07190         {
<a name="l07191"></a>07191 $       pw  += MultiByteToWideChar (CP_ACP, 0, (<span class="keywordtype">char</span>*) wclass, -1, (<span class="keywordtype">wchar_t</span>*) pw,
<a name="l07192"></a>07192                                    (<span class="keywordtype">int</span>) (bufsize? bufsize - ((<span class="keywordtype">char</span>*)pw - (<span class="keywordtype">char</span>*)dlgTemplatePtr) : 0xFFFF));
<a name="l07193"></a>07193         }
<a name="l07194"></a>07194     <span class="keywordflow">else</span>
<a name="l07195"></a>07195         {
<a name="l07196"></a>07196 $       *pw++ = 0;
<a name="l07197"></a>07197         }
<a name="l07198"></a>07198 
<a name="l07199"></a>07199 $   <span class="keywordflow">if</span> (caption)
<a name="l07200"></a>07200          {
<a name="l07201"></a>07201 $        pw  += MultiByteToWideChar (CP_ACP, 0, caption, -1, (<span class="keywordtype">wchar_t</span>*) pw,
<a name="l07202"></a>07202                                     (<span class="keywordtype">int</span>) (bufsize? bufsize - ((<span class="keywordtype">char</span>*)pw - (<span class="keywordtype">char</span>*)dlgTemplatePtr) : 0xFFFF));
<a name="l07203"></a>07203          }
<a name="l07204"></a>07204     <span class="keywordflow">else</span>
<a name="l07205"></a>07205         {
<a name="l07206"></a>07206 $       *pw++ = 0;
<a name="l07207"></a>07207         }
<a name="l07208"></a>07208 
<a name="l07209"></a>07209 $   *pw++ = 0;
<a name="l07210"></a>07210 
<a name="l07211"></a>07211 $   <span class="keywordflow">return</span> pw;
<a name="l07212"></a>07212     }
<a name="l07213"></a>07213 
<a name="l07214"></a>07214 <span class="comment">//}</span>
<a name="l07215"></a>07215 <span class="comment">//============================================================================================</span>
<a name="l07216"></a>07216 
<a name="l07217"></a>07217 <span class="comment">//============================================================================================</span>
<a name="l07218"></a>07218 <span class="comment">//{          Cleaning up the utility macros</span>
<a name="l07219"></a>07219 <span class="comment">//           Очистка служебных макросов</span>
<a name="l07220"></a>07220 <span class="comment">//============================================================================================</span>
<a name="l07221"></a>07221 
<a name="l07222"></a>07222 <span class="preprocessor">#undef       $</span>
<a name="l07223"></a>07223 <span class="preprocessor"></span>
<a name="l07224"></a>07224 <span class="comment">//}</span>
<a name="l07225"></a>07225 <span class="comment">//============================================================================================</span>
<a name="l07226"></a>07226 
<a name="l07228"></a>07228 <span class="comment">//}</span>
<a name="l07229"></a>07229 <span class="comment">//============================================================================================</span>
<a name="l07230"></a>07230 
<a name="l07233"></a>07233 } }  <span class="comment">// namespace TX, namespace _TX</span>
<a name="l07234"></a>07234 
<a name="l07237"></a>07237 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07238"></a>07238 <span class="comment">//{          Easy using of TX:: and some of std::</span>
<a name="l07239"></a>07239 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07240"></a>07240 
<a name="l07241"></a>07241 <span class="preprocessor">#ifndef _TX_NAMED</span>
<a name="l07242"></a>07242 <span class="preprocessor"></span><span class="keyword">using namespace </span>TX;            <span class="comment">// Allow easy usage of TXLib functions</span>
<a name="l07243"></a>07243 <span class="preprocessor">#endif</span>
<a name="l07244"></a>07244 <span class="preprocessor"></span>
<a name="l07245"></a>07245 using ::std::cin;              <span class="comment">// Predefined usings to avoid &quot;using namespace std&quot;</span>
<a name="l07246"></a>07246 using ::std::cout;
<a name="l07247"></a>07247 using ::std::cerr;
<a name="l07248"></a>07248 using ::std::string;
<a name="l07249"></a>07249 
<a name="l07250"></a>07250 <span class="comment">//}</span>
<a name="l07251"></a>07251 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07252"></a>07252 
<a name="l07253"></a>07253 <span class="comment">//============================================================================================</span>
<a name="l07254"></a>07254 <span class="comment">//{          [Experimental] Debugging macros</span>
<a name="l07256"></a>07256 <span class="comment"></span><span class="comment">//============================================================================================</span>
<a name="l07257"></a>07257 
<a name="l07258"></a>07258 <span class="comment">//{-------------------------------------------------------------------------------------------</span>
<a name="l07331"></a>07331 <span class="comment"></span><span class="comment">//}-------------------------------------------------------------------------------------------</span>
<a name="l07332"></a>07332 
<a name="l07333"></a>07333 <span class="preprocessor">#ifndef __TX_DEBUG_MACROS</span>
<a name="l07334"></a><a class="code" href="a00032.htm#gaaa5d2cd4ba134312dcaca4e8316bbe9e">07334</a> <span class="preprocessor"></span><span class="preprocessor">#define __TX_DEBUG_MACROS  (&quot;Группа отладочных $-макросов&quot;)</span>
<a name="l07335"></a>07335 <span class="preprocessor"></span>
<a name="l07337"></a>07337 
<a name="l07338"></a>07338 <span class="preprocessor">#define $_(var)      _txDump (var)</span>
<a name="l07339"></a>07339 <span class="preprocessor"></span>
<a name="l07340"></a>07340 <span class="preprocessor">#define $(var)     ( _txDump ((var),  &quot;[&quot; #var &quot; = &quot;, &quot;]&quot;) )</span>
<a name="l07341"></a>07341 <span class="preprocessor"></span>
<a name="l07342"></a>07342 <span class="preprocessor">#define $$(cmd)    (  std::cout &lt;&lt;  &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot;]\n&quot;,  \</span>
<a name="l07343"></a>07343 <span class="preprocessor">                     _txDump ((cmd),&quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot;: &quot;, &quot;, DONE]\n&quot;) )</span>
<a name="l07344"></a>07344 <span class="preprocessor"></span>
<a name="l07345"></a>07345 <span class="preprocessor">#define $$_(cmd)   (  std::cout &lt;&lt;  &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot;]\n&quot;,  \</span>
<a name="l07346"></a>07346 <span class="preprocessor">                     _txDump ((cmd),  &quot;[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot;: &quot;, &quot;, DONE]\n&quot;) )</span>
<a name="l07347"></a>07347 <span class="preprocessor"></span>
<a name="l07348"></a>07348 <span class="preprocessor">#define $$$(cmd)   {  std::cout &lt;&lt;  &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot;]\n&quot;;  \</span>
<a name="l07349"></a>07349 <span class="preprocessor">                     _txDumpSuffix (&quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot; DONE]\n&quot;); { cmd; } }</span>
<a name="l07350"></a>07350 <span class="preprocessor"></span>
<a name="l07351"></a>07351 <span class="preprocessor">#define $$$_(cmd)  {  std::cout &lt;&lt;  &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot;]\n&quot;;  \</span>
<a name="l07352"></a>07352 <span class="preprocessor">                     _txDumpSuffix (  &quot;[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot; DONE]\n&quot;); { cmd; } }</span>
<a name="l07353"></a>07353 <span class="preprocessor"></span>
<a name="l07354"></a>07354 <span class="preprocessor">#define $$$$       {{ $s $l txOutputDebugPrintf (&quot;\f\n&quot; &quot;[%s (%d) %s]&quot;, __FILE__, __LINE__, __TX_FUNCTION__); } \</span>
<a name="l07355"></a>07355 <span class="preprocessor">                            txOutputDebugPrintf (&quot;\f\n&quot;); }</span>
<a name="l07356"></a>07356 <span class="preprocessor"></span>
<a name="l07357"></a>07357 <span class="preprocessor">#define $n            std::cout &lt;&lt; &quot;\n&quot;;</span>
<a name="l07358"></a>07358 <span class="preprocessor"></span>
<a name="l07359"></a>07359 <span class="preprocessor">#define $s            _txSaveConsoleAttr __txSaveConsoleAttr;</span>
<a name="l07360"></a>07360 <span class="preprocessor"></span>
<a name="l07361"></a>07361 <span class="preprocessor">#define $T            txSetConsoleAttr (0x00);</span>
<a name="l07362"></a>07362 <span class="preprocessor"></span><span class="preprocessor">#define $B            txSetConsoleAttr (0x01);</span>
<a name="l07363"></a>07363 <span class="preprocessor"></span><span class="preprocessor">#define $G            txSetConsoleAttr (0x02);</span>
<a name="l07364"></a>07364 <span class="preprocessor"></span><span class="preprocessor">#define $C            txSetConsoleAttr (0x03);</span>
<a name="l07365"></a>07365 <span class="preprocessor"></span><span class="preprocessor">#define $R            txSetConsoleAttr (0x04);</span>
<a name="l07366"></a>07366 <span class="preprocessor"></span><span class="preprocessor">#define $M            txSetConsoleAttr (0x05);</span>
<a name="l07367"></a>07367 <span class="preprocessor"></span><span class="preprocessor">#define $Y            txSetConsoleAttr (0x06);</span>
<a name="l07368"></a>07368 <span class="preprocessor"></span><span class="preprocessor">#define $d            txSetConsoleAttr (0x07);</span>
<a name="l07369"></a>07369 <span class="preprocessor"></span><span class="preprocessor">#define $D            txSetConsoleAttr (0x08);</span>
<a name="l07370"></a>07370 <span class="preprocessor"></span><span class="preprocessor">#define $b            txSetConsoleAttr (0x09);</span>
<a name="l07371"></a>07371 <span class="preprocessor"></span><span class="preprocessor">#define $g            txSetConsoleAttr (0x0a);</span>
<a name="l07372"></a>07372 <span class="preprocessor"></span><span class="preprocessor">#define $c            txSetConsoleAttr (0x0b);</span>
<a name="l07373"></a>07373 <span class="preprocessor"></span><span class="preprocessor">#define $r            txSetConsoleAttr (0x0c);</span>
<a name="l07374"></a>07374 <span class="preprocessor"></span><span class="preprocessor">#define $m            txSetConsoleAttr (0x0d);</span>
<a name="l07375"></a>07375 <span class="preprocessor"></span><span class="preprocessor">#define $y            txSetConsoleAttr (0x0e);</span>
<a name="l07376"></a>07376 <span class="preprocessor"></span><span class="preprocessor">#define $t            txSetConsoleAttr (0x0f);</span>
<a name="l07377"></a>07377 <span class="preprocessor"></span>
<a name="l07378"></a>07378 <span class="preprocessor">#define $i            txSetConsoleAttr (0x1b);</span>
<a name="l07379"></a>07379 <span class="preprocessor"></span><span class="preprocessor">#define $I            txSetConsoleAttr (0x1e);</span>
<a name="l07380"></a>07380 <span class="preprocessor"></span><span class="preprocessor">#define $a            txSetConsoleAttr (0x2a);</span>
<a name="l07381"></a>07381 <span class="preprocessor"></span><span class="preprocessor">#define $A            txSetConsoleAttr (0x2e);</span>
<a name="l07382"></a>07382 <span class="preprocessor"></span><span class="preprocessor">#define $e            txSetConsoleAttr (0x4f);</span>
<a name="l07383"></a>07383 <span class="preprocessor"></span><span class="preprocessor">#define $E            txSetConsoleAttr (0x4e);</span>
<a name="l07384"></a>07384 <span class="preprocessor"></span><span class="preprocessor">#define $w            txSetConsoleAttr (0x5d);</span>
<a name="l07385"></a>07385 <span class="preprocessor"></span><span class="preprocessor">#define $W            txSetConsoleAttr (0x5e);</span>
<a name="l07386"></a>07386 <span class="preprocessor"></span><span class="preprocessor">#define $f            txSetConsoleAttr (0xc0);</span>
<a name="l07387"></a>07387 <span class="preprocessor"></span><span class="preprocessor">#define $F            txSetConsoleAttr (0xc5);</span>
<a name="l07388"></a>07388 <span class="preprocessor"></span><span class="preprocessor">#define $l            txSetConsoleAttr (0x80);</span>
<a name="l07389"></a>07389 <span class="preprocessor"></span><span class="preprocessor">#define $L            txSetConsoleAttr (0x87);</span>
<a name="l07390"></a>07390 <span class="preprocessor"></span>
<a name="l07391"></a>07391 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07392"></a>07392 
<a name="l07393"></a>07393 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span>
<a name="l07394"></a>07394 <span class="keyword">const</span> T&amp; _txDump (<span class="keyword">const</span> T&amp; value, <span class="keyword">const</span> <span class="keywordtype">char</span>* prefix = <span class="stringliteral">&quot;&quot;</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* suffix = <span class="stringliteral">&quot;&quot;</span>)
<a name="l07395"></a>07395     {
<a name="l07396"></a>07396     <span class="keywordflow">if</span> (prefix) std::cout &lt;&lt; prefix &lt;&lt; value &lt;&lt; suffix;
<a name="l07397"></a>07397     <span class="keywordflow">return</span> value;
<a name="l07398"></a>07398     }
<a name="l07399"></a>07399 
<a name="l07400"></a>07400 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span>
<a name="l07401"></a>07401       T&amp; _txDump (      T&amp; value, <span class="keyword">const</span> <span class="keywordtype">char</span>* prefix = <span class="stringliteral">&quot;&quot;</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* suffix = <span class="stringliteral">&quot;&quot;</span>)
<a name="l07402"></a>07402     {
<a name="l07403"></a>07403     <span class="keywordflow">if</span> (prefix) std::cout &lt;&lt; prefix &lt;&lt; value &lt;&lt; suffix;
<a name="l07404"></a>07404     <span class="keywordflow">return</span> value;
<a name="l07405"></a>07405     }
<a name="l07406"></a>07406 
<a name="l07407"></a>07407 <span class="keyword">struct </span>_txDumpSuffix
<a name="l07408"></a>07408     {
<a name="l07409"></a>07409     <span class="keyword">const</span> <span class="keywordtype">char</span>* suffix_;
<a name="l07410"></a>07410 
<a name="l07411"></a>07411     <span class="keyword">inline</span>  _txDumpSuffix (<span class="keyword">const</span> <span class="keywordtype">char</span>* suffix = <span class="stringliteral">&quot;&quot;</span>) : suffix_ (suffix)     {}
<a name="l07412"></a>07412     <span class="keyword">inline</span> ~_txDumpSuffix()                         { std::cout &lt;&lt; suffix_; }
<a name="l07413"></a>07413 
<a name="l07414"></a>07414     _txDumpSuffix             (<span class="keyword">const</span> _txDumpSuffix&amp;);
<a name="l07415"></a>07415     _txDumpSuffix&amp; operator = (<span class="keyword">const</span> _txDumpSuffix&amp;);
<a name="l07416"></a>07416     };
<a name="l07417"></a>07417 
<a name="l07418"></a>07418 <span class="keyword">struct </span>_txSaveConsoleAttr
<a name="l07419"></a>07419     {
<a name="l07420"></a>07420     WORD attr_;
<a name="l07421"></a>07421 
<a name="l07422"></a>07422     <span class="keyword">inline</span>  _txSaveConsoleAttr()           : attr_ (<a class="code" href="a00029.htm#ga09e52cdcd5a3fc97015a4ddbd3a0a0c2" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a> ()) {}
<a name="l07423"></a>07423     <span class="keyword">inline</span>  _txSaveConsoleAttr (WORD attr) : attr_ (<a class="code" href="a00029.htm#ga09e52cdcd5a3fc97015a4ddbd3a0a0c2" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a> ()) { <a class="code" href="a00029.htm#gad993cf2d466cf203a1365e117b937d7f" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (attr);  }
<a name="l07424"></a>07424     <span class="keyword">inline</span> ~_txSaveConsoleAttr()                                         { <a class="code" href="a00029.htm#gad993cf2d466cf203a1365e117b937d7f" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (attr_); }
<a name="l07425"></a>07425     };
<a name="l07426"></a>07426 
<a name="l07428"></a>07428 
<a name="l07429"></a>07429 <span class="preprocessor">#endif</span>
<a name="l07430"></a>07430 <span class="preprocessor"></span>
<a name="l07431"></a>07431 <span class="comment">//}</span>
<a name="l07432"></a>07432 <span class="comment">//============================================================================================</span>
<a name="l07433"></a>07433 
<a name="l07434"></a>07434 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07435"></a>07435 <span class="comment">//{          Compiler- and platform-specific</span>
<a name="l07436"></a>07436 <span class="comment">//           Адаптация к компиляторам и платформам</span>
<a name="l07437"></a>07437 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07439"></a>07439 <span class="comment"></span>
<a name="l07440"></a>07440 <span class="preprocessor">#if defined (__GNUC__) &amp;&amp; (__GNUC__ &gt;= 4) &amp;&amp; (__GNUC_MINOR__ &gt;= 3)</span>
<a name="l07441"></a>07441 <span class="preprocessor"></span>
<a name="l07442"></a>07442 <span class="preprocessor">    #pragma GCC optimize            (&quot;strict-aliasing&quot;)</span>
<a name="l07443"></a>07443 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning &quot;-Wstrict-aliasing&quot;</span>
<a name="l07444"></a>07444 <span class="preprocessor"></span>
<a name="l07445"></a>07445 <span class="preprocessor">    #pragma GCC diagnostic warning &quot;-Wshadow&quot;</span>
<a name="l07446"></a>07446 <span class="preprocessor"></span>
<a name="l07447"></a>07447     <span class="comment">// Still block this warning to avoid reporting about &quot;= {0}&quot; or &quot;= {}&quot; initialization.</span>
<a name="l07448"></a>07448 
<a name="l07449"></a>07449 <span class="preprocessor">    #if 0</span>
<a name="l07450"></a>07450 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning &quot;-Wmissing-field-initializers&quot;</span>
<a name="l07451"></a>07451 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l07452"></a>07452 <span class="preprocessor"></span>
<a name="l07453"></a>07453     <span class="comment">// These warnings really occur at end of compilation, so do not restore them.</span>
<a name="l07454"></a>07454 
<a name="l07455"></a>07455 <span class="preprocessor">    #if 0</span>
<a name="l07456"></a>07456 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning &quot;-Wunreachable-code&quot;</span>
<a name="l07457"></a>07457 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning &quot;-Wunused-label&quot;</span>
<a name="l07458"></a>07458 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning &quot;-Winline&quot;</span>
<a name="l07459"></a>07459 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l07460"></a>07460 <span class="preprocessor"></span>
<a name="l07461"></a>07461 <span class="preprocessor">#endif</span>
<a name="l07462"></a>07462 <span class="preprocessor"></span>
<a name="l07463"></a>07463 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07464"></a>07464 
<a name="l07465"></a>07465 <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l07466"></a>07466 <span class="preprocessor"></span>
<a name="l07467"></a>07467 <span class="preprocessor">    #pragma warning (default: 4127)             // conditional expression is constant</span>
<a name="l07468"></a>07468 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 4351)             // new behavior: elements of array ... will be default initialized</span>
<a name="l07469"></a>07469 <span class="preprocessor"></span>
<a name="l07470"></a>07470 <span class="preprocessor">    #pragma warning (default: 4511)             // copy constructor could not be generated</span>
<a name="l07471"></a>07471 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 4512)             // assignment operator could not be generated</span>
<a name="l07472"></a>07472 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4514)             // unreferenced inline function has been removed</span>
<a name="l07473"></a>07473 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 4663)             // C++ language change: to explicitly specialize class template &#39;...&#39;</span>
<a name="l07474"></a>07474 <span class="preprocessor"></span>
<a name="l07475"></a>07475     <span class="comment">// This warning really occur at end of compilation, so do not restore it.</span>
<a name="l07476"></a>07476 
<a name="l07477"></a>07477 <span class="preprocessor">    #if 0</span>
<a name="l07478"></a>07478 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 4710)             // function &#39;...&#39; not inlined</span>
<a name="l07479"></a>07479 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l07480"></a>07480 <span class="preprocessor"></span>
<a name="l07481"></a>07481 <span class="preprocessor">#endif</span>
<a name="l07482"></a>07482 <span class="preprocessor"></span>
<a name="l07483"></a>07483 <span class="preprocessor">#if defined (__INTEL_COMPILER)</span>
<a name="l07484"></a>07484 <span class="preprocessor"></span>
<a name="l07485"></a>07485 <span class="preprocessor">    #pragma warning (default:  174)             // remark: expression has no effect</span>
<a name="l07486"></a>07486 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default:  304)             // remark: access control not specified (&quot;public&quot; by default)</span>
<a name="l07487"></a>07487 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default:  522)             // remark: function &quot;...&quot; redeclared &quot;inline&quot; after being called</span>
<a name="l07488"></a>07488 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default:  981)             // remark: operands are evaluated in unspecified order</span>
<a name="l07489"></a>07489 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 1684)             // conversion from pointer to same-sized integral type (potential portability problem)</span>
<a name="l07490"></a>07490 <span class="preprocessor"></span>
<a name="l07491"></a>07491 <span class="preprocessor">#endif</span>
<a name="l07492"></a>07492 <span class="preprocessor"></span>
<a name="l07494"></a>07494 <span class="comment">//}</span>
<a name="l07495"></a>07495 <span class="comment">//--------------------------------------------------------------------------------------------</span>
<a name="l07496"></a>07496 
<a name="l07497"></a>07497 <span class="preprocessor">#endif // __TXLIB_H</span>
<a name="l07498"></a>07498 <span class="preprocessor"></span>
<a name="l07499"></a>07499 <span class="comment">//============================================================================================</span>
<a name="l07500"></a>07500 <span class="comment">// EOF</span>
<a name="l07501"></a>07501 <span class="comment">//============================================================================================</span>
<a name="l07502"></a>07502 
<a name="l07503"></a>07503 
<a name="l07504"></a>07504 
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="a00024.htm">TXLib.h</a>      </li>
      <li class="footer">Документация по TX Library. Последние изменения: Wed Jun 8 2011 23:25:00. Создано системой&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>

</body>
</html>
